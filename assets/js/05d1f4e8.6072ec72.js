"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[2406],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(96540);const a={},s=r.createContext(a);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:n},e.children)}},48950:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"development/core-actionscript-classes/working-with-arrays/indexed-arrays","title":"Indexed arrays","description":"Indexed arrays store a series of one or more values organized such that each","source":"@site/docs/development/core-actionscript-classes/working-with-arrays/indexed-arrays.md","sourceDirName":"development/core-actionscript-classes/working-with-arrays","slug":"/development/core-actionscript-classes/working-with-arrays/indexed-arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/indexed-arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-arrays/indexed-arrays.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Basics of arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/basics-of-arrays"},"next":{"title":"Associative arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/associative-arrays"}}');var a=t(74848),s=t(28453);const o={sidebar_position:2},i="Indexed arrays",c={},h=[{value:"The Array class",id:"the-array-class",level:4},{value:"The Vector class",id:"the-vector-class",level:4},{value:"Creating arrays",id:"creating-arrays",level:2},{value:"Creating an Array instance",id:"creating-an-array-instance",level:3},{value:"Creating a Vector instance",id:"creating-a-vector-instance",level:3},{value:"Using the Vector.&lt;T&gt;() constructor",id:"using-the-vectort-constructor",level:4},{value:"Using the Vector literal syntax constructor",id:"using-the-vector-literal-syntax-constructor",level:4},{value:"Using the Vector.&lt;T&gt;() global function",id:"using-the-vectort-global-function",level:4},{value:"Inserting array elements",id:"inserting-array-elements",level:2},{value:"Retrieving values and removing array elements",id:"retrieving-values-and-removing-array-elements",level:2},{value:"Sorting an array",id:"sorting-an-array",level:2},{value:"The reverse() method",id:"the-reverse-method",level:4},{value:"Basic sorting with the sort() method (Array class only)",id:"basic-sorting-with-the-sort-method-array-class-only",level:4},{value:"Custom sorting with the sort() method (Array and Vector classes)",id:"custom-sorting-with-the-sort-method-array-and-vector-classes",level:4},{value:"The sortOn() method (Array class only)",id:"the-sorton-method-array-class-only",level:4},{value:"Sorting without modifying the original array (Array class only)",id:"sorting-without-modifying-the-original-array-array-class-only",level:4},{value:"Querying an array",id:"querying-an-array",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"indexed-arrays",children:"Indexed arrays"})}),"\n",(0,a.jsx)(n.p,{children:"Indexed arrays store a series of one or more values organized such that each\nvalue can be accessed using an unsigned integer value. The first index is always\nthe number 0, and the index increments by 1 for each subsequent element added to\nthe array. In ActionScript 3.0, two classes are used as indexed arrays: the\nArray class and the Vector class."}),"\n",(0,a.jsxs)(n.p,{children:["Indexed arrays use an unsigned 32-bit integer for the index number. The maximum\nsize of an indexed array is 2 ",(0,a.jsx)("sup",{children:"32"})," - 1 or 4,294,967,295. An attempt to\ncreate an array that is larger than the maximum size results in a run-time\nerror."]}),"\n",(0,a.jsxs)(n.p,{children:["To access an individual element of an indexed array, you use the array access (\n",(0,a.jsx)(n.code,{children:"[]"})," ) operator to specify the index position of the element you wish to access.\nFor example, the following code represents the first element (the element at\nindex 0) in an indexed array named ",(0,a.jsx)(n.code,{children:"songTitles"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"songTitles[0]\n"})}),"\n",(0,a.jsx)(n.p,{children:"The combination of the array variable name followed by the index in square\nbrackets functions as a single identifier. (In other words, it can be used in\nany way a variable name can). You can assign a value to an indexed array element\nby using the name and index on the left side of an assignment statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'songTitles[1] = "Symphony No. 5 in D minor";\n'})}),"\n",(0,a.jsx)(n.p,{children:"Likewise, you can retrieve the value of an indexed array element by using the\nname and index on the right side of an assignment statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var nextSong:String = songTitles[2];\n"})}),"\n",(0,a.jsxs)(n.p,{children:['You can also use a variable in the square brackets rather than providing an\nexplicit value. (The variable must contain a non-negative integer value such as\na uint, a positive int, or a positive integer Number instance). This technique\nis commonly used to "loop over" the elements in an indexed array and perform an\noperation on some or all the elements. The following code listing demonstrates\nthis technique. The code uses a loop to access each value in an Array object\nnamed ',(0,a.jsx)(n.code,{children:"oddNumbers"}),". It uses the ",(0,a.jsx)(n.code,{children:"trace()"}),' statement to print each value in the\nform "oddNumber[ ',(0,a.jsx)(n.em,{children:"index"})," ] = ",(0,a.jsx)(n.em,{children:"value"}),' ":']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var oddNumbers:Array = [1, 3, 5, 7, 9, 11];\nvar len:uint = oddNumbers.length;\nfor (var i:uint = 0; i < len; i++)\n{\n      trace("oddNumbers[" + i.toString() + "] = " + oddNumbers[i].toString());\n}\n'})}),"\n",(0,a.jsx)(n.h4,{id:"the-array-class",children:"The Array class"}),"\n",(0,a.jsx)(n.p,{children:"The first type of indexed array is the Array class. An Array instance can hold a\nvalue of any data type. The same Array object can hold objects that are of\ndifferent data types. For example, a single Array instance can have a String\nvalue in index 0, a Number instance in index 1, and an XML object in index 2."}),"\n",(0,a.jsx)(n.h4,{id:"the-vector-class",children:"The Vector class"}),"\n",(0,a.jsxs)(n.p,{children:["Another type of indexed array that's available in ActionScript 3.0 is the Vector\nclass. A Vector instance is a ",(0,a.jsx)(n.em,{children:"typed array"}),", which means that all the elements\nin a Vector instance always have the same data type."]}),"\n",(0,a.jsx)(n.p,{children:"Note: The Vector class is available starting with Flash Player 10 and Adobe AIR\n1.5."}),"\n",(0,a.jsxs)(n.p,{children:["When you declare a Vector variable or instantiate a Vector object, you\nexplicitly specify the data type of the objects that the Vector can contain. The\nspecified data type is known as the Vector's ",(0,a.jsx)(n.em,{children:"base type"}),". At run time and at\ncompile time (in strict mode), any code that sets the value of a Vector element\nor retrieves a value from a Vector is checked. If the data type of the object\nbeing added or retrieved doesn't match the Vector's base type, an error occurs."]}),"\n",(0,a.jsx)(n.p,{children:"In addition to the data type restriction, the Vector class has other\nrestrictions that distinguish it from the Array class:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["A Vector is a dense array. An Array object may have values in indices 0 and 7\neven if it has no values in positions 1 through 6. However, a Vector must have\na value (or ",(0,a.jsx)(n.code,{children:"null"})," ) in each index."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"A Vector can optionally be fixed-length. This means that the number of\nelements the Vector contains can't change."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Access to a Vector's elements is bounds-checked. You can never read a value\nfrom an index greater than the final element (",(0,a.jsx)(n.code,{children:"length"})," - 1). You can never set\na value with an index more than one beyond the current final index. (In other\nwords, you can only set a value at an existing index or at index ",(0,a.jsx)(n.code,{children:"[length]"}),".)"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"As a result of its restrictions, a Vector has three primary benefits over an\nArray instance whose elements are all instances of a single class:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Performance: array element access and iteration are much faster when using a\nVector instance than when using an Array instance."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Type safety: in strict mode the compiler can identify data type errors.\nExamples of such errors include assigning a value of the incorrect data type\nto a Vector or expecting the wrong data type when reading a value from a\nVector. At run time, data types are also checked when adding data to or\nreading data from a Vector object. Note, however, that when you use the\n",(0,a.jsx)(n.code,{children:"push()"})," method or ",(0,a.jsx)(n.code,{children:"unshift()"})," method to add values to a Vector, the\narguments' data types are not checked at compile time. When using those\nmethods the values are still checked at run time."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Reliability: runtime range checking (or fixed-length checking) increases\nreliability significantly over Arrays."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Aside from the additional restrictions and benefits, the Vector class is very\nmuch like the Array class. The properties and methods of a Vector object are\nsimilar\u2014for the most part identical\u2014to the properties and methods of an Array.\nIn most situations where you would use an Array in which all the elements have\nthe same data type, a Vector instance is preferable."}),"\n",(0,a.jsx)(n.h2,{id:"creating-arrays",children:"Creating arrays"}),"\n",(0,a.jsx)(n.p,{children:"You can use several techniques to create an Array instance or a Vector instance.\nHowever, the techniques to create each type of array are somewhat different."}),"\n",(0,a.jsx)(n.h3,{id:"creating-an-array-instance",children:"Creating an Array instance"}),"\n",(0,a.jsxs)(n.p,{children:["You create an Array object by calling the ",(0,a.jsx)(n.code,{children:"Array()"})," constructor or by using\nArray literal syntax."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Array()"})," constructor function can be used in three ways. First, if you call\nthe constructor with no arguments, you get an empty array. You can use the\n",(0,a.jsx)(n.code,{children:"length"})," property of the Array class to verify that the array has no elements.\nFor example, the following code calls the ",(0,a.jsx)(n.code,{children:"Array()"})," constructor with no\narguments:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var names:Array = new Array();\ntrace(names.length); // output: 0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Second, if you use a number as the only parameter to the ",(0,a.jsx)(n.code,{children:"Array()"})," constructor,\nan array of that length is created, with each element's value set to\n",(0,a.jsx)(n.code,{children:"undefined"}),". The argument must be an unsigned integer between the values 0 and\n4,294,967,295. For example, the following code calls the ",(0,a.jsx)(n.code,{children:"Array()"})," constructor\nwith a single numeric argument:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var names:Array = new Array(3);\ntrace(names.length); // output: 3\ntrace(names[0]); // output: undefined\ntrace(names[1]); // output: undefined\ntrace(names[2]); // output: undefined\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Third, if you call the constructor and pass a list of elements as parameters, an\narray is created, with elements corresponding to each of the parameters. The\nfollowing code passes three arguments to the ",(0,a.jsx)(n.code,{children:"Array()"})," constructor:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var names:Array = new Array("John", "Jane", "David");\ntrace(names.length); // output: 3\ntrace(names[0]); // output: John\ntrace(names[1]); // output: Jane\ntrace(names[2]); // output: David\n'})}),"\n",(0,a.jsx)(n.p,{children:"You can also create arrays with Array literals. An Array literal can be assigned\ndirectly to an array variable, as shown in the following example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var names:Array = ["John", "Jane", "David"];\n'})}),"\n",(0,a.jsx)(n.h3,{id:"creating-a-vector-instance",children:"Creating a Vector instance"}),"\n",(0,a.jsxs)(n.p,{children:["You create a Vector instance by calling the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," constructor. You can\nalso create a Vector by calling the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function. That\nfunction converts a specified object to a Vector instance. In Flash Professional\nCS5 and later, Flash Builder 4 and later, and Flex 4 and later, you can also\ncreate a vector instance by using Vector literal syntax."]}),"\n",(0,a.jsxs)(n.p,{children:["Any time you declare a Vector variable (or similarly, a Vector method parameter\nor method return type) you specify the base type of the Vector variable. You\nalso specify the base type when you create a Vector instance by calling the\n",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," constructor. Put another way, any time you use the term ",(0,a.jsx)(n.code,{children:"Vector"}),"\nin ActionScript, it is accompanied by a base type."]}),"\n",(0,a.jsxs)(n.p,{children:["You specify the Vector's base type using type parameter syntax. The type\nparameter immediately follows the word ",(0,a.jsx)(n.code,{children:"Vector"})," in the code. It consists of a\ndot ( ",(0,a.jsx)(n.code,{children:"."})," ), then the base class name surrounded by angle brackets ( ",(0,a.jsx)(n.code,{children:"<>"})," ), as\nshown in this example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var v:Vector.<String>;\nv = new Vector.<String>();\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In the first line of the example, the variable ",(0,a.jsx)(n.code,{children:"v"})," is declared as a\n",(0,a.jsx)(n.code,{children:"Vector.<String>"})," instance. In other words, it represents an indexed array that\ncan only hold String instances. The second line calls the ",(0,a.jsx)(n.code,{children:"Vector()"})," constructor\nto create an instance of the same Vector type (that is, a Vector whose elements\nare all String objects). It assigns that object to ",(0,a.jsx)(n.code,{children:"v"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"using-the-vectort-constructor",children:"Using the Vector.<T>() constructor"}),"\n",(0,a.jsxs)(n.p,{children:["If you use the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," constructor without any arguments, it creates an\nempty Vector instance. You can test that a Vector is empty by checking its\n",(0,a.jsx)(n.code,{children:"length"})," property. For example, the following code calls the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"}),"\nconstructor with no arguments:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var names:Vector.<String> = new Vector.<String>();\ntrace(names.length); // output: 0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you know ahead of time how many elements a Vector initially needs, you can\npre-define the number of elements in the Vector. To create a Vector with a\ncertain number of elements, pass the number of elements as the first parameter\n(the ",(0,a.jsx)(n.code,{children:"length"})," parameter). Because Vector elements can't be empty, the elements\nare filled with instances of the base type. If the base type is a reference type\nthat allows ",(0,a.jsx)(n.code,{children:"null"})," values, the elements all contain ",(0,a.jsx)(n.code,{children:"null"}),". Otherwise, the\nelements all contain the default value for the class. For example, a uint\nvariable can't be ",(0,a.jsx)(n.code,{children:"null"}),". Consequently, in the following code listing the Vector\nnamed ",(0,a.jsx)(n.code,{children:"ages"})," is created with seven elements, each containing the value 0:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var ages:Vector.<uint> = new Vector.<uint>(7);\ntrace(ages); // output: 0,0,0,0,0,0,0\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Finally, using the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," constructor you can also create a fixed-length\nVector by passing ",(0,a.jsx)(n.code,{children:"true"})," for the second parameter (the ",(0,a.jsx)(n.code,{children:"fixed"})," parameter). In\nthat case the Vector is created with the specified number of elements and the\nnumber of elements can't be changed. Note, however, that you can still change\nthe values of the elements of a fixed-length Vector."]}),"\n",(0,a.jsx)(n.h4,{id:"using-the-vector-literal-syntax-constructor",children:"Using the Vector literal syntax constructor"}),"\n",(0,a.jsxs)(n.p,{children:["In Flash Professional CS5 and later, Flash Builder 4 and later, and Flex 4 and\nlater, you can pass a list of values to the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," constructor to\nspecify the Vector's initial values:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// var v:Vector.<T> = new <T>[E0, ..., En-1 ,];\n// For example:\nvar v:Vector.<int> = new <int>[0,1,2,];\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following information applies to this syntax:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"The trailing comma is optional."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Empty items in the array are not supported; a statement such as\n",(0,a.jsx)(n.code,{children:"var v:Vector.<int> = new <int>[0,,2,]"})," throws a compiler error."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"You can't specify a default length for the Vector instance. Instead, the\nlength is the same as the number of elements in the initialization list."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["You can't specify whether the Vector instance has a fixed length. Instead, use\nthe ",(0,a.jsx)(n.code,{children:"fixed"})," property."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Data loss or errors can occur if items passed as values don't match the\nspecified type. For example:"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var v:Vector.<int> = new <int>[4.2]; // compiler error when running in strict mode\ntrace(v[0]); //returns 4 when not running in strict mode\n"})}),"\n",(0,a.jsx)(n.h4,{id:"using-the-vectort-global-function",children:"Using the Vector.<T>() global function"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," and Vector literal syntax constructors, you\ncan also use the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function to create a Vector object. The\n",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function is a conversion function. When you call the\n",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function you specify the base type of the Vector that the\nmethod returns. You pass a single indexed array (Array or Vector instance) as an\nargument. The method then returns a Vector with the specified base type,\ncontaining the values in the source array argument. The following code listing\nshows the syntax for calling the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var friends:Vector.<String> = Vector.<String>(["Bob", "Larry", "Sarah"]);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function performs data type conversion on two levels.\nFirst, when an Array instance is passed to the function, a Vector instance is\nreturned. Second, whether the source array is an Array or Vector instance the\nfunction attempts to convert the source array's elements to values of the base\ntype. The conversion uses standard ActionScript data type conversion rules. For\nexample, the following code listing converts the String values in the source\nArray to integers in the result Vector. The decimal portion of the first value (\n",(0,a.jsx)(n.code,{children:'"1.5"'})," ) is truncated, and the non-numeric third value ( ",(0,a.jsx)(n.code,{children:'"Waffles"'})," ) is\nconverted to 0 in the result:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var numbers:Vector.<int> = Vector.<int>(["1.5", "17", "Waffles"]);\ntrace(numbers); // output: 1,17,0\n'})}),"\n",(0,a.jsx)(n.p,{children:"If any of the source elements can't be converted, an error occurs."}),"\n",(0,a.jsxs)(n.p,{children:["When code calls the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global function, if an element in the source\narray is an instance of a subclass of the specified base type, the element is\nadded to the result Vector (no error occurs). Using the ",(0,a.jsx)(n.code,{children:"Vector.<T>()"})," global\nfunction is the only way to convert a Vector with base type ",(0,a.jsx)(n.code,{children:"T"})," to a Vector with\na base type that's a superclass of ",(0,a.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"inserting-array-elements",children:"Inserting array elements"}),"\n",(0,a.jsxs)(n.p,{children:["The most basic way to add an element to an indexed array is to use the array\naccess ( ",(0,a.jsx)(n.code,{children:"[]"})," ) operator. To set the value of an indexed array element, use the\nArray or Vector object name and index number on the left side of an assignment\nstatement:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'songTitles[5] = "Happy Birthday";\n'})}),"\n",(0,a.jsx)(n.p,{children:"If the Array or Vector doesn't already have an element at that index, the index\nis created and the value is stored there. If a value exists at that index, the\nnew value replaces the existing one."}),"\n",(0,a.jsxs)(n.p,{children:["An Array object allows you to create an element at any index. However, with a\nVector object you can only assign a value to an existing index or to the next\navailable index. The next available index corresponds to the Vector object's\n",(0,a.jsx)(n.code,{children:"length"})," property. The safest way to add a new element to a Vector object is to\nuse code like this listing:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"myVector[myVector.length] = valueToAdd;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Three of the Array and Vector class methods\u2014 ",(0,a.jsx)(n.code,{children:"push()"}),", ",(0,a.jsx)(n.code,{children:"unshift()"}),", and\n",(0,a.jsx)(n.code,{children:"splice()"})," \u2014allow you to insert elements into an indexed array. The ",(0,a.jsx)(n.code,{children:"push()"}),"\nmethod appends one or more elements to the end of an array. In other words, the\nlast element inserted into the array using the ",(0,a.jsx)(n.code,{children:"push()"})," method will have the\nhighest index number. The ",(0,a.jsx)(n.code,{children:"unshift()"})," method inserts one or more elements at the\nbeginning of an array, which is always at index number 0. The ",(0,a.jsx)(n.code,{children:"splice()"})," method\nwill insert any number of items at a specified index in the array."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example demonstrates all three methods. An array named ",(0,a.jsx)(n.code,{children:"planets"}),"\nis created to store the names of the planets in order of proximity to the Sun.\nFirst, the ",(0,a.jsx)(n.code,{children:"push()"})," method is called to add the initial item, ",(0,a.jsx)(n.code,{children:"Mars"}),". Second,\nthe ",(0,a.jsx)(n.code,{children:"unshift()"})," method is called to insert the item that belongs at the front of\nthe array, ",(0,a.jsx)(n.code,{children:"Mercury"}),". Finally, the ",(0,a.jsx)(n.code,{children:"splice()"})," method is called to insert the\nitems ",(0,a.jsx)(n.code,{children:"Venus"})," and ",(0,a.jsx)(n.code,{children:"Earth"})," after ",(0,a.jsx)(n.code,{children:"Mercury"}),", but before ",(0,a.jsx)(n.code,{children:"Mars"}),". The first argument\nsent to ",(0,a.jsx)(n.code,{children:"splice()"}),", the integer 1, directs the insertion to begin at index 1.\nThe second argument sent to ",(0,a.jsx)(n.code,{children:"splice()"}),", the integer 0, indicates that no items\nshould be deleted. Finally, the third and fourth arguments sent to ",(0,a.jsx)(n.code,{children:"splice()"}),",\n",(0,a.jsx)(n.code,{children:"Venus"})," and ",(0,a.jsx)(n.code,{children:"Earth"}),", are the items to be inserted."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var planets:Array = new Array();\nplanets.push("Mars"); // array contents: Mars\nplanets.unshift("Mercury"); // array contents: Mercury,Mars\nplanets.splice(1, 0, "Venus", "Earth");\ntrace(planets); // array contents: Mercury,Venus,Earth,Mars\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"push()"})," and ",(0,a.jsx)(n.code,{children:"unshift()"})," methods both return an unsigned integer that\nrepresents the length of the modified array. The ",(0,a.jsx)(n.code,{children:"splice()"})," method returns an\nempty array when used to insert elements, which may seem strange, but makes more\nsense in light of the ",(0,a.jsx)(n.code,{children:"splice()"})," method's versatility. You can use the\n",(0,a.jsx)(n.code,{children:"splice()"})," method not only to insert elements into an array, but also to remove\nelements from an array. When used to remove elements, the ",(0,a.jsx)(n.code,{children:"splice()"})," method\nreturns an array containing the elements removed."]}),"\n",(0,a.jsxs)(n.p,{children:["Note: If a Vector object's ",(0,a.jsx)(n.code,{children:"fixed"})," property is ",(0,a.jsx)(n.code,{children:"true"}),", the total number of\nelements in the Vector can't change. If you try to add a new element to a\nfixed-length Vector using the techniques described here, an error occurs."]}),"\n",(0,a.jsx)(n.h2,{id:"retrieving-values-and-removing-array-elements",children:"Retrieving values and removing array elements"}),"\n",(0,a.jsxs)(n.p,{children:["The simplest way to retrieve the value of an element from an indexed array is to\nuse the array access ( ",(0,a.jsx)(n.code,{children:"[]"})," ) operator. To retrieve the value of an indexed\narray element, use the Array or Vector object name and index number on the right\nside of an assignment statement:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var myFavoriteSong:String = songTitles[3];\n"})}),"\n",(0,a.jsx)(n.p,{children:"It's possible to attempt to retrieve a value from an Array or Vector using an\nindex where no element exists. In that case, an Array object returns the value\nundefined and a Vector throws a RangeError exception."}),"\n",(0,a.jsxs)(n.p,{children:["Three methods of the Array and Vector classes\u2014 ",(0,a.jsx)(n.code,{children:"pop()"}),", ",(0,a.jsx)(n.code,{children:"shift()"}),", and\n",(0,a.jsx)(n.code,{children:"splice()"})," \u2014allow you to remove elements. The ",(0,a.jsx)(n.code,{children:"pop()"})," method removes an element\nfrom the end of the array. In other words, it removes the element at the highest\nindex number. The ",(0,a.jsx)(n.code,{children:"shift()"})," method removes an element from the beginning of the\narray, which means that it always removes the element at index number 0. The\n",(0,a.jsx)(n.code,{children:"splice()"})," method, which can also be used to insert elements, removes an\narbitrary number of elements starting at the index number specified by the first\nargument sent to the method."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example uses all three methods to remove elements from an Array\ninstance. An Array named ",(0,a.jsx)(n.code,{children:"oceans"})," is created to store the names of large bodies\nof water. Some of the names in the Array are lakes rather than oceans, so they\nneed to be removed."]}),"\n",(0,a.jsxs)(n.p,{children:["First, the ",(0,a.jsx)(n.code,{children:"splice()"})," method is used to remove the items ",(0,a.jsx)(n.code,{children:"Aral"})," and ",(0,a.jsx)(n.code,{children:"Superior"}),",\nand insert the items ",(0,a.jsx)(n.code,{children:"Atlantic"})," and ",(0,a.jsx)(n.code,{children:"Indian"}),". The first argument sent to\n",(0,a.jsx)(n.code,{children:"splice()"}),", the integer 2, indicates that the operation should start with the\nthird item in the list, which is at index 2. The second argument, 2, indicates\nthat two items should be removed. The remaining arguments, ",(0,a.jsx)(n.code,{children:"Atlantic"})," and\n",(0,a.jsx)(n.code,{children:"Indian"}),", are values to be inserted at index 2."]}),"\n",(0,a.jsxs)(n.p,{children:["Second, the ",(0,a.jsx)(n.code,{children:"pop()"})," method is used to remove last element in the array, ",(0,a.jsx)(n.code,{children:"Huron"}),".\nAnd third, the ",(0,a.jsx)(n.code,{children:"shift()"})," method is used to remove the first item in the array,\n",(0,a.jsx)(n.code,{children:"Victoria"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var oceans:Array = ["Victoria", "Pacific", "Aral", "Superior", "Indian", "Huron"];\noceans.splice(2, 2, "Arctic", "Atlantic"); // replaces Aral and Superior\noceans.pop(); // removes Huron\noceans.shift(); // removes Victoria\ntrace(oceans);// output: Pacific,Arctic,Atlantic,Indian\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"pop()"})," and ",(0,a.jsx)(n.code,{children:"shift()"})," methods both return the item that was removed. For an\nArray instance, the data type of the return value is Object because arrays can\nhold values of any data type. For a Vector instance, the data type of the return\nvalue is the base type of the Vector. The ",(0,a.jsx)(n.code,{children:"splice()"})," method returns an Array or\nVector containing the values removed. You can change the ",(0,a.jsx)(n.code,{children:"oceans"})," Array example\nso that the call to ",(0,a.jsx)(n.code,{children:"splice()"})," assigns the returned Array to a new Array\nvariable, as shown in the following example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var lakes:Array = oceans.splice(2, 2, "Arctic", "Atlantic");\ntrace(lakes); // output: Aral,Superior\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You may come across code that uses the ",(0,a.jsx)(n.code,{children:"delete"})," operator on an Array object\nelement. The ",(0,a.jsx)(n.code,{children:"delete"})," operator sets the value of an Array element to\n",(0,a.jsx)(n.code,{children:"undefined"}),", but it does not remove the element from the Array. For example, the\nfollowing code uses the ",(0,a.jsx)(n.code,{children:"delete"})," operator on the third element in the ",(0,a.jsx)(n.code,{children:"oceans"}),"\nArray, but the length of the Array remains 5:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var oceans:Array = ["Arctic", "Pacific", "Victoria", "Indian", "Atlantic"];\ndelete oceans[2];\ntrace(oceans);// output: Arctic,Pacific,,Indian,Atlantic\ntrace(oceans[2]); // output: undefined\ntrace(oceans.length); // output: 5\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can truncate an Array or Vector using an array's ",(0,a.jsx)(n.code,{children:"length"})," property. If you\nset the ",(0,a.jsx)(n.code,{children:"length"})," property of an indexed array to a length that is less than the\ncurrent length of the array, the array is truncated, removing any elements\nstored at index numbers higher than the new value of ",(0,a.jsx)(n.code,{children:"length"})," minus 1. For\nexample, if the ",(0,a.jsx)(n.code,{children:"oceans"})," array were sorted such that all valid entries were at\nthe beginning of the array, you could use the ",(0,a.jsx)(n.code,{children:"length"})," property to remove the\nentries at the end of the array, as shown in the following code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var oceans:Array = ["Arctic", "Pacific", "Victoria", "Aral", "Superior"];\noceans.length = 2;\ntrace(oceans); // output: Arctic,Pacific\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Note: If a Vector object's ",(0,a.jsx)(n.code,{children:"fixed"})," property is ",(0,a.jsx)(n.code,{children:"true"}),", the total number of\nelements in the Vector can't change. If you try to remove an element from or\ntruncate a fixed-length Vector using the techniques described here, an error\noccurs."]}),"\n",(0,a.jsx)(n.h2,{id:"sorting-an-array",children:"Sorting an array"}),"\n",(0,a.jsxs)(n.p,{children:["There are three methods\u2014 ",(0,a.jsx)(n.code,{children:"reverse()"}),", ",(0,a.jsx)(n.code,{children:"sort()"}),", and ",(0,a.jsx)(n.code,{children:"sortOn()"})," \u2014that allow you\nto change the order of an indexed array, either by sorting or reversing the\norder. All of these methods modify the existing array. The following table\nsummarizes these methods and their behavior for Array and Vector objects:"]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Array behavior"}),(0,a.jsx)(n.th,{children:"Vector behavior"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"reverse()"})}),(0,a.jsx)(n.td,{children:"Changes the order of the elements so that the last element becomes the first element, the penultimate element becomes the second, and so on"}),(0,a.jsx)(n.td,{children:"Identical to Array behavior"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"sort()"})}),(0,a.jsx)(n.td,{children:"Allows you to sort the Array's elements in a variety of predefined ways, such as alphabetical or numeric order. You can also specify a custom sorting algorithm."}),(0,a.jsx)(n.td,{children:"Sorts the elements according to the custom sorting algorithm that you specify"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"sortOn()"})}),(0,a.jsx)(n.td,{children:"Allows you to sort objects that have one or more common properties, specifying the property or properties to use as the sort keys"}),(0,a.jsx)(n.td,{children:"Not available in the Vector class"})]})]})]}),"\n",(0,a.jsx)(n.h4,{id:"the-reverse-method",children:"The reverse() method"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"reverse()"})," method takes no parameters and does not return a value, but\nallows you to toggle the order of your array from its current state to the\nreverse order. The following example reverses the order of the oceans listed in\nthe ",(0,a.jsx)(n.code,{children:"oceans"})," array:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var oceans:Array = ["Arctic", "Atlantic", "Indian", "Pacific"];\noceans.reverse();\ntrace(oceans); // output: Pacific,Indian,Atlantic,Arctic\n'})}),"\n",(0,a.jsx)(n.h4,{id:"basic-sorting-with-the-sort-method-array-class-only",children:"Basic sorting with the sort() method (Array class only)"}),"\n",(0,a.jsxs)(n.p,{children:["For an Array instance, the ",(0,a.jsx)(n.code,{children:"sort()"})," method rearranges the elements in an array\nusing the ",(0,a.jsx)(n.em,{children:"default sort order"}),". The default sort order has the following\ncharacteristics:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"The sort is case-sensitive, which means that uppercase characters precede\nlowercase characters. For example, the letter D precedes the letter b."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"The sort is ascending, which means that lower character codes (such as A)\nprecede higher character codes (such as B)."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"The sort places identical values adjacent to each other but in no particular\norder."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The sort is string-based, which means that elements are converted to strings\nbefore they are compared (for example, 10 precedes 3 because the string ",(0,a.jsx)(n.code,{children:'"1"'}),"\nhas a lower character code than the string ",(0,a.jsx)(n.code,{children:'"3"'})," has)."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["You may find that you need to sort your Array without regard to case, or in\ndescending order, or perhaps your array contains numbers that you want to sort\nnumerically instead of alphabetically. The Array class's ",(0,a.jsx)(n.code,{children:"sort()"})," method has an\n",(0,a.jsx)(n.code,{children:"options"})," parameter that allows you to alter each characteristic of the default\nsort order. The options are defined by a set of static constants in the Array\nclass, as shown in the following list:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Array.CASEINSENSITIVE"})," : This option makes the sort disregard case. For\nexample, the lowercase letter b precedes the uppercase letter D."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Array.DESCENDING:"})," This reverses the default ascending sort. For example, the\nletter B precedes the letter A."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Array.UNIQUESORT:"})," This causes the sort to abort if two identical values are\nfound."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"Array.NUMERIC:"})," This causes numerical sorting, so that 3 precedes 10."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The following example highlights some of these options. An Array named ",(0,a.jsx)(n.code,{children:"poets"}),"\nis created that is sorted using several different options."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var poets:Array = ["Blake", "cummings", "Angelou", "Dante"];\npoets.sort(); // default sort\ntrace(poets); // output: Angelou,Blake,Dante,cummings\n\npoets.sort(Array.CASEINSENSITIVE);\ntrace(poets); // output: Angelou,Blake,cummings,Dante\n\npoets.sort(Array.DESCENDING);\ntrace(poets); // output: cummings,Dante,Blake,Angelou\n\npoets.sort(Array.DESCENDING | Array.CASEINSENSITIVE); // use two options\ntrace(poets); // output: Dante,cummings,Blake,Angelou\n'})}),"\n",(0,a.jsx)(n.h4,{id:"custom-sorting-with-the-sort-method-array-and-vector-classes",children:"Custom sorting with the sort() method (Array and Vector classes)"}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the basic sorting that's available for an Array object, you can\nalso define a custom sorting rule. This technique is the only form of the\n",(0,a.jsx)(n.code,{children:"sort()"})," method that is available for the Vector class. To define a custom sort,\nyou write a custom sort function and pass it as an argument to the ",(0,a.jsx)(n.code,{children:"sort()"}),"\nmethod."]}),"\n",(0,a.jsxs)(n.p,{children:["For example, if you have a list of names in which each list element contains a\nperson's full name, but you want to sort the list by last name, you must use a\ncustom sort function to parse each element and use the last name in the sort\nfunction. The following code shows how this can be done with a custom function\nthat is used as a parameter to the ",(0,a.jsx)(n.code,{children:"Array.sort()"})," method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var names:Array = new Array("John Q. Smith", "Jane Doe", "Mike Jones");\nfunction orderLastName(a, b):int\n{\n    var lastName:RegExp = /\\b\\S+$/;\n    var name1 = a.match(lastName);\n    var name2 = b.match(lastName);\n    if (name1 < name2)\n    {\n        return -1;\n    }\n    else if (name1 > name2)\n    {\n        return 1;\n    }\n    else\n    {\n        return 0;\n    }\n}\ntrace(names); // output: John Q. Smith,Jane Doe,Mike Jones\nnames.sort(orderLastName);\ntrace(names); // output: Jane Doe,Mike Jones,John Q. Smith\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The custom sort function ",(0,a.jsx)(n.code,{children:"orderLastName()"})," uses a regular expression to extract\nthe last name from each element to use for the comparison operation. The\nfunction identifier ",(0,a.jsx)(n.code,{children:"orderLastName"})," is used as the sole parameter when calling\nthe ",(0,a.jsx)(n.code,{children:"sort()"})," method on the ",(0,a.jsx)(n.code,{children:"names"})," array. The sort function accepts two\nparameters, ",(0,a.jsx)(n.code,{children:"a"})," and ",(0,a.jsx)(n.code,{children:"b"}),", because it works on two array elements at a time. The\nsort function's return value indicates how the elements should be sorted:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["A return value of -1 indicates that the first parameter, ",(0,a.jsx)(n.code,{children:"a"}),", precedes the\nsecond parameter, ",(0,a.jsx)(n.code,{children:"b"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["A return value of 1 indicates that the second parameter, ",(0,a.jsx)(n.code,{children:"b"}),", precedes the\nfirst, ",(0,a.jsx)(n.code,{children:"a"}),"."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"A return value of 0 indicates that the elements have equal sorting precedence."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"the-sorton-method-array-class-only",children:"The sortOn() method (Array class only)"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"sortOn()"})," method is designed for Array objects with elements that contain\nobjects. These objects are expected to have at least one common property that\ncan be used as the sort key. The use of the ",(0,a.jsx)(n.code,{children:"sortOn()"})," method for arrays of any\nother type yields unexpected results."]}),"\n",(0,a.jsxs)(n.p,{children:["Note: The Vector class does not include a ",(0,a.jsx)(n.code,{children:"sortOn()"})," method. This method is only\navailable for Array objects."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example revises the ",(0,a.jsx)(n.code,{children:"poets"})," Array so that each element is an\nobject instead of a string. Each object holds both the poet's last name and year\nof birth."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var poets:Array = new Array();\npoets.push({name:"Angelou", born:"1928"});\npoets.push({name:"Blake", born:"1757"});\npoets.push({name:"cummings", born:"1894"});\npoets.push({name:"Dante", born:"1265"});\npoets.push({name:"Wang", born:"701"});\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"sortOn()"})," method to sort the Array by the ",(0,a.jsx)(n.code,{children:"born"})," property. The\n",(0,a.jsx)(n.code,{children:"sortOn()"})," method defines two parameters, ",(0,a.jsx)(n.code,{children:"fieldName"})," and ",(0,a.jsx)(n.code,{children:"options"}),". The\n",(0,a.jsx)(n.code,{children:"fieldName"})," argument must be specified as a string. In the following example,\n",(0,a.jsx)(n.code,{children:"sortOn()"}),' is called with two arguments, " ',(0,a.jsx)(n.code,{children:'born"'})," and ",(0,a.jsx)(n.code,{children:"Array.NUMERIC"}),". The\n",(0,a.jsx)(n.code,{children:"Array.NUMERIC"})," argument is used to ensure that the sort is done numerically\ninstead of alphabetically. This is a good practice even when all the numbers\nhave the same number of digits because it ensures that the sort will continue to\nbehave as expected if a number with fewer or more digits is later added to the\narray."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'poets.sortOn("born", Array.NUMERIC);\nfor (var i:int = 0; i < poets.length; ++i)\n{\n    trace(poets[i].name, poets[i].born);\n}\n/* output:\nWang 701\nDante 1265\nBlake 1757\ncummings 1894\nAngelou 1928\n*/\n'})}),"\n",(0,a.jsx)(n.h4,{id:"sorting-without-modifying-the-original-array-array-class-only",children:"Sorting without modifying the original array (Array class only)"}),"\n",(0,a.jsxs)(n.p,{children:["Generally, the ",(0,a.jsx)(n.code,{children:"sort()"})," and ",(0,a.jsx)(n.code,{children:"sortOn()"})," methods modify an Array. If you wish to\nsort an Array without modifying the existing array, pass the\n",(0,a.jsx)(n.code,{children:"Array.RETURNINDEXEDARRAY"})," constant as part of the ",(0,a.jsx)(n.code,{children:"options"})," parameter. This\noption directs the methods to return a new Array that reflects the sort and to\nleave the original Array unmodified. The Array returned by the methods is a\nsimple Array of index numbers that reflects the new sort order and does not\ncontain any elements from the original Array. For example, to sort the ",(0,a.jsx)(n.code,{children:"poets"}),"\nArray by birth year without modifying the Array, include the\n",(0,a.jsx)(n.code,{children:"Array.RETURNINDEXEDARRAY"})," constant as part of the argument passed for the\n",(0,a.jsx)(n.code,{children:"options"})," parameter."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example stores the returned index information in an Array named\n",(0,a.jsx)(n.code,{children:"indices"})," and uses the ",(0,a.jsx)(n.code,{children:"indices"})," array in conjunction with the unmodified\n",(0,a.jsx)(n.code,{children:"poets"})," array to output the poets in order of birth year:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var indices:Array;\nindices = poets.sortOn("born", Array.NUMERIC | Array.RETURNINDEXEDARRAY);\nfor (var i:int = 0; i < indices.length; ++i)\n{\n    var index:int = indices[i];\n    trace(poets[index].name, poets[index].born);\n}\n/* output:\nWang 701\nDante 1265\nBlake 1757\ncummings 1894\nAngelou 1928\n*/\n'})}),"\n",(0,a.jsx)(n.h2,{id:"querying-an-array",children:"Querying an array"}),"\n",(0,a.jsxs)(n.p,{children:["Four methods of the Array and Vector classes\u2014 ",(0,a.jsx)(n.code,{children:"concat()"}),", ",(0,a.jsx)(n.code,{children:"join()"}),", ",(0,a.jsx)(n.code,{children:"slice()"}),",\nand ",(0,a.jsx)(n.code,{children:"toString()"})," \u2014all query the array for information, but do not modify the\narray. The ",(0,a.jsx)(n.code,{children:"concat()"})," and ",(0,a.jsx)(n.code,{children:"slice()"})," methods both return new arrays, while the\n",(0,a.jsx)(n.code,{children:"join()"})," and ",(0,a.jsx)(n.code,{children:"toString()"})," methods both return strings. The ",(0,a.jsx)(n.code,{children:"concat()"})," method\ntakes a new array or list of elements as arguments and combines it with the\nexisting array to create a new array. The ",(0,a.jsx)(n.code,{children:"slice()"})," method has two parameters,\naptly named ",(0,a.jsx)(n.code,{children:"startIndex"})," and an ",(0,a.jsx)(n.code,{children:"endIndex"}),', and returns a new array containing a\ncopy of the elements "sliced" from the existing array. The slice begins with the\nelement at ',(0,a.jsx)(n.code,{children:"startIndex"})," and ends with the element just before ",(0,a.jsx)(n.code,{children:"endIndex"}),". That\nbears repeating: the element at ",(0,a.jsx)(n.code,{children:"endIndex"})," is not included in the return value."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example uses ",(0,a.jsx)(n.code,{children:"concat()"})," and ",(0,a.jsx)(n.code,{children:"slice()"})," to create new arrays using\nelements of other arrays:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var array1:Array = ["alpha", "beta"];\nvar array2:Array = array1.concat("gamma", "delta");\ntrace(array2); // output: alpha,beta,gamma,delta\n\nvar array3:Array = array1.concat(array2);\ntrace(array3); // output: alpha,beta,alpha,beta,gamma,delta\n\nvar array4:Array = array3.slice(2,5);\ntrace(array4); // output: alpha,beta,gamma\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can use the ",(0,a.jsx)(n.code,{children:"join()"})," and ",(0,a.jsx)(n.code,{children:"toString()"})," methods to query the array and return\nits contents as a string. If no parameters are used for the ",(0,a.jsx)(n.code,{children:"join()"})," method, the\ntwo methods behave identically\u2014they return a string containing a comma-delimited\nlist of all elements in the array. The ",(0,a.jsx)(n.code,{children:"join()"})," method, unlike the ",(0,a.jsx)(n.code,{children:"toString()"}),"\nmethod, accepts a parameter named ",(0,a.jsx)(n.code,{children:"delimiter"}),", which allows you to choose the\nsymbol to use as a separator between each element in the returned string."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example creates an Array called ",(0,a.jsx)(n.code,{children:"rivers"})," and calls both ",(0,a.jsx)(n.code,{children:"join()"}),"\nand ",(0,a.jsx)(n.code,{children:"toString()"})," to return the values in the Array as a string. The ",(0,a.jsx)(n.code,{children:"toString()"}),"\nmethod is used to return comma-separated values ( ",(0,a.jsx)(n.code,{children:"riverCSV"})," ), while the\n",(0,a.jsx)(n.code,{children:"join()"})," method is used to return values separated by the ",(0,a.jsx)(n.code,{children:"+"})," character."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var rivers:Array = ["Nile", "Amazon", "Yangtze", "Mississippi"];\nvar riverCSV:String = rivers.toString();\ntrace(riverCSV); // output: Nile,Amazon,Yangtze,Mississippi\nvar riverPSV:String = rivers.join("+");\ntrace(riverPSV); // output: Nile+Amazon+Yangtze+Mississippi\n'})}),"\n",(0,a.jsxs)(n.p,{children:["One issue to be aware of with the ",(0,a.jsx)(n.code,{children:"join()"})," method is that any nested Array or\nVector instances are always returned with comma-separated values, no matter what\nseparator you specify for the main array elements, as the following example\nshows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'var nested:Array = ["b","c","d"];\nvar letters:Array = ["a",nested,"e"];\nvar joined:String = letters.join("+");\ntrace(joined); // output: a+b,c,d+e\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);