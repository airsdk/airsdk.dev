"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[83005],{8635:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"development/client-system-interaction/client-system-environment/capabilities-example-detecting-system-capabilities","title":"Capabilities example: Detecting system capabilities","description":"The CapabilitiesExplorer example demonstrates how you can use the","source":"@site/docs/development/client-system-interaction/client-system-environment/capabilities-example-detecting-system-capabilities.md","sourceDirName":"development/client-system-interaction/client-system-environment","slug":"/development/client-system-interaction/client-system-environment/capabilities-example-detecting-system-capabilities","permalink":"/docs/development/client-system-interaction/client-system-environment/capabilities-example-detecting-system-capabilities","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/client-system-environment/capabilities-example-detecting-system-capabilities.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"Using the Capabilities class","permalink":"/docs/development/client-system-interaction/client-system-environment/using-the-capabilities-class"},"next":{"title":"AIR application invocation and termination","permalink":"/docs/development/client-system-interaction/air-application-invokation-and-termination"}}');var n=t(74848),r=t(28453);const s={sidebar_position:4},l="Capabilities example: Detecting system capabilities",o={},c=[{value:"CapabilitiesExplorer overview",id:"capabilitiesexplorer-overview",level:2},{value:"CapabilitiesGrabber class overview",id:"capabilitiesgrabber-class-overview",level:2},{value:"Communicating with JavaScript",id:"communicating-with-javascript",level:2}];function h(e){const i={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.header,{children:(0,n.jsx)(i.h1,{id:"capabilities-example-detecting-system-capabilities",children:"Capabilities example: Detecting system capabilities"})}),"\n",(0,n.jsx)(i.p,{children:"The CapabilitiesExplorer example demonstrates how you can use the\nflash.system.Capabilities class to determine which features the user's version\nof the Flash runtime supports. This example teaches the following techniques:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Detecting which capabilities the user's version of the Flash runtime supports\nusing the Capabilities class"}),"\n"]}),"\n",(0,n.jsxs)(i.li,{children:["\n",(0,n.jsx)(i.p,{children:"Using the ExternalInterface class to detect which browser settings the user's\nbrowser supports"}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["To get the application files for this sample, see\n",(0,n.jsx)(i.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,n.jsx)(i.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe CapabilitiesExplorer application files can be found in the folder\nSamples/CapabilitiesExplorer. This application consists of the following files:"]}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{children:(0,n.jsx)("p",{children:"File"})}),(0,n.jsx)("th",{children:(0,n.jsx)("p",{children:"Description"})})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsxs)("td",{children:[(0,n.jsx)("p",{children:"CapabilitiesExplorer.fla"}),(0,n.jsx)("p",{children:"or"}),(0,n.jsx)("p",{children:"CapabilitiesExplorer.mxml"})]}),(0,n.jsx)("td",{children:(0,n.jsx)("p",{children:"The main application file in Flash (FLA) or Flex (MXML)."})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("p",{children:"com/example/programmingas3/capabilities/CapabilitiesGrabber.as"})}),(0,n.jsx)("td",{children:(0,n.jsx)("p",{children:(0,n.jsx)(i.p,{children:"The class that provides the main functionality of the application,\nincluding adding the system Capabilities to an array, sorting the\nitems, and using the ExternalInterface class to retrieve browser\ncapabilities."})})})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("p",{children:"capabilities.html"})}),(0,n.jsx)("td",{children:(0,n.jsx)("p",{children:(0,n.jsx)(i.p,{children:"An HTML container that contains the necessary JavaScript to\ncommunicate with the external API."})})})]})]})]}),"\n",(0,n.jsx)(i.h2,{id:"capabilitiesexplorer-overview",children:"CapabilitiesExplorer overview"}),"\n",(0,n.jsx)(i.p,{children:"The CapabilitiesExplorer.mxml file is responsible for setting up the user\ninterface for the CapabilitiesExplorer application. The capabilities of the\nuser's version of the Flash runtime will be displayed within a DataGrid\ncomponent instance on the Stage. Their browser capabilities will also be\ndisplayed if they are running the application from an HTML container and if the\nexternal API is available."}),"\n",(0,n.jsxs)(i.p,{children:["When the main application file's ",(0,n.jsx)(i.code,{children:"creationComplete"})," event is dispatched, the\n",(0,n.jsx)(i.code,{children:"initApp()"})," method is invoked. The ",(0,n.jsx)(i.code,{children:"initApp()"})," method calls the\n",(0,n.jsx)(i.code,{children:"getCapabilities()"})," method from within the\ncom.example.programmingas3.capabilities.CapabilitiesGrabber class. The code for\nthe ",(0,n.jsx)(i.code,{children:"initApp()"})," method is as follows:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:"private function initApp():void\n{\n    var dp:Array = CapabilitiesGrabber.getCapabilities();\n    capabilitiesGrid.dataProvider = dp;\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"CapabilitiesGrabber.getCapabilities()"})," method returns a sorted array of the\nFlash runtime and browser capabilities, which then gets set to the\n",(0,n.jsx)(i.code,{children:"dataProvider"})," property of the ",(0,n.jsx)(i.code,{children:"capabilitiesGrid"})," DataGrid component instance on\nthe Stage."]}),"\n",(0,n.jsx)(i.h2,{id:"capabilitiesgrabber-class-overview",children:"CapabilitiesGrabber class overview"}),"\n",(0,n.jsxs)(i.p,{children:["The static ",(0,n.jsx)(i.code,{children:"getCapabilities()"})," method of the CapabilitiesGrabber class adds each\nproperty from the flash.system.Capabilities class to an array ( ",(0,n.jsx)(i.code,{children:"capDP"}),"). It\nthen calls the static ",(0,n.jsx)(i.code,{children:"getBrowserObjects()"})," method in the CapabilitiesGrabber\nclass. The ",(0,n.jsx)(i.code,{children:"getBrowserObjects()"})," method uses the external API to loop over the\nbrowser's navigator object, which contains the browser's capabilities. The\n",(0,n.jsx)(i.code,{children:"getCapabilities()"})," method is as follows:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:'public static function getCapabilities():Array\n{\n    var capDP:Array = new Array();\n    capDP.push({name:"Capabilities.avHardwareDisable", value:Capabilities.avHardwareDisable});\n    capDP.push({name:"Capabilities.hasAccessibility", value:Capabilities.hasAccessibility});\n    capDP.push({name:"Capabilities.hasAudio", value:Capabilities.hasAudio});\n    ...\n    capDP.push({name:"Capabilities.version", value:Capabilities.version});\n    var navArr:Array = CapabilitiesGrabber.getBrowserObjects();\n    if (navArr.length > 0)\n    {\n        capDP = capDP.concat(navArr);\n    }\n    capDP.sortOn("name", Array.CASEINSENSITIVE);\n    return capDP;\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["The ",(0,n.jsx)(i.code,{children:"getBrowserObjects()"})," method returns an array of each of the properties in\nthe browser's navigator object. If this array has a length of one or more items,\nthe array of browser capabilities ( ",(0,n.jsx)(i.code,{children:"navArr"}),") is appended to the array of Flash\nPlayer capabilities ( ",(0,n.jsx)(i.code,{children:"capDP"}),"), and the entire array is sorted alphabetically.\nFinally, the sorted array is returned to the main application file, which then\npopulates the data grid. The code for the ",(0,n.jsx)(i.code,{children:"getBrowserObjects()"})," method is as\nfollows:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:'private static function getBrowserObjects():Array\n{\n    var itemArr:Array = new Array();\n    var itemVars:URLVariables;\n    if (ExternalInterface.available)\n    {\n        try\n        {\n            var tempStr:String = ExternalInterface.call("JS_getBrowserObjects");\n            itemVars = new URLVariables(tempStr);\n            for (var i:String in itemVars)\n            {\n                itemArr.push({name:i, value:itemVars[i]});\n            }\n        }\n        catch (error:SecurityError)\n        {\n            // ignore\n        }\n    }\n    return itemArr;\n}\n'})}),"\n",(0,n.jsxs)(i.p,{children:["If the external API is available in the current user environment, the Flash\nruntime calls the JavaScript ",(0,n.jsx)(i.code,{children:"JS_getBrowserObjects()"})," method, which loops over\nthe browser's navigator object and returns a string of URL-encoded values to\nActionScript. This string is then converted into a URLVariables object (\n",(0,n.jsx)(i.code,{children:"itemVars"}),") and added to the ",(0,n.jsx)(i.code,{children:"itemArr"})," array, which is returned to the calling\nscript."]}),"\n",(0,n.jsx)(i.h2,{id:"communicating-with-javascript",children:"Communicating with JavaScript"}),"\n",(0,n.jsxs)(i.p,{children:["The final piece in building the CapabilitiesExplorer application is writing the\nnecessary JavaScript to loop over each of the items in the browser's navigator\nobject and append a name-value pair to a temporary array. The code for the\nJavaScript ",(0,n.jsx)(i.code,{children:"JS_getBrowserObjects()"})," method in the container.html file is as\nfollows:"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{children:'<script language="JavaScript">\n    function JS_getBrowserObjects()\n    {\n        // Create an array to hold each of the browser\'s items.\n        var tempArr = new Array();\n\n        // Loop over each item in the browser\'s navigator object.\n        for (var name in navigator)\n        {\n            var value = navigator[name];\n\n            // If the current value is a string or Boolean object, add it to the\n            // array, otherwise ignore the item.\n            switch (typeof(value))\n            {\n                case "string":\n                case "boolean":\n\n                    // Create a temporary string which will be added to the array.\n                    // Make sure that we URL-encode the values using JavaScript\'s\n                    // escape() function.\n                    var tempStr = "navigator." + name + "=" + escape(value);\n                    // Push the URL-encoded name/value pair onto the array.\n                    tempArr.push(tempStr);\n                    break;\n            }\n        }\n        // Loop over each item in the browser\'s screen object.\n        for (var name in screen)\n        {\n            var value = screen[name];\n\n            // If the current value is a number, add it to the array, otherwise\n            // ignore the item.\n            switch (typeof(value))\n            {\n                case "number":\n                    var tempStr = "screen." + name + "=" + escape(value);\n                    tempArr.push(tempStr);\n                    break;\n            }\n        }\n        // Return the array as a URL-encoded string of name-value pairs.\n        return tempArr.join("&");\n    }\n<\/script>\n'})}),"\n",(0,n.jsxs)(i.p,{children:["The code begins by creating a temporary array that will hold all the name-value\npairs in the navigator object. Next, the navigator object is looped over using a\n",(0,n.jsx)(i.code,{children:"for..in"})," loop, and the data type of the current value is evaluated to filter\nout unwanted values. In this application, we are interested only in String or\nBoolean values, and other data types (such as functions or arrays) are ignored.\nEach String or Boolean value in the navigator object is appended to the\n",(0,n.jsx)(i.code,{children:"tempArr"})," array. Next, the browser's screen object is looped over using a\n",(0,n.jsx)(i.code,{children:"for..in"})," loop, and each numeric value is added to the ",(0,n.jsx)(i.code,{children:"tempArr"})," array. Finally,\nthe temporary array is converted into a string using the ",(0,n.jsx)(i.code,{children:"Array.join()"})," method.\nThe array uses an ampersand (&) as a delimiter, which allows ActionScript to\neasily parse the data using the URLVariables class."]})]})}function p(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>l});var a=t(96540);const n={},r=a.createContext(n);function s(e){const i=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(r.Provider,{value:i},e.children)}}}]);