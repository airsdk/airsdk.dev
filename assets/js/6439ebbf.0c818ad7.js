"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[78532],{546:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>h,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/display/using-the-drawing-api/using-graphics-data-classes","title":"Using graphics data classes","description":"The enhanced drawing API includes a set of classes in the flash.display package","source":"@site/docs/development/display/using-the-drawing-api/using-graphics-data-classes.md","sourceDirName":"development/display/using-the-drawing-api","slug":"/development/display/using-the-drawing-api/using-graphics-data-classes","permalink":"/docs/development/display/using-the-drawing-api/using-graphics-data-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/using-graphics-data-classes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Drawing Paths","permalink":"/docs/development/display/using-the-drawing-api/drawing-paths"},"next":{"title":"Working with bitmaps","permalink":"/docs/development/display/working-with-bitmaps/"}}');var r=s(74848),n=s(28453);const t={},h="Using graphics data classes",c={},d=[{value:"Drawing with vector graphics data",id:"drawing-with-vector-graphics-data",level:2},{value:"Reading vector graphics data",id:"reading-vector-graphics-data",level:2}];function l(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"using-graphics-data-classes",children:"Using graphics data classes"})}),"\n",(0,r.jsxs)(a.p,{children:["The enhanced drawing API includes a set of classes in the flash.display package\nthat implement the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/IGraphicsData.html",children:"IGraphicsData"}),"\ninterface. These classes act as value objects (data containers) that represent\nthe drawing methods of the drawing API."]}),"\n",(0,r.jsx)(a.p,{children:"The following classes implement the IGraphicsData interface:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsBitmapFill.html",children:"GraphicsBitmapFill"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsEndFill.html",children:"GraphicsEndFill"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsGradientFill.html",children:"GraphicsGradientFill"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsPath.html",children:"GraphicsPath"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsShaderFill.html",children:"GraphicsShaderFill"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsSolidFill.html",children:"GraphicsSolidFill"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsStroke.html",children:"GraphicsStroke"})}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsTrianglePath.html",children:"GraphicsTrianglePath"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"With these classes, you can store a complete drawing in a Vector object of\nIGraphicsData type (Vector.<IGraphicsData>). You can then reuse the graphics\ndata as the data source for other shape instances or to store drawing\ninformation for later use."}),"\n",(0,r.jsx)(a.p,{children:"Notice you have multiple fill classes for each style of fill, but only one\nstroke class. ActionScript has only one stroke IGraphicsData class because the\nstroke class uses the fill classes to define its style. So every stroke is\nactually defined by a combination of the stroke class and a fill class.\nOtherwise, the API for these graphics data classes mirror the methods they\nrepresent in the flash.display.Graphics class:"}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)("p",{children:"Graphics Method"})}),(0,r.jsx)("th",{children:(0,r.jsx)("p",{children:"Corresponding Class"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"beginBitmapFill()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsBitmapFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"beginFill()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsSolidFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"beginGradientFill()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsGradientFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"beginShaderFill()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsShaderFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"lineBitmapStyle()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsStroke + GraphicsBitmapFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"lineGradientStyle()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsStroke + GraphicsGradientFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"lineShaderStyle()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsStroke + GraphicsShaderFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"lineStyle()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsStroke + GraphicsSolidFill"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsxs)("td",{children:[(0,r.jsx)("p",{children:"moveTo()"}),"\n",(0,r.jsx)("p",{children:"lineTo()"}),"\n",(0,r.jsx)("p",{children:"curveTo()"}),"\n",(0,r.jsx)("p",{children:"drawPath()"})]}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsPath"})})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"drawTriangles()"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"GraphicsTrianglePath"})})]})]})]}),"\n",(0,r.jsxs)(a.p,{children:["In addition, the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsPath.html",children:"GraphicsPath"}),"\nclass has its own ",(0,r.jsx)(a.code,{children:"GraphicsPath.moveTo()"}),", ",(0,r.jsx)(a.code,{children:"GraphicsPath.lineTo()"}),",\n",(0,r.jsx)(a.code,{children:"GraphicsPath.curveTo()"}),", ",(0,r.jsx)(a.code,{children:"GraphicsPath.wideLineTo()"}),", and\n",(0,r.jsx)(a.code,{children:"GraphicsPath.wideMoveTo()"})," utility methods to easily define those commands for\na GraphicsPath instance. These utility methods simplify the task of defining or\nupdating the commands and data values directly."]}),"\n",(0,r.jsx)(a.h2,{id:"drawing-with-vector-graphics-data",children:"Drawing with vector graphics data"}),"\n",(0,r.jsxs)(a.p,{children:["Once you have a collection of IGraphicsData instances, use the Graphics class's\n",(0,r.jsx)(a.code,{children:"drawGraphicsData()"})," method to render the graphics. The ",(0,r.jsx)(a.code,{children:"drawGraphicsData()"}),"\nmethod carries out a set of drawing instructions from a vector of IGraphicsData\ninstances in sequential order:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"// stroke object\nvar stroke:GraphicsStroke = new GraphicsStroke(3);\nstroke.joints = JointStyle.MITER;\nstroke.fill = new GraphicsSolidFill(0x102020);// solid stroke\n\n// fill object\nvar fill:GraphicsGradientFill = new GraphicsGradientFill();\nfill.colors = [0x0000FF, 0xEEFFEE];\nfill.matrix = new Matrix();\nfill.matrix.createGradientBox(70, 70, Math.PI/2);\n// path object\nvar path:GraphicsPath = new GraphicsPath(new Vector.<int>(), new Vector.<Number>());\npath.commands.push(GraphicsPathCommand.MOVE_TO, GraphicsPathCommand.LINE_TO, GraphicsPathCommand.LINE_TO);\npath.data.push(125,0, 50,100, 175,0);\n\n// combine objects for complete drawing\nvar drawing:Vector.<IGraphicsData> = new Vector.<IGraphicsData>();\ndrawing.push(stroke, fill, path);\n\n// draw the drawing\ngraphics.drawGraphicsData(drawing);\n"})}),"\n",(0,r.jsx)(a.p,{children:"By modifying one value in the path used by the drawing in the example, the shape\ncan be redrawn multiple times for a more complex image:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"// draw the drawing multiple times\n// change one value to modify each variation\ngraphics.drawGraphicsData(drawing);\npath.data[2] += 200;\ngraphics.drawGraphicsData(drawing);\npath.data[2] -= 150;\ngraphics.drawGraphicsData(drawing);\npath.data[2] += 100;\ngraphics.drawGraphicsData(drawing);\npath.data[2] -= 50;graphicsS.drawGraphicsData(drawing);\n"})}),"\n",(0,r.jsx)(a.p,{children:"Though IGraphicsData objects can define fill and stroke styles, the fill and\nstroke styles are not a requirement. In other words, Graphics class methods can\nbe used to set styles while IGraphicsData objects can be used to draw a saved\ncollection of paths, or vice-versa."}),"\n",(0,r.jsxs)(a.p,{children:["Note: Use the ",(0,r.jsx)(a.code,{children:"Graphics.clear()"})," method to clear out a previous drawing before\nstarting a new one; unless you're adding on to the original drawing, as seen in\nthe example above. As you change a single portion of a path or collection of\nIGraphicsData objects, redraw the entire drawing to see the changes."]}),"\n",(0,r.jsxs)(a.p,{children:["When using graphics data classes, the fill is rendered whenever three or more\npoints are drawn, because the shape is inherently closed at that point. Even\nthough the fill closes, the stroke does not, and this behavior is different than\nwhen using multiple ",(0,r.jsx)(a.code,{children:"Graphics.lineTo()"})," or ",(0,r.jsx)(a.code,{children:"Graphics.moveTo()"})," commands."]}),"\n",(0,r.jsx)(a.h2,{id:"reading-vector-graphics-data",children:"Reading vector graphics data"}),"\n",(0,r.jsxs)(a.p,{children:["In addition to drawing vector content to a display object, in Flash Player 11.6\nand Adobe AIR 3.6 and later you can use the Graphics class's\n",(0,r.jsx)(a.code,{children:"readGraphicsData()"})," method to obtain a data representation of the vector\ngraphics content of a display object. This can be used to create a snapshot of a\ngraphic to save, copy, create a spritesheet at run time, and more."]}),"\n",(0,r.jsxs)(a.p,{children:["Calling the ",(0,r.jsx)(a.code,{children:"readGraphicsData()"})," method returns a Vector instance containing\nIGraphicsData objects. These are the same objects used to draw vector graphics\nwith the ",(0,r.jsx)(a.code,{children:"drawGraphicsData()"})," method."]}),"\n",(0,r.jsxs)(a.p,{children:["There are several limitations to reading vector graphics with the\n",(0,r.jsx)(a.code,{children:"readGraphicsData()"})," method. For more information, see the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/Graphics.html#readGraphicsData()",children:"readGraphicsData()"}),"\nentry in the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/index.html",children:"ActionScript 3.0 Language Reference"}),"."]})]})}function o(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>t,x:()=>h});var i=s(96540);const r={},n=i.createContext(r);function t(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function h(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(n.Provider,{value:a},e.children)}}}]);