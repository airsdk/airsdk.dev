"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[24014],{28453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var a=n(96540);const r={},i=a.createContext(r);function o(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),a.createElement(i.Provider,{value:e},t.children)}},81119:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database","title":"Creating and modifying a database","description":"Before your application can add or retrieve data, there must be a database with","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"About local SQL databases","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/about-local-sql-databases"},"next":{"title":"Manipulating SQL database data","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/manipulating-sql-database-data"}}');var r=n(74848),i=n(28453);const o={sidebar_position:2},s="Creating and modifying a database",c={},d=[{value:"Creating a database",id:"creating-a-database",level:2},{value:"Creating database tables",id:"creating-database-tables",level:2}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"creating-and-modifying-a-database",children:"Creating and modifying a database"})}),"\n",(0,r.jsx)(e.p,{children:"Before your application can add or retrieve data, there must be a database with\ntables defined in it that your application can access. Described here are the\ntasks of creating a database and creating the data structure within a database.\nWhile these tasks are less frequently used than data insertion and retrieval,\nthey are necessary for most applications."}),"\n",(0,r.jsx)(e.h2,{id:"creating-a-database",children:"Creating a database"}),"\n",(0,r.jsxs)(e.p,{children:["To create a database file, you first create a\n",(0,r.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance. You call its ",(0,r.jsx)(e.code,{children:"open()"})," method to open it in synchronous execution mode,\nor its ",(0,r.jsx)(e.code,{children:"openAsync()"})," method to open it in asynchronous execution mode. The\n",(0,r.jsx)(e.code,{children:"open()"})," and ",(0,r.jsx)(e.code,{children:"openAsync()"})," methods are used to open a connection to a database.\nIf you pass a File instance that refers to a non-existent file location for the\n",(0,r.jsx)(e.code,{children:"reference"})," parameter (the first parameter), the ",(0,r.jsx)(e.code,{children:"open()"})," or ",(0,r.jsx)(e.code,{children:"openAsync()"}),"\nmethod creates a database file at that file location and open a connection to\nthe newly created database."]}),"\n",(0,r.jsxs)(e.p,{children:["Whether you call the ",(0,r.jsx)(e.code,{children:"open()"})," method or the ",(0,r.jsx)(e.code,{children:"openAsync()"})," method to create a\ndatabase, the database file's name can be any valid filename, with any filename\nextension. If you call the ",(0,r.jsx)(e.code,{children:"open()"})," or ",(0,r.jsx)(e.code,{children:"openAsync()"})," method with ",(0,r.jsx)(e.code,{children:"null"})," for the\n",(0,r.jsx)(e.code,{children:"reference"})," parameter, a new in-memory database is created rather than a\ndatabase file on disk."]}),"\n",(0,r.jsxs)(e.p,{children:["The following code listing shows the process of creating a database file (a new\ndatabase) using asynchronous execution mode. In this case, the database file is\nsaved in the\n",(0,r.jsx)(e.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#pointing-to-the-application-storage-directory",children:"Pointing to the application storage directory"}),',\nwith the filename "DBSample.db":']}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\nconn.addEventListener(SQLEvent.OPEN, openHandler);\nconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\nconn.openAsync(dbFile);\n\nfunction openHandler(event:SQLEvent):void\n{\n\ttrace("the database was created successfully");\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n\ttrace("Error message:", event.error.message);\n\ttrace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\t\t\timport flash.filesystem.File;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar conn:SQLConnection = new SQLConnection();\n\n\t\t\t\tconn.addEventListener(SQLEvent.OPEN, openHandler);\n\t\t\t\tconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n\t\t\t\t// The database file is in the application storage directory\n\t\t\t\tvar folder:File = File.applicationStorageDirectory;\n\t\t\t\tvar dbFile:File = folder.resolvePath("DBSample.db");\n\n\t\t\t\tconn.openAsync(dbFile);\n\t\t\t}\n\n\t\t\tprivate function openHandler(event:SQLEvent):void\n\t\t\t{\n\t\t\t\ttrace("the database was created successfully");\n\t\t\t}\n\n\t\t\tprivate function errorHandler(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\ttrace("Error message:", event.error.message);\n\t\t\t\ttrace("Details:", event.error.details);\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsxs)(e.p,{children:["Note: Although the File class lets you point to a specific native file path,\ndoing so can lead to applications that will not work across platforms. For\nexample, the path C:\\Documents and Settings\\joe\\test.db only works on Windows.\nFor these reasons, it is best to use the static properties of the\n",(0,r.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/filesystem/File.html",children:"File class"}),"\nsuch as ",(0,r.jsx)(e.code,{children:"File.applicationStorageDirectory"}),", as well as the ",(0,r.jsx)(e.code,{children:"resolvePath()"}),"\nmethod (as shown in the previous example). For more information, see\n",(0,r.jsx)(e.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#paths-of-file-objects",children:"Paths of File objects"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["To execute operations synchronously, when you open a database connection with\nthe SQLConnection instance, call the ",(0,r.jsx)(e.code,{children:"open()"})," method. The following example\nshows how to create and open a SQLConnection instance that executes its\noperations synchronously:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.errors.SQLError;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\ntry\n{\n\tconn.open(dbFile);\n\ttrace("the database was created successfully");\n}\ncatch (error:SQLError)\n{\n\ttrace("Error message:", error.message);\n\ttrace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.errors.SQLError;\n\t\t\timport flash.filesystem.File;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar conn:SQLConnection = new SQLConnection();\n\n\t\t\t\t// The database file is in the application storage directory\n\t\t\t\tvar folder:File = File.applicationStorageDirectory;\n\t\t\t\tvar dbFile:File = folder.resolvePath("DBSample.db");\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tconn.open(dbFile);\n\t\t\t\t\ttrace("the database was created successfully");\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\ttrace("Error message:", error.message);\n\t\t\t\t\ttrace("Details:", error.details);\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsx)(e.h2,{id:"creating-database-tables",children:"Creating database tables"}),"\n",(0,r.jsxs)(e.p,{children:["Creating a table in a database involves\n",(0,r.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html#execute()",children:"executing a SQL statement"}),"\non that database, using the same process that you use to execute a SQL statement\nsuch as ",(0,r.jsx)(e.code,{children:"SELECT"}),", ",(0,r.jsx)(e.code,{children:"INSERT"}),", and so forth. To create a table, you use a\n",(0,r.jsx)(e.code,{children:"CREATE TABLE"})," statement, which includes definitions of columns and constraints\nfor the new table. For more information about executing SQL statements, see\n",(0,r.jsx)(e.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements",children:"Working with SQL statements"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:['The following example demonstrates creating a table named "employees" in an\nexisting database file, using asynchronous execution mode. Note that this code\nassumes there is a\n',(0,r.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance named ",(0,r.jsx)(e.code,{children:"conn"})," that is already instantiated and is already connected to a\ndatabase."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLStatement;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\n\n// ... create and open the SQLConnection instance named conn ...\n\nvar createStmt:SQLStatement = new SQLStatement();\ncreateStmt.sqlConnection = conn;\n\nvar sql:String =\n\t"CREATE TABLE IF NOT EXISTS employees (" +\n\t"    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n\t"    firstName TEXT, " +\n\t"    lastName TEXT, " +\n\t"    salary NUMERIC CHECK (salary > 0)" +\n\t")";\ncreateStmt.text = sql;\n\ncreateStmt.addEventListener(SQLEvent.RESULT, createResult);\ncreateStmt.addEventListener(SQLErrorEvent.ERROR, createError);\n\ncreateStmt.execute();\n\nfunction createResult(event:SQLEvent):void\n{\n\ttrace("Table created");\n}\n\nfunction createError(event:SQLErrorEvent):void\n{\n\ttrace("Error message:", event.error.message);\n\ttrace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\tvar createStmt:SQLStatement = new SQLStatement();\n\t\t\t\tcreateStmt.sqlConnection = conn;\n\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"CREATE TABLE IF NOT EXISTS employees (" +\n\t\t\t\t\t"    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n\t\t\t\t\t"    firstName TEXT, " +\n\t\t\t\t\t"    lastName TEXT, " +\n\t\t\t\t\t"    salary NUMERIC CHECK (salary > 0)" +\n\t\t\t\t\t")";\n\t\t\t\tcreateStmt.text = sql;\n\n\t\t\t\tcreateStmt.addEventListener(SQLEvent.RESULT, createResult);\n\t\t\t\tcreateStmt.addEventListener(SQLErrorEvent.ERROR, createError);\n\n\t\t\t\tcreateStmt.execute();\n\t\t\t}\n\n\t\t\tprivate function createResult(event:SQLEvent):void\n\t\t\t{\n\t\t\t\ttrace("Table created");\n\t\t\t}\n\n\t\t\tprivate function createError(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\ttrace("Error message:", event.error.message);\n\t\t\t\ttrace("Details:", event.error.details);\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsxs)(e.p,{children:['The following example demonstrates how to create a table named "employees" in an\nexisting database file, using synchronous execution mode. Note that this code\nassumes there is a\n',(0,r.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance named ",(0,r.jsx)(e.code,{children:"conn"})," that is already instantiated and is already connected to a\ndatabase."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLStatement;\nimport flash.errors.SQLError;\n\n// ... create and open the SQLConnection instance named conn ...\n\nvar createStmt:SQLStatement = new SQLStatement();\ncreateStmt.sqlConnection = conn;\n\nvar sql:String =\n\t"CREATE TABLE IF NOT EXISTS employees (" +\n\t"    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n\t"    firstName TEXT, " +\n\t"    lastName TEXT, " +\n\t"    salary NUMERIC CHECK (salary > 0)" +\n\t")";\ncreateStmt.text = sql;\n\ntry\n{\n\tcreateStmt.execute();\n\ttrace("Table created");\n}\ncatch (error:SQLError)\n{\n\ttrace("Error message:", error.message);\n\ttrace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.errors.SQLError;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\tvar createStmt:SQLStatement = new SQLStatement();\n\t\t\t\tcreateStmt.sqlConnection = conn;\n\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"CREATE TABLE IF NOT EXISTS employees (" +\n\t\t\t\t\t"    empId INTEGER PRIMARY KEY AUTOINCREMENT, " +\n\t\t\t\t\t"    firstName TEXT, " +\n\t\t\t\t\t"    lastName TEXT, " +\n\t\t\t\t\t"    salary NUMERIC CHECK (salary > 0)" +\n\t\t\t\t\t")";\n\t\t\t\tcreateStmt.text = sql;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tcreateStmt.execute();\n\t\t\t\t\ttrace("Table created");\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\ttrace("Error message:", error.message);\n\t\t\t\t\ttrace("Details:", error.details);\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsx)(e.p,{children:"More Help topics"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.a,{href:"https://web.archive.org/web/20120309072807/http://www.mindtheflex.com/?p=83",children:"Mind the Flex: Updating an existing AIR database"})})]})}function h(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(l,{...t})}):l(t)}}}]);