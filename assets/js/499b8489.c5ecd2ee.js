"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[30090],{28453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>s});var a=n(96540);const r={},i=a.createContext(r);function o(t){const e=a.useContext(i);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function s(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(r):t.components||r:o(t.components),a.createElement(i.Provider,{value:e},t.children)}},49260:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>v,frontMatter:()=>o,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"development/rich-media-content/working-with-video/monitoring-netstream-events","title":"Monitoring NetStream events","description":"Two types of events provide valuable usage data: netStatus and","source":"@site/docs/development/rich-media-content/working-with-video/monitoring-netstream-events.md","sourceDirName":"development/rich-media-content/working-with-video","slug":"/development/rich-media-content/working-with-video/monitoring-netstream-events","permalink":"/docs/development/rich-media-content/working-with-video/monitoring-netstream-events","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-video/monitoring-netstream-events.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Detecting player domain","permalink":"/docs/development/rich-media-content/working-with-video/detecting-player-domain"},"next":{"title":"Using the StageVideo APIs","permalink":"/docs/development/rich-media-content/working-with-video/using-the-stagevideo-apis"}}');var r=n(74848),i=n(28453);const o={},s="Monitoring NetStream events",d={},m=[];function c(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"monitoring-netstream-events",children:"Monitoring NetStream events"})}),"\n",(0,r.jsxs)(e.p,{children:["Two types of events provide valuable usage data: ",(0,r.jsx)(e.code,{children:"netStatus"})," and\n",(0,r.jsx)(e.code,{children:"mediaTypeData"}),". In addition, a timer can be used to periodically log the\nposition of the NetStream playhead."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"netStatus"})," events provide information you can use to determine how much of a\nstream a user viewed. Buffer and RTMFP stream transition events also result in a\n",(0,r.jsx)(e.code,{children:"netStatus"})," event."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"mediaTypeData"})," events provide meta and XMP data information. The\nNetstream.Play.Complete event is dispatched as a ",(0,r.jsx)(e.code,{children:"mediaTypeData"})," event. Other\ndata embedded in the stream are also available through ",(0,r.jsx)(e.code,{children:"mediaTypeData"})," events,\nincluding cue points, text, and images."]}),"\n",(0,r.jsx)(e.p,{children:"The following example illustrates how to create a class that monitors status and\ndata events from any active NetStreams in an application. Typically, such a\nclass would upload the data it was interested in analyzing to a server for\ncollection."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'package com.adobe.example\n{\n\timport flash.events.NetDataEvent;\n\timport flash.events.NetMonitorEvent;\n\timport flash.events.NetStatusEvent;\n\timport flash.net.NetMonitor;\n\timport flash.net.NetStream;\n\n\tpublic class NetStreamEventMonitor\n\t{\n\t\tprivate var netmon:NetMonitor;\n\t\tprivate var heartbeat:Timer = new Timer( 5000 );\n\n\t\tpublic function NetStreamEventMonitor()\n\t\t{\n\t\t\t//Create NetMonitor object\n\t\t\tnetmon = new NetMonitor();\n\t\t\tnetmon.addEventListener( NetMonitorEvent.NET_STREAM_CREATE, newNetStream );\n\n\t\t\t//Start the heartbeat timer\n\t\t\theartbeat.addEventListener( TimerEvent.TIMER, onHeartbeat );\n\t\t\theartbeat.start();\n\t\t}\n\n\t\t//On new NetStream\n\t\tprivate function newNetStream( event:NetMonitorEvent ):void\n\t\t{\n\t\t\ttrace( "New Netstream object");\n\t\t\tvar stream:NetStream = event.netStream;\n\t\t\tstream.addEventListener(NetDataEvent.MEDIA_TYPE_DATA, onStreamData);\n\t\t\tstream.addEventListener(NetStatusEvent.NET_STATUS, onStatus);\n\t\t}\n\n\t\t//On data events from a NetStream object\n\t\tprivate function onStreamData( event:NetDataEvent ):void\n\t\t{\n\n\t\t\tvar netStream:NetStream = event.target as NetStream;\n\t\t\ttrace( "Data event from " + netStream.info.uri + " at " + event.timestamp );\n\t\t\tswitch( event.info.handler )\n\t\t\t{\n\t\t\t\tcase "onMetaData":\n\t\t\t\t\t//handle metadata;\n\t\t\t\t\tbreak;\n\t\t\t\tcase "onXMPData":\n\t\t\t\t\t//handle XMP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase "onPlayStatus":\n\t\t\t\t\t//handle NetStream.Play.Complete\n\t\t\t\tcase "onImageData":\n\t\t\t\t\t//handle image\n\t\t\t\t\tbreak;\n\t\t\t\tcase "onTextData":\n\t\t\t\t\t//handle text\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//handle other events\n\n\t\t\t}\n\t\t}\n\n\t\t//On status events from a NetStream object\n\t\tprivate function onStatus( event:NetStatusEvent ):void\n\t\t{\n\t\t\ttrace( "Status event from " + event.target.info.uri + " at " + event.target.time );\n\t\t\t//handle status events\n\t\t}\n\t\t//On heartbeat timer\n\t\tprivate function onHeartbeat( event:TimerEvent ):void\n\t\t{\n\t\t\tvar streams:Vector.<NetStream> = netmon.listStreams();\n\t\t\tfor( var i:int = 0; i < streams.length; i++ )\n\t\t\t{\n\t\t\t\ttrace( "Heartbeat on " + streams[i].info.uri + " at " + streams[i].time );\n\t\t\t\t//handle heartbeat event\n\t\t\t}\n\t\t}\n\n\t}\n}\n'})})]})}function v(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(c,{...t})}):c(t)}}}]);