"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[54190],{28453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>d});var i=t(96540);const n={},s=i.createContext(n);function o(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(s.Provider,{value:a},e.children)}},67998:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});const i=JSON.parse('{"id":"development/display/working-with-bitmaps/the-bitmap-and-bitmap-data-classes","title":"The Bitmap and BitmapData classes","description":"The main ActionScript 3.0 classes for working with bitmap images are the Bitmap","source":"@site/docs/development/display/working-with-bitmaps/the-bitmap-and-bitmap-data-classes.md","sourceDirName":"development/display/working-with-bitmaps","slug":"/development/display/working-with-bitmaps/the-bitmap-and-bitmap-data-classes","permalink":"/docs/development/display/working-with-bitmaps/the-bitmap-and-bitmap-data-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-bitmaps/the-bitmap-and-bitmap-data-classes.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Taking advantage of mipmapping","permalink":"/docs/development/display/working-with-bitmaps/taking-advantage-of-mipmapping"},"next":{"title":"Filtering display objects","permalink":"/docs/development/display/filtering-display-objects/"}}');var n=t(74848),s=t(28453);const o={},d="The Bitmap and BitmapData classes",r={},p=[{value:"Understanding the Bitmap class",id:"understanding-the-bitmap-class",level:2},{value:"Pixel snapping and smoothing",id:"pixel-snapping-and-smoothing",level:2},{value:"Understanding the BitmapData class",id:"understanding-the-bitmapdata-class",level:2}];function l(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.header,{children:(0,n.jsx)(a.h1,{id:"the-bitmap-and-bitmapdata-classes",children:"The Bitmap and BitmapData classes"})}),"\n",(0,n.jsx)(a.p,{children:"The main ActionScript 3.0 classes for working with bitmap images are the Bitmap\nclass, which is used to display bitmap images on the screen, and the BitmapData\nclass, which is used to access and manipulate the raw image data of a bitmap."}),"\n",(0,n.jsx)(a.h2,{id:"understanding-the-bitmap-class",children:"Understanding the Bitmap class"}),"\n",(0,n.jsxs)(a.p,{children:["As a subclass of the DisplayObject class, the Bitmap class is the main\nActionScript 3.0 class used for displaying bitmap images. These images may have\nbeen loaded via the flash.display.Loader class or created dynamically using the\n",(0,n.jsx)(a.code,{children:"Bitmap()"})," constructor. When loading an image from an external source, a Bitmap\nobject can only use GIF, JPEG, or PNG format images. Once instantiated, the\nBitmap instance can be considered a wrapper for a BitmapData object that needs\nto be rendered to the Stage. Because a Bitmap instance is a display object, all\nthe characteristics and functionality of display objects can be used to\nmanipulate a Bitmap instance as well. For more information about working with\ndisplay objects, see ",(0,n.jsx)(a.a,{href:"/docs/development/display/display-programming/",children:"Display programming"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"pixel-snapping-and-smoothing",children:"Pixel snapping and smoothing"}),"\n",(0,n.jsx)(a.p,{children:"In addition to the functionality common to all display objects, the Bitmap class\nprovides some additional features that are specific to bitmap images."}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"pixelSnapping"})," property of the Bitmap class determines whether or not a\nBitmap object snaps to its nearest pixel. This property accepts one of three\nconstants defined in the PixelSnapping class: ",(0,n.jsx)(a.code,{children:"ALWAYS"}),", ",(0,n.jsx)(a.code,{children:"AUTO"}),", and ",(0,n.jsx)(a.code,{children:"NEVER"}),"."]}),"\n",(0,n.jsx)(a.p,{children:"The syntax for applying pixel snapping is as follows:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"myBitmap.pixelSnapping = PixelSnapping.ALWAYS;\n"})}),"\n",(0,n.jsxs)(a.p,{children:["Often, when bitmap images are scaled, they become blurred and distorted. To help\nreduce this distortion, use the ",(0,n.jsx)(a.code,{children:"smoothing"})," property of the BitmapData class.\nThis Boolean property, when set to ",(0,n.jsx)(a.code,{children:"true"}),", smooths, or anti-aliases, the pixels\nwithin the image when it is scaled. This gives the image a clearer and more\nnatural appearance."]}),"\n",(0,n.jsx)(a.h2,{id:"understanding-the-bitmapdata-class",children:"Understanding the BitmapData class"}),"\n",(0,n.jsx)(a.p,{children:"The BitmapData class, which is in the flash.display package, can be likened to a\nphotographic snapshot of the pixels contained within a loaded or dynamically\ncreated bitmap image. This snapshot is represented by an array of pixel data\nwithin the object. The BitmapData class also contains a series of built-in\nmethods that are useful for creation and manipulation of pixel data."}),"\n",(0,n.jsx)(a.p,{children:"To instantiate a BitmapData object, use the following code:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"var myBitmap:BitmapData = new BitmapData(width:Number, height:Number, transparent:Boolean, fillColor:uinit);\n"})}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"width"})," and ",(0,n.jsx)(a.code,{children:"height"})," parameters specify the size of the bitmap. Starting\nwith AIR 3 and Flash player 11, the size limits for a BitmapData object have\nbeen removed. The maximum size of a bitmap is dependent on the operating system."]}),"\n",(0,n.jsx)(a.p,{children:"In AIR 1.5 and Flash Player 10, the maximum size for a BitmapData object is\n8,191 pixels in width or height, and the total number of pixels cannot exceed\n16,777,215 pixels. (So, if a BitmapData object is 8,191 pixels wide, it can only\nbe 2,048 pixels high.) In Flash Player 9 and earlier and AIR 1.1 and earlier,\nthe limitation is 2,880 pixels in height and 2,880 in width."}),"\n",(0,n.jsxs)(a.p,{children:["The ",(0,n.jsx)(a.code,{children:"transparent"})," parameter specifies whether the bitmap data includes an alpha\nchannel (",(0,n.jsx)(a.code,{children:"true"}),") or not (",(0,n.jsx)(a.code,{children:"false"}),"). The ",(0,n.jsx)(a.code,{children:"fillColor"})," parameter is a 32-bit color\nvalue that specifies the background color, as well as the transparency value (if\nit has been set to ",(0,n.jsx)(a.code,{children:"true"}),"). The following example creates a BitmapData object\nwith an orange background that is 50 percent transparent:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"var myBitmap:BitmapData = new BitmapData(150, 150, true, 0x80FF3300);\n"})}),"\n",(0,n.jsxs)(a.p,{children:["To render a newly created BitmapData object to the screen, assign it to or wrap\nit in a Bitmap instance. To do this, you can either pass the BitmapData object\nas a parameter of the Bitmap object's constructor, or you can assign it to the\n",(0,n.jsx)(a.code,{children:"bitmapData"})," property of an existing Bitmap instance. You must also add the\nBitmap instance to the display list by calling the ",(0,n.jsx)(a.code,{children:"addChild()"})," or\n",(0,n.jsx)(a.code,{children:"addChildAt()"})," methods of the display object container that will contain the\nBitmap instance. For more information on working with the display list, see\n",(0,n.jsx)(a.a,{href:"/docs/development/display/display-programming/working-with-display-objects/adding-display-objects-to-the-display-list",children:"Adding display objects to the display list"}),"."]}),"\n",(0,n.jsx)(a.p,{children:"The following example creates a BitmapData object with a red fill, and displays\nit in a Bitmap instance:"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{children:"var myBitmapDataObject:BitmapData = new BitmapData(150, 150, false, 0xFF0000);\nvar myImage:Bitmap = new Bitmap(myBitmapDataObject);\naddChild(myImage);\n"})})]})}function c(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);