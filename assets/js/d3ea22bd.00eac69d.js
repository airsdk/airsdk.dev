"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[38016],{16018:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/display/working-with-movie-clips/controlling-movie-clip-playback","title":"Controlling movie clip playback","description":"Flash uses the metaphor of a timeline to convey animation or a change in state.","source":"@site/docs/development/display/working-with-movie-clips/controlling-movie-clip-playback.md","sourceDirName":"development/display/working-with-movie-clips","slug":"/development/display/working-with-movie-clips/controlling-movie-clip-playback","permalink":"/docs/development/display/working-with-movie-clips/controlling-movie-clip-playback","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-movie-clips/controlling-movie-clip-playback.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Basics of movie clips","permalink":"/docs/development/display/working-with-movie-clips/basics-of-movie-clips"},"next":{"title":"Creating MovieClip objects with ActionScript","permalink":"/docs/development/display/working-with-movie-clips/creating-movieclip-objects-with-actionscript"}}');var a=t(74848),o=t(28453);const r={},s="Controlling movie clip playback",l={},c=[{value:"Playing movie clips and stopping playback",id:"playing-movie-clips-and-stopping-playback",level:2},{value:"Fast-forwarding and rewinding",id:"fast-forwarding-and-rewinding",level:2},{value:"Jumping to a different frame and using frame labels",id:"jumping-to-a-different-frame-and-using-frame-labels",level:2},{value:"Working with scenes",id:"working-with-scenes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"controlling-movie-clip-playback",children:"Controlling movie clip playback"})}),"\n",(0,a.jsx)(n.p,{children:"Flash uses the metaphor of a timeline to convey animation or a change in state.\nAny visual element that employs a timeline must be either a MovieClip object or\nextend from the MovieClip class. While ActionScript can direct any movie clip to\nstop, play, or go to another point on the timeline, it cannot be used to\ndynamically create a timeline or add content at specific frames; this is only\npossible using the Flash authoring tool."}),"\n",(0,a.jsxs)(n.p,{children:["When a MovieClip is playing, it progresses along its timeline at a speed\ndictated by the frame rate of the SWF file. Alternatively, you can override this\nsetting by setting the ",(0,a.jsx)(n.code,{children:"Stage.frameRate"})," property in ActionScript."]}),"\n",(0,a.jsx)(n.h2,{id:"playing-movie-clips-and-stopping-playback",children:"Playing movie clips and stopping playback"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"play()"})," and ",(0,a.jsx)(n.code,{children:"stop()"})," methods allow basic control of a movie clip across its\ntimeline. For example, suppose you have a movie clip symbol on the Stage which\ncontains an animation of a bicycle moving across the screen, with its instance\nname set to ",(0,a.jsx)(n.code,{children:"bicycle"}),". If the following code is attached to a keyframe on the\nmain timeline,"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"bicycle.stop();\n"})}),"\n",(0,a.jsxs)(n.p,{children:["the bicycle will not move (its animation will not play). The bicycle's movement\ncould start through some other user interaction. For example, if you had a\nbutton named ",(0,a.jsx)(n.code,{children:"startButton"}),", the following code on a keyframe on the main\ntimeline would make it so that clicking the button causes the animation to play:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// This function will be called when the button is clicked. It causes the\n// bicycle animation to play.\nfunction playAnimation(event:MouseEvent):void\n{\n    bicycle.play();\n}\n// Register the function as a listener with the button.\nstartButton.addEventListener(MouseEvent.CLICK, playAnimation);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"fast-forwarding-and-rewinding",children:"Fast-forwarding and rewinding"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"play()"})," and ",(0,a.jsx)(n.code,{children:"stop()"})," methods are not the only way of controlling playback\nin a movie clip. You can also move the playhead forward or backward along the\ntimeline manually by using the ",(0,a.jsx)(n.code,{children:"nextFrame()"})," and ",(0,a.jsx)(n.code,{children:"prevFrame()"})," methods. Calling\neither of these methods stops playback and moves the playhead one frame forward\nor backward, respectively."]}),"\n",(0,a.jsxs)(n.p,{children:["Using the ",(0,a.jsx)(n.code,{children:"play()"})," method is analogous to calling ",(0,a.jsx)(n.code,{children:"nextFrame()"})," every time the\nmovie clip object's ",(0,a.jsx)(n.code,{children:"enterFrame"})," event is triggered. Along these lines, you\ncould make the ",(0,a.jsx)(n.code,{children:"bicycle"})," movie clip play backwards by creating an event listener\nfor the ",(0,a.jsx)(n.code,{children:"enterFrame"})," event and telling ",(0,a.jsx)(n.code,{children:"bicycle"})," to go to its previous frame in\nthe listener function, as follows:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"// This function is called when the enterFrame event is triggered, meaning\n// it's called once per frame.\nfunction everyFrame(event:Event):void\n{\n    if (bicycle.currentFrame == 1)\n    {\n        bicycle.gotoAndStop(bicycle.totalFrames);\n    }\n    else\n    {\n        bicycle.prevFrame();\n    }\n}\nbicycle.addEventListener(Event.ENTER_FRAME, everyFrame);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In normal playback, if a movie clip contains more than a single frame, it will\nloop indefinitely when playing; that is, it will return to Frame 1 if it\nprogresses past its final frame. When you use ",(0,a.jsx)(n.code,{children:"prevFrame()"})," or ",(0,a.jsx)(n.code,{children:"nextFrame()"}),",\nthis behavior does not happen automatically (calling ",(0,a.jsx)(n.code,{children:"prevFrame()"})," when the\nplayhead is on Frame 1 doesn't move the playhead to the last frame). The ",(0,a.jsx)(n.code,{children:"if"}),"\ncondition in the example above checks to see if the playhead has progressed\nbackwards to the first frame, and sets the playhead ahead to its final frame,\neffectively creating a continuous loop of the movie clip playing backwards."]}),"\n",(0,a.jsx)(n.h2,{id:"jumping-to-a-different-frame-and-using-frame-labels",children:"Jumping to a different frame and using frame labels"}),"\n",(0,a.jsxs)(n.p,{children:["Sending a movie clip to a new frame is a simple affair. Calling either\n",(0,a.jsx)(n.code,{children:"gotoAndPlay()"})," or ",(0,a.jsx)(n.code,{children:"gotoAndStop()"})," will jump the movie clip to the frame number\nspecified as a parameter. Alternatively, you can pass a string that matches the\nname of a frame label. Any frame on the timeline can be assigned a label. To do\nthis, select a frame on the timeline and then enter a name in the Frame Label\nfield on the Property inspector."]}),"\n",(0,a.jsx)(n.p,{children:'The advantages of using frame labels instead of numbers are particularly evident\nwhen creating a complex movie clip. When the number of frames, layers, and\ntweens in an animation becomes large, consider labeling important frames with\nexplanatory descriptions that represent shifts in the behavior of the movie clip\n(for example, "off," "walking," or "running"). This improves code readability\nand also provides flexibility, since ActionScript calls that go to a labeled\nframe are pointers to a single reference\u2014the label\u2014rather than a specific frame\nnumber. If later on you decide to move a particular segment of the animation to\na different frame, you will not need to change your ActionScript code as long as\nyou keep the same label for the frames in the new location.'}),"\n",(0,a.jsxs)(n.p,{children:["To represent frame labels in code, ActionScript 3.0 includes the FrameLabel\nclass. Each instance of this class represents a single frame label, and has a\n",(0,a.jsx)(n.code,{children:"name"})," property representing the name of the frame label as specified in the\nProperty inspector, and a ",(0,a.jsx)(n.code,{children:"frame"})," property representing the frame number of the\nframe where the label is placed on the timeline."]}),"\n",(0,a.jsxs)(n.p,{children:["In order to get access to the FrameLabel instances associated with a movie clip\ninstance, the MovieClip class includes two properties that directly return\nFrameLabel objects. The ",(0,a.jsx)(n.code,{children:"currentLabels"})," property returns an array that consists\nof all FrameLabel objects across the entire timeline of a movie clip. The\n",(0,a.jsx)(n.code,{children:"currentLabel"})," property returns a string containing the name of the frame label\nencountered most recently along the timeline."]}),"\n",(0,a.jsxs)(n.p,{children:["Suppose you were creating a movie clip named ",(0,a.jsx)(n.code,{children:"robot"})," and had labeled the various\nstates of its animation. You could set up a condition that checks the\n",(0,a.jsx)(n.code,{children:"currentLabel"})," property to access the current state of ",(0,a.jsx)(n.code,{children:"robot"}),", as in the\nfollowing code:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'if (robot.currentLabel == "walking")\n{\n    // do something\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Flash Player 11.3 and AIR 3.3 added the ",(0,a.jsx)(n.code,{children:"frameLabel"})," event to the FrameLabel\nclass. You can assign an event handler to the FrameLabel instance that\nrepresents a frame label. The event is dispatched when the playhead enters the\nframe."]}),"\n",(0,a.jsxs)(n.p,{children:["The following example creates a FrameLabel instance for the second frame label\nin the Array of frame labels for the MovieClip. It then registers an event\nhandler for the ",(0,a.jsx)(n.code,{children:"frameLabel"})," event:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"var myFrameLabel:FrameLabel = robot.currentLabels[1];\nmyFrameLabel.addEventListener(Event.FRAME_LABEL, onFrameLabel);\n\nfunction onFrameLabel(e:Event):void {\n    // do something\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"working-with-scenes",children:"Working with scenes"}),"\n",(0,a.jsxs)(n.p,{children:["In the Flash authoring environment, you can use scenes to demarcate a series of\ntimelines that a SWF file will progress through. Using the second parameter of\nthe ",(0,a.jsx)(n.code,{children:"gotoAndPlay()"})," or ",(0,a.jsx)(n.code,{children:"gotoAndStop()"})," methods, you can specify a scene to send\nthe playhead to. All FLA files start with only the initial scene, but you can\ncreate new scenes."]}),"\n",(0,a.jsx)(n.p,{children:"Using scenes is not always the best approach because scenes have a number of\ndrawbacks. A Flash document that contains multiple scenes can be difficult to\nmaintain, particularly in multiauthor environments. Multiple scenes can also be\ninefficient in bandwidth, because the publishing process merges all scenes into\na single timeline. This causes a progressive download of all scenes, even if\nthey are never played. For these reasons, use of multiple scenes is often\ndiscouraged except for organizing lengthy multiple timeline-based animations."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"scenes"})," property of the MovieClip class returns an array of Scene objects\nrepresenting all the scenes in the SWF file. The ",(0,a.jsx)(n.code,{children:"currentScene"})," property returns\na Scene object that represents the scene that is currently playing."]}),"\n",(0,a.jsxs)(n.p,{children:["The Scene class has several properties that give information about a scene. The\n",(0,a.jsx)(n.code,{children:"labels"})," property returns an array of FrameLabel objects representing the frame\nlabels in that scene. The ",(0,a.jsx)(n.code,{children:"name"})," property returns the scene's name as a string.\nThe ",(0,a.jsx)(n.code,{children:"numFrames"})," property returns an int representing the total number of frames\nin the scene."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);