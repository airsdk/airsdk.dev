"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[36254],{8155:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/display/using-the-drawing-api/drawing-paths","title":"Drawing Paths","description":"The section on drawing lines and curves (see","source":"@site/docs/development/display/using-the-drawing-api/drawing-paths.md","sourceDirName":"development/display/using-the-drawing-api","slug":"/development/display/using-the-drawing-api/drawing-paths","permalink":"/docs/development/display/using-the-drawing-api/drawing-paths","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/drawing-paths.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Drawing API example: Algorithmic Visual Generator","permalink":"/docs/development/display/using-the-drawing-api/drawing-api-example-algorithmic-visual-generator"},"next":{"title":"Using graphics data classes","permalink":"/docs/development/display/using-the-drawing-api/using-graphics-data-classes"}}');var r=a(74848),t=a(28453);const o={},i="Drawing Paths",d={},c=[];function h(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"drawing-paths",children:"Drawing Paths"})}),"\n",(0,r.jsxs)(n.p,{children:["The section on drawing lines and curves (see\n",(0,r.jsx)(n.a,{href:"/docs/development/display/using-the-drawing-api/drawing-lines-and-curves",children:"Drawing lines and curves"}),") introduced the\ncommands for drawing a single line (",(0,r.jsx)(n.code,{children:"Graphics.lineTo()"}),") or curve\n(",(0,r.jsx)(n.code,{children:"Graphics.curveTo()"}),") and then moving the line to another point\n(",(0,r.jsx)(n.code,{children:"Graphics.moveTo()"}),") to form a shape. The ",(0,r.jsx)(n.code,{children:"Graphics.drawPath()"})," and\n",(0,r.jsx)(n.code,{children:"Graphics.drawTriangles()"})," methods accept a set of objects representing those\nsame drawing commands as a parameter. With these methods, you can provide a\nseries of ",(0,r.jsx)(n.code,{children:"Graphics.lineTo()"}),", ",(0,r.jsx)(n.code,{children:"Graphics.curveTo()"}),", or ",(0,r.jsx)(n.code,{children:"Graphics.moveTo()"}),"\ncommands for the Flash runtime to execute in a single statement."]}),"\n",(0,r.jsxs)(n.p,{children:["The\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/GraphicsPathCommand.html",children:"GraphicsPathCommand"}),"\nenumeration class defines a set of constants that correspond to drawing\ncommands. You pass a series of these constants (wrapped in a Vector instance) as\na parameter for the ",(0,r.jsx)(n.code,{children:"Graphics.drawPath()"})," method. Then with a single command you\ncan render an entire shape, or several shapes. You can also alter the values\npassed to these methods to change an existing shape."]}),"\n",(0,r.jsxs)(n.p,{children:["In addition to the Vector of drawing commands, the ",(0,r.jsx)(n.code,{children:"drawPath()"})," method needs a\nset of coordinates that correspond to the coordinates for each drawing command.\nCreate a Vector instance containing coordinates (Number instances) and pass it\nto the ",(0,r.jsx)(n.code,{children:"drawPath()"})," method as the second (",(0,r.jsx)(n.code,{children:"data"}),") argument."]}),"\n",(0,r.jsx)(n.p,{children:"Note: The values in the vector are not Point objects; the vector is a series of\nnumbers where each group of two numbers represents an x/y coordinate pair."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"Graphics.drawPath()"})," method matches each command with its respective point\nvalues (a collection of two or four numbers) to generate a path in the Graphics\nobject:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"package\n{\n    import flash.display.*;\n\n    public class DrawPathExample extends Sprite\n    {\n        public function DrawPathExample(){\n\n            var squareCommands:Vector.<int> = new Vector.<int>(5, true);\n            squareCommands[0] = GraphicsPathCommand.MOVE_TO;\n            squareCommands[1] = GraphicsPathCommand.LINE_TO;\n            squareCommands[2] = GraphicsPathCommand.LINE_TO;\n            squareCommands[3] = GraphicsPathCommand.LINE_TO;\n            squareCommands[4] = GraphicsPathCommand.LINE_TO;\n\n            var squareCoord:Vector.<Number> = new Vector.<Number>(10, true);\n            squareCoord[0] = 20; //x\n            squareCoord[1] = 10; //y\n            squareCoord[2] = 50;\n            squareCoord[3] = 10;\n            squareCoord[4] = 50;\n            squareCoord[5] = 40;\n            squareCoord[6] = 20;\n            squareCoord[7] = 40;\n            squareCoord[8] = 20;\n            squareCoord[9] = 10;\n\n            graphics.beginFill(0x442266);//set the color\n            graphics.drawPath(squareCommands, squareCoord);\n        }\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var s=a(96540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);