"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[78243],{28453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>i});var n=t(96540);const a={},s=n.createContext(a);function r(e){const o=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:o},e.children)}},68874:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"development/display/display-programming/manipulating-display-objects/adjusting-displayobject-colors","title":"Adjusting DisplayObject colors","description":"You can use the methods of the ColorTransform class (flash.geom.ColorTransform) to adjust the color of a display object. Each display object has a transform property, which is an instance of the Transform class, and contains information about various transformations that are applied to the display object (such as rotation, changes in scale or position, and so forth). In addition to its information about geometric transformations, the Transform class also includes a colorTransform property, which is an instance of the ColorTransform class, and provides access to make color adjustments to the display object. To access the color transformation information of a display object, you can use code such as this:","source":"@site/docs/development/display/display-programming/manipulating-display-objects/adjusting-displayobject-colors.md","sourceDirName":"development/display/display-programming/manipulating-display-objects","slug":"/development/display/display-programming/manipulating-display-objects/adjusting-displayobject-colors","permalink":"/docs/development/display/display-programming/manipulating-display-objects/adjusting-displayobject-colors","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/display-programming/manipulating-display-objects/adjusting-displayobject-colors.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"title":"Adjusting DisplayObject colors","sidebar_position":9},"sidebar":"mainSidebar","previous":{"title":"Applying blending modes","permalink":"/docs/development/display/display-programming/manipulating-display-objects/applying-blending-modes"},"next":{"title":"Rotating objects","permalink":"/docs/development/display/display-programming/manipulating-display-objects/rotating-objects"}}');var a=t(74848),s=t(28453);const r={title:"Adjusting DisplayObject colors",sidebar_position:9},i=void 0,l={},c=[{value:"Setting color values with code",id:"setting-color-values-with-code",level:2},{value:"Altering color and brightness effects with code",id:"altering-color-and-brightness-effects-with-code",level:2}];function d(e){const o={code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(o.p,{children:["You can use the methods of the ",(0,a.jsx)(o.code,{children:"ColorTransform"})," class (",(0,a.jsx)(o.code,{children:"flash.geom.ColorTransform"}),") to adjust the color of a display object. Each display object has a ",(0,a.jsx)(o.code,{children:"transform"})," property, which is an instance of the ",(0,a.jsx)(o.code,{children:"Transform"})," class, and contains information about various transformations that are applied to the display object (such as rotation, changes in scale or position, and so forth). In addition to its information about geometric transformations, the Transform class also includes a colorTransform property, which is an instance of the ColorTransform class, and provides access to make color adjustments to the display object. To access the color transformation information of a display object, you can use code such as this:"]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-actionscript",children:"var colorInfo:ColorTransform = myDisplayObject.transform.colorTransform;\n"})}),"\n",(0,a.jsxs)(o.p,{children:["Once you\u2019ve created a ",(0,a.jsx)(o.code,{children:"ColorTransform"})," instance, you can read its property values to find out what color transformations have already been applied, or you can set those values to make color changes to the display object. To update the display object after any changes, you must reassign the ",(0,a.jsx)(o.code,{children:"ColorTransform"})," instance back to the ",(0,a.jsx)(o.code,{children:"transform.colorTransform"})," property."]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-actionscript",children:"var colorInfo:ColorTransform = myDisplayObject.transform.colorTransform;\n\n// Make some color transformations here.\n\n// Commit the change.\nmyDisplayObject.transform.colorTransform = colorInfo;\n"})}),"\n",(0,a.jsx)(o.h2,{id:"setting-color-values-with-code",children:"Setting color values with code"}),"\n",(0,a.jsxs)(o.p,{children:["The ",(0,a.jsx)(o.code,{children:"color"})," property of the ColorTransform class can be used to assign a specific red, green, blue (RGB) color value to the display object. The following example uses the ",(0,a.jsx)(o.code,{children:"color"})," property to change the color of the display object named square to blue, when the user clicks a button named blueBtn :"]}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-actionscript",children:"// square is a display object on the Stage.\n// blueBtn, redBtn, greenBtn, and blackBtn are buttons on the Stage.\n\nimport flash.events.MouseEvent;\nimport flash.geom.ColorTransform;\n\n// Get access to the ColorTransform instance associated with square.\nvar colorInfo:ColorTransform = square.transform.colorTransform;\n\n// This function is called when blueBtn is clicked.\nfunction makeBlue(event:MouseEvent):void\n{\n"})}),"\n",(0,a.jsx)(o.p,{children:"// Set the color of the ColorTransform object.\ncolorInfo.color = 0x003399;\n// apply the change to the display object\nsquare.transform.colorTransform = colorInfo;"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:"\n}\n\nblueBtn.addEventListener(MouseEvent.CLICK, makeBlue);\n"})}),"\n",(0,a.jsx)(o.p,{children:"Note that when you change a display object\u2019s color using the color property, it completely changes the color of the entire object, regardless of whether the object previously had multiple colors. For example, if there is a display object containing a green circle with black text on top, setting the color property of that object\u2019s associated ColorTransform instance to a shade of red will make the entire object, circle and text, turn red (so the text will no longer be distinguishable from the rest of the object)."}),"\n",(0,a.jsx)(o.h2,{id:"altering-color-and-brightness-effects-with-code",children:"Altering color and brightness effects with code"}),"\n",(0,a.jsxs)(o.p,{children:["Suppose you have a display object with multiple colors (for example, a digital photo) and you don\u2019t want to completely recolor the object; you just want to adjust the color of a display object based on the existing colors. In this scenario, the ",(0,a.jsx)(o.code,{children:"ColorTransform"})," class includes a series of multiplier and offset properties that you can use to make this type of adjustment. The multiplier properties, named ",(0,a.jsx)(o.code,{children:"redMultiplier"})," , ",(0,a.jsx)(o.code,{children:"greenMultiplier"})," , ",(0,a.jsx)(o.code,{children:"blueMultiplier"})," , and ",(0,a.jsx)(o.code,{children:"alphaMultiplier"})," , work like colored photographic filters (or colored sunglasses), amplifying or diminishing certain colors in the display object. The offset properties ( ",(0,a.jsx)(o.code,{children:"redOffset"})," , ",(0,a.jsx)(o.code,{children:"greenOffset"})," , ",(0,a.jsx)(o.code,{children:"blueOffset"})," , and ",(0,a.jsx)(o.code,{children:"alphaOffset"})," ) can be used to add extra amounts of a certain color to the object, or to specify the minimum value that a particular color can have."]}),"\n",(0,a.jsx)(o.p,{children:"These multiplier and offset properties are identical to the advanced color settings that are available for movie clip symbols in the Flash authoring tool when you choose Advanced from the Color pop-up menu on the Property inspector."}),"\n",(0,a.jsx)(o.p,{children:"The following code loads a JPEG image and applies a color transformation to it, which adjusts the red and green channels as the mouse pointer moves along the x axis and y axis. In this case, because no offset values are specified, the color value of each color channel displayed on screen will be a percentage of the original color value in the image\u2014meaning that the most red or green displayed in any given pixel will be the original amount of red or green in that pixel."}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-actionscript",children:'import flash.display.Loader;\nimport flash.events.MouseEvent;\nimport flash.geom.Transform;\nimport flash.geom.ColorTransform;\nimport flash.net.URLRequest;\n\n// Load an image onto the Stage.\nvar loader:Loader = new Loader();\nvar url:URLRequest = new URLRequest("http://www.helpexamples.com/flash/images/image1.jpg");\nloader.load(url);\nthis.addChild(loader);\n\n// This function is called when the mouse moves over the loaded image.\nfunction adjustColor(event:MouseEvent):void\n{\n'})}),"\n",(0,a.jsxs)(o.p,{children:["// Access the ColorTransform object for the Loader (containing the image)\nvar colorTransformer",":ColorTransform"," = loader.transform.colorTransform;"]}),"\n",(0,a.jsx)(o.p,{children:"// Set the red and green multipliers according to the mouse position.\n// The red value ranges from 0% (no red) when the cursor is at the left\n// to 100% red (normal image appearance) when the cursor is at the right.\n// The same applies to the green channel, except it's controlled by the\n// position of the mouse in the y axis.\ncolorTransformer.redMultiplier = (loader.mouseX / loader.width) * 1;\ncolorTransformer.greenMultiplier = (loader.mouseY / loader.height) * 1;"}),"\n",(0,a.jsx)(o.p,{children:"// Apply the changes to the display object.\nloader.transform.colorTransform = colorTransformer;"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{children:"\n}\n\nloader.addEventListener(MouseEvent.MOUSE_MOVE, adjustColor);\n"})})]})}function h(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);