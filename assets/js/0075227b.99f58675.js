"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[97456],{1435:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"development/display/display-programming/working-with-display-objects/traversing-the-display-list","title":"Traversing the display list","description":"As you\'ve seen, the display list is a tree structure. At the top of the tree is the Stage, which can contain multiple display objects. Those display objects that are themselves display object containers can contain other display objects, or display object containers.","source":"@site/docs/development/display/display-programming/working-with-display-objects/traversing-the-display-list.md","sourceDirName":"development/display/display-programming/working-with-display-objects","slug":"/development/display/display-programming/working-with-display-objects/traversing-the-display-list","permalink":"/docs/development/display/display-programming/working-with-display-objects/traversing-the-display-list","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/display-programming/working-with-display-objects/traversing-the-display-list.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Traversing the display list","sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Working with display object containers","permalink":"/docs/development/display/display-programming/working-with-display-objects/working-with-display-object-containers"},"next":{"title":"Setting Stage properties","permalink":"/docs/development/display/display-programming/working-with-display-objects/setting-stage-properties"}}');var s=i(74848),a=i(28453);const o={title:"Traversing the display list",sidebar_position:5},c=void 0,d={},r=[{value:"Adobe Flex",id:"adobe-flex",level:2}];function l(e){const t={code:"code",h2:"h2",img:"img",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"As you've seen, the display list is a tree structure. At the top of the tree is the Stage, which can contain multiple display objects. Those display objects that are themselves display object containers can contain other display objects, or display object containers."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:i(41674).A+"",width:"438",height:"565"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"DisplayObjectContainer"})," class includes properties and methods for traversing the display list, by means of the child lists of display object containers. For example, consider the following code, which adds two display objects, title and pict , to the container object (which is a ",(0,s.jsx)(t.code,{children:"Sprite"}),", and the ",(0,s.jsx)(t.code,{children:"Sprite"})," class extends the ",(0,s.jsx)(t.code,{children:"DisplayObjectContainer"})," class):"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'var container:Sprite = new Sprite();\nvar title:TextField = new TextField();\ntitle.text = "Hello";\nvar pict:Loader = new Loader();\nvar url:URLRequest = new URLRequest("banana.jpg");\npict.load(url);\npict.name = "banana loader";\ncontainer.addChild(title);\ncontainer.addChild(pict);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"getChildAt()"})," method returns the child of the display list at a specific index position:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"trace(container.getChildAt(0) is TextField); // true\n"})}),"\n",(0,s.jsxs)(t.p,{children:['You can also access child objects by name. Each display object has a name property, and if you don\u2019t assign it, Flash Player or AIR assigns a default value, such as "instance1" . For example, the following code shows how to use the ',(0,s.jsx)(t.code,{children:"getChildByName()"})," method to access a child display object with the name ",(0,s.jsx)(t.code,{children:'"banana loader"'})," :"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'trace(container.getChildByName("banana loader") is Loader); // true\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Using the ",(0,s.jsx)(t.code,{children:"getChildByName()"})," method can result in slower performance than using the ",(0,s.jsx)(t.code,{children:"getChildAt()"})," method."]}),"\n",(0,s.jsxs)(t.p,{children:["Since a display object container can contain other display object containers as child objects in its display list, you can traverse the full display list of the application as a tree. For example, in the code excerpt shown earlier, once the load operation for the pict Loader object is complete, the pict object will have one child display object, which is the bitmap, loaded. To access this bitmap display object, you can write ",(0,s.jsx)(t.code,{children:"pict.getChildAt(0)"})," . You can also write ",(0,s.jsx)(t.code,{children:"container.getChildAt(0).getChildAt(0)"})," (since ",(0,s.jsx)(t.code,{children:"container.getChildAt(0) == pict"})," )."]}),"\n",(0,s.jsx)(t.p,{children:"The following function provides an indented trace() output of the display list from a display object container:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'function traceDisplayList(container:DisplayObjectContainer, indentString:String = ""):void\n{\n    var child:DisplayObject;\n    for (var i:uint=0; i < container.numChildren; i++)\n    {\n        child = container.getChildAt(i);\n        trace(indentString, child, child.name);\n        if (container.getChildAt(i) is DisplayObjectContainer)\n        {\n            traceDisplayList(DisplayObjectContainer(child), indentString + " ")\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"adobe-flex",children:"Adobe Flex"}),"\n",(0,s.jsxs)(t.p,{children:["If you use Flex, you should know that Flex defines many component display object classes, and these classes override the display list access methods of the ",(0,s.jsx)(t.code,{children:"DisplayObjectContainer"})," class. For example, the Container class of the ",(0,s.jsx)(t.code,{children:"mx.core"})," package overrides the ",(0,s.jsx)(t.code,{children:"addChild()"})," method and other methods of the ",(0,s.jsx)(t.code,{children:"DisplayObjectContainer"})," class (which the Container class extends). In the case of the ",(0,s.jsx)(t.code,{children:"addChild()"})," method, the class overrides the method in such a way that you cannot add all types of display objects to a Container instance in Flex. The overridden method, in this case, requires that the child object that you are adding be a type of ",(0,s.jsx)(t.code,{children:"mx.core.UIComponent"})," object."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>c});var n=i(96540);const s={},a=n.createContext(s);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:t},e.children)}},41674:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/dp_Display_List_Organization-a4e371e7d7055af7eaa3a494fb6bb20f.png"}}]);