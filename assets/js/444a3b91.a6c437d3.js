"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[2419],{28453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>d});var n=t(96540);const r={},s=n.createContext(r);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:a},e.children)}},58111:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values","title":"Specifying shader input and parameter values","description":"Many Pixel Bender shaders are defined to use one or more input images that are","source":"@site/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values.md","sourceDirName":"development/display/working-with-pixel-bender-shaders","slug":"/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values","permalink":"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Loading or embedding a shader","permalink":"/docs/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader"},"next":{"title":"Using a shader as a blend mode","permalink":"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-blend-mode"}}');var r=t(74848),s=t(28453);const i={},d="Specifying shader input and parameter values",o={},h=[{value:"Identifying shader inputs and parameters",id:"identifying-shader-inputs-and-parameters",level:2},{value:"Specifying shader input values",id:"specifying-shader-input-values",level:2},{value:"Specifying shader parameter values",id:"specifying-shader-parameter-values",level:2}];function c(e){const a={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"specifying-shader-input-and-parameter-values",children:"Specifying shader input and parameter values"})}),"\n",(0,r.jsx)(a.p,{children:"Many Pixel Bender shaders are defined to use one or more input images that are\nused in the shader processing. For example, it's common for a shader to accept a\nsource image and output that image with a particular effect applied to it.\nDepending on how the shader is used the input value may be specified\nautomatically or you may need to explicitly provide a value. Similarly, many\nshaders specify parameters that are used to customize the output of the shader.\nYou must also explicitly set a value for each parameter before using the shader."}),"\n",(0,r.jsxs)(a.p,{children:["You use the Shader object's ",(0,r.jsx)(a.code,{children:"data"})," property to set shader inputs and parameters\nand to determine whether a particular shader expects inputs or parameters. The\n",(0,r.jsx)(a.code,{children:"data"})," property is a ShaderData instance."]}),"\n",(0,r.jsx)(a.h2,{id:"identifying-shader-inputs-and-parameters",children:"Identifying shader inputs and parameters"}),"\n",(0,r.jsxs)(a.p,{children:["The first step in specifying shader input and parameter values is to find out\nwhether the particular shader you're using expects any input images or\nparameters. Each Shader instance has a ",(0,r.jsx)(a.code,{children:"data"})," property containing a ShaderData\nobject. If the shader defines any inputs or parameters, they are accessed as\nproperties of that ShaderData object. The properties' names match the names\nspecified for the inputs and parameters in the shader source code. For example,\nif a shader defines an input named ",(0,r.jsx)(a.code,{children:"src"}),", the ShaderData object has a property\nnamed ",(0,r.jsx)(a.code,{children:"src"})," representing that input. Each property that represents an input is a\nShaderInput instance, and each property that represents a parameter is a\nShaderParameter instance."]}),"\n",(0,r.jsx)(a.p,{children:"Ideally, the author of the shader provides documentation for the shader,\nindicating what input image values and parameters the shader expects, what they\nrepresent, the appropriate values, and so forth."}),"\n",(0,r.jsxs)(a.p,{children:["However, if the shader isn't documented (and you don't have its source code) you\ncan inspect the shader data to identify the inputs and parameters. The\nproperties representing inputs and parameters are dynamically added to the\nShaderData object. Consequently, you can use a ",(0,r.jsx)(a.code,{children:"for..in"})," loop to examine the\nShaderData object to find out whether its associated shader defines any inputs\nor parameters. As described in\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/accessing-shader-metadata",children:"Accessing shader metadata"}),", any metadata value\ndefined for a shader is also accessed as a dynamic property added to the\n",(0,r.jsx)(a.code,{children:"Shader.data"})," property. When you use this technique to identify shader inputs\nand parameters, check the data type of the dynamic properties. If a property is\na ShaderInput instance it represents an input. If it is a ShaderParameter\ninstance it represents a parameter. Otherwise, it is a metadata value. The\nfollowing example shows how to use a ",(0,r.jsx)(a.code,{children:"for..in"})," loop to examine the dynamic\nproperties of a shader's ",(0,r.jsx)(a.code,{children:"data"})," property. Each input (ShaderInput object) is\nadded to a Vector instance named ",(0,r.jsx)(a.code,{children:"inputs"}),". Each parameter (ShaderParameter\nobject) is added to a Vector instance named ",(0,r.jsx)(a.code,{children:"parameters"}),". Finally, any metadata\nproperties are added to a Vector instance named ",(0,r.jsx)(a.code,{children:"metadata"}),". Note that this\nexample assumes a Shader instance named ",(0,r.jsx)(a.code,{children:"myShader"})," is already created:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"var shaderData:ShaderData = myShader.data;\nvar inputs:Vector.<ShaderInput> = new Vector.<ShaderInput>();\nvar parameters:Vector.<ShaderParameter> = new Vector.<ShaderParameter>();\nvar metadata:Vector.<String> = new Vector.<String>();\n\nfor (var prop:String in shaderData)\n{\n\tif (shaderData[prop] is ShaderInput)\n\t{\n\t\tinputs[inputs.length] = shaderData[prop];\n\t}\n\telse if (shaderData[prop] is ShaderParameter)\n\t{\n\t\tparameters[parameters.length] = shaderData[prop];\n\t}\n\telse\n\t{\n\t\tmetadata[metadata.length] = shaderData[prop];\n\t}\n}\n\n// do something with the inputs or properties\n"})}),"\n",(0,r.jsx)(a.h2,{id:"specifying-shader-input-values",children:"Specifying shader input values"}),"\n",(0,r.jsx)(a.p,{children:"Many shaders expect one or more input images that are used in the shader\nprocessing. However, in many cases an input is specified automatically when the\nShader object is used. For example, suppose a shader requires one input, and\nthat shader is used as a filter. When the filter is applied to a display object\nor BitmapData object, that object is automatically set as the input. In that\ncase you do not explicitly set an input value."}),"\n",(0,r.jsxs)(a.p,{children:["However, in some cases, especially if a shader defines multiple inputs, you do\nexplicitly set a value for an input. Each input that is defined in a shader is\nrepresented in ActionScript by a ShaderInput object. The ShaderInput object is a\nproperty of the ShaderData instance in the Shader object's ",(0,r.jsx)(a.code,{children:"data"})," property, as\ndescribed in\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values#identifying-shader-inputs-and-parameters",children:"Identifying shader inputs and parameters"}),".\nFor example, suppose a shader defines an input named ",(0,r.jsx)(a.code,{children:"src"}),", and that shader is\nlinked to a Shader object named ",(0,r.jsx)(a.code,{children:"myShader"}),". In that case you access the\nShaderInput object corresponding to the ",(0,r.jsx)(a.code,{children:"src"})," input using the following\nidentifier:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"myShader.data.src\n"})}),"\n",(0,r.jsxs)(a.p,{children:["Each ShaderInput object has an ",(0,r.jsx)(a.code,{children:"input"})," property that is used to set the value\nfor the input. You set the ",(0,r.jsx)(a.code,{children:"input"})," property to a BitmapData instance to specify\nimage data. You can also set the ",(0,r.jsx)(a.code,{children:"input"})," property to a BitmapData or\nVector.<Number> instance to specify binary or number data. For details and\nrestrictions on using a BitmapData or Vector.<Number> instance as an input,\nsee the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/ShaderInput.html#input",children:(0,r.jsx)(a.code,{children:"ShaderInput.input"})}),"\nlisting in the\n",(0,r.jsx)(a.a,{href:"https://airsdk.dev/reference/actionscript/3.0/index.html",children:"ActionScript 3.0 Reference for the Adobe Flash Platform"}),"."]}),"\n",(0,r.jsxs)(a.p,{children:["In addition to the ",(0,r.jsx)(a.code,{children:"input"})," property, a ShaderInput object has properties that\ncan be used to determine what type of image the input expects. These properties\ninclude the ",(0,r.jsx)(a.code,{children:"width"}),", ",(0,r.jsx)(a.code,{children:"height"}),", and ",(0,r.jsx)(a.code,{children:"channels"})," properties. Each ShaderInput\nobject also has an ",(0,r.jsx)(a.code,{children:"index"})," property that is useful for determining whether an\nexplicit value must be provided for the input. If a shader expects more inputs\nthan the number that are automatically set, then you set values for those\ninputs. For details on the different ways to use a shader, and whether input\nvalues are automatically set, see ",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader",children:"Using a shader"}),"."]}),"\n",(0,r.jsx)(a.h2,{id:"specifying-shader-parameter-values",children:"Specifying shader parameter values"}),"\n",(0,r.jsxs)(a.p,{children:["Some shaders define parameter values that the shader uses in creating its\nresult. For example, a shader that alters the brightness of an image might\nspecify a brightness parameter that determines how much the operation affects\nthe brightness. A single parameter defined in a shader can expect a single value\nor multiple values, according to the parameter definition in the shader. Each\nparameter that is defined in a shader is represented in ActionScript by a\nShaderParameter object. The ShaderParameter object is a property of the\nShaderData instance in the Shader object's data property, as described in\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values#identifying-shader-inputs-and-parameters",children:"Identifying shader inputs and parameters"}),".\nFor example, suppose a shader defines a parameter named ",(0,r.jsx)(a.code,{children:"brightness"}),", and that\nshader is represented by a Shader object named ",(0,r.jsx)(a.code,{children:"myShader"}),". In that case you\naccess the ShaderParameter corresponding to the ",(0,r.jsx)(a.code,{children:"brightness"})," parameter using the\nfollowing identifier:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"myShader.data.brightness\n"})}),"\n",(0,r.jsxs)(a.p,{children:["To set a value (or values) for the parameter, create an ActionScript array\ncontaining the value or values and assign that array to the ShaderParameter\nobject's ",(0,r.jsx)(a.code,{children:"value"})," property. The ",(0,r.jsx)(a.code,{children:"value"})," property is defined as an Array instance\nbecause it's possible that a single shader parameter requires multiple values.\nEven if the shader parameter only expects a single value, you must wrap the\nvalue in an Array object to assign it to the ",(0,r.jsx)(a.code,{children:"ShaderParameter.value"})," property.\nThe following listing demonstrates setting a single value as the ",(0,r.jsx)(a.code,{children:"value"}),"\nproperty:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"myShader.data.brightness.value = [75];\n"})}),"\n",(0,r.jsxs)(a.p,{children:["If the Pixel Bender source code for the shader defines a default value for the\nparameter, an array containing the default value or values is created and\nassigned to the ShaderParameter object's ",(0,r.jsx)(a.code,{children:"value"})," property when the Shader object\nis created. Once an array has been assigned to the ",(0,r.jsx)(a.code,{children:"value"})," property (including\nif it's the default array) the parameter value can be changed by changing the\nvalue of the array element. You do not need to create a new array and assign it\nto the ",(0,r.jsx)(a.code,{children:"value"})," property."]}),"\n",(0,r.jsxs)(a.p,{children:["The following example demonstrates setting a shader's parameter value in\nActionScript. In this example the shader defines a parameter named ",(0,r.jsx)(a.code,{children:"color"}),". The\n",(0,r.jsx)(a.code,{children:"color"})," parameter is declared as a ",(0,r.jsx)(a.code,{children:"float4"})," variable in the Pixel Bender source\ncode, which means it is an array of four floating point numbers. In the example,\nthe ",(0,r.jsx)(a.code,{children:"color"})," parameter value is changed continuously, and each time it changes\nthe shader is used to draw a colored rectangle on the screen. The result is an\nanimated color change."]}),"\n",(0,r.jsx)(a.p,{children:"Note: The code for this example was written by Ryan Taylor. Thank you Ryan for\nsharing this example."}),"\n",(0,r.jsx)(a.p,{children:"The ActionScript code centers around three methods:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"init()"})," : In the ",(0,r.jsx)(a.code,{children:"init()"})," method the code loads the Pixel Bender bytecode\nfile containing the shader. When the file loads, the ",(0,r.jsx)(a.code,{children:"onLoadComplete()"})," method\nis called."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"onLoadComplete()"})," : In the ",(0,r.jsx)(a.code,{children:"onLoadComplete()"})," method the code creates the\nShader object named ",(0,r.jsx)(a.code,{children:"shader"}),". It also creates a Sprite instance named\n",(0,r.jsx)(a.code,{children:"texture"}),". In the ",(0,r.jsx)(a.code,{children:"renderShader()"})," method, the code draws the shader result\ninto ",(0,r.jsx)(a.code,{children:"texture"})," once per frame."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"onEnterFrame()"})," : The ",(0,r.jsx)(a.code,{children:"onEnterFrame()"})," method is called once per frame,\ncreating the animation effect. In this method, the code sets the shader\nparameter value to the new color, then calls the ",(0,r.jsx)(a.code,{children:"renderShader()"})," method to\ndraw the shader result as a rectangle."]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"renderShader()"})," : In the ",(0,r.jsx)(a.code,{children:"renderShader()"})," method, the code calls the\n",(0,r.jsx)(a.code,{children:"Graphics.beginShaderFill()"})," method to specify a shader fill. It then draws a\nrectangle whose fill is defined by the shader output (the generated color) For\nmore information on using a shader in this way, see\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-drawing-fill",children:"Using a shader as a drawing fill"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.p,{children:"The following is the ActionScript code for this example. Use this class as the\nmain application class for an ActionScript-only project in Flash Builder, or as\nthe document class for the FLA file in Flash Professional:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"package\n{\n\timport flash.display.Shader;\n\timport flash.display.Sprite;\n\timport flash.events.Event;\n\timport flash.net.URLLoader;\n\timport flash.net.URLLoaderDataFormat;\n\timport flash.net.URLRequest;\n\n\tpublic class ColorFilterExample extends Sprite\n\t{\n\t\tprivate const DELTA_OFFSET:Number = Math.PI * 0.5;\n\t\tprivate var loader:URLLoader;\n\t\tprivate var shader:Shader;\n\t\tprivate var texture:Sprite;\n\t\tprivate var delta:Number = 0;\n\n\t\tpublic function ColorFilterExample()\n\t\t{\n\t\t\tinit();\n\t\t}\n\n\t\tprivate function init():void\n\t\t{\n\t\t\tloader = new URLLoader();\n\t\t\tloader.dataFormat = URLLoaderDataFormat.BINARY;\n\t\t\tloader.addEventListener(Event.COMPLETE, onLoadComplete);\n\t\t\tloader.load(new URLRequest(\"ColorFilter.pbj\"));\n\t\t}\n\n\t\tprivate function onLoadComplete(event:Event):void\n\t\t{\n\t\t\tshader = new Shader(loader.data);\n\n\t\t\ttexture = new Sprite();\n\n\t\t\taddChild(texture);\n\n\t\t\taddEventListener(Event.ENTER_FRAME, onEnterFrame);\n\t\t}\n\t\tprivate function onEnterFrame(event:Event):void\n\t\t{\n\t\t\tshader.data.color.value[0] = 0.5 + Math.cos(delta - DELTA_OFFSET) * 0.5;\n\t\t\tshader.data.color.value[1] = 0.5 + Math.cos(delta) * 0.5;\n\t\t\tshader.data.color.value[2] = 0.5 + Math.cos(delta + DELTA_OFFSET) * 0.5;\n\t\t\t// The alpha channel value (index 3) is set to 1 by the kernel's default\n\t\t\t// value. This value doesn't need to change.\n\n\t\t\tdelta += 0.1;\n\n\t\t\trenderShader();\n\t\t}\n\n\t\tprivate function renderShader():void\n\t\t{\n\t\t\ttexture:graphics.clear();\n\t\t\ttexture.graphics.beginShaderFill(shader);\n\t\t\ttexture.graphics.drawRect(0, 0, stage.stageWidth, stage.stageHeight);\n\t\t\ttexture.graphics.endFill();\n\t\t}\n\t}\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:'The following is the source code for the ColorFilter shader kernel, used to\ncreate the "ColorFilter.pbj" Pixel Bender bytecode file:'}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:'<languageVersion : 1.0;>\nkernel ColorFilter\n<\nnamespace : "boostworthy::Example";\nvendor : "Ryan Taylor";\nversion : 1;\ndescription : "Creates an image where every pixel has the specified color value.";\n'})}),"\n",(0,r.jsx)(a.blockquote,{children:"\n"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"{\n\toutput pixel4 result;\n\n\tparameter float4 color\n\t<\n\t\tminValue:float4(0, 0, 0, 0);\n\t\tmaxValue:float4(1, 1, 1, 1);\n\t\tdefaultValue:float4(0, 0, 0, 1);\n\t>;\n\n\tvoid evaluatePixel()\n\t{\n\t\tresult = color;\n\t}\n}\n"})}),"\n",(0,r.jsxs)(a.p,{children:["If you're using a shader whose parameters aren't documented, you can figure out\nhow many elements of what type must be included in the array by checking the\nShaderParameter object's ",(0,r.jsx)(a.code,{children:"type"})," property. The ",(0,r.jsx)(a.code,{children:"type"})," property indicates the data\ntype of the parameter as defined in the shader itself. For a list of the number\nand type of elements expected by each parameter type, see the\n",(0,r.jsx)(a.code,{children:"ShaderParameter.value"})," property listing in the ActionScript 3.0 Reference."]}),"\n",(0,r.jsxs)(a.p,{children:["Each ShaderParameter object also has an ",(0,r.jsx)(a.code,{children:"index"})," property that indicates where\nthe parameter fits in the order of the shader's parameters. In addition to these\nproperties, a ShaderParameter object can have additional properties containing\nmetadata values provided by the shader's author. For example, the author can\nspecify metadata values such as minimum, maximum, and default values for a\nparameter. Any metadata values that the author specifies are added to the\nShaderParameter object as dynamic properties. To examine those properties, use a\n",(0,r.jsx)(a.code,{children:"for..in"})," loop to loop over the ShaderParameter object's dynamic properties to\nidentify its metadata. The following example shows how to use a ",(0,r.jsx)(a.code,{children:"for..in"})," loop\nto identify a ShaderParameter object's metadata. Each metadata value is added to\na Vector instance named ",(0,r.jsx)(a.code,{children:"metadata"}),". Note that this example assumes a Shader\ninstance named ",(0,r.jsx)(a.code,{children:"myShader"})," is already created, and that it is known to have a\nparameter named ",(0,r.jsx)(a.code,{children:"brightness"}),":"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"var brightness:ShaderParameter = myShader.data.brightness;\nvar metadata:Vector.<String> = new Vector.<String>();\n\nfor (var prop:String in brightness)\n{\n\tif (brightness[prop] is String)\n\t{\n\t\tmetadata[metadata.length] = brightness[prop];\n\t}\n}\n\n// do something with the metadata\n"})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);