"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[19761],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const r={},s=i.createContext(r);function o(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:t},e.children)}},65207:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/files-and-data/working-with-bytearrays/bytearray-example-reading-a-zip-file","title":"ByteArray example: Reading a .zip file","description":"This example demonstrates how to read a simple .zip file containing several","source":"@site/docs/development/files-and-data/working-with-bytearrays/bytearray-example-reading-a-zip-file.md","sourceDirName":"development/files-and-data/working-with-bytearrays","slug":"/development/files-and-data/working-with-bytearrays/bytearray-example-reading-a-zip-file","permalink":"/docs/development/files-and-data/working-with-bytearrays/bytearray-example-reading-a-zip-file","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-bytearrays/bytearray-example-reading-a-zip-file.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Reading and writing a ByteArray","permalink":"/docs/development/files-and-data/working-with-bytearrays/reading-and-writing-a-bytearray"},"next":{"title":"Networking and communication","permalink":"/docs/development/networking-and-communication/"}}');var r=n(74848),s=n(28453);const o={sidebar_position:2},a="ByteArray example: Reading a .zip file",d={},l=[];function h(e){const t={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"bytearray-example-reading-a-zip-file",children:"ByteArray example: Reading a .zip file"})}),"\n",(0,r.jsx)(t.p,{children:"This example demonstrates how to read a simple .zip file containing several\nfiles of different types. It does so by extracting relevant data from the\nmetadata for each file, uncompressing each file into a ByteArray and writing the\nfile to the desktop."}),"\n",(0,r.jsxs)(t.p,{children:["The general structure of a .zip file is based on the specification by PKWARE\nInc., which is maintained at\n",(0,r.jsx)(t.a,{href:"http://www.pkware.com/documents/casestudies/APPNOTE.TXT",children:"http://www.pkware.com/documents/casestudies/APPNOTE.TXT"}),". First is a file\nheader and file data for the first file in the .zip archive, followed by a file\nheader and file data pair for each additional file. (The structure of the file\nheader is described later.) Next, the .zip file optionally includes a data\ndescriptor record (usually when the output zip file was created in memory rather\nthan saved to a disk). Next are several additional optional elements: archive\ndecryption header, archive extra data record, central directory structure, Zip64\nend of central directory record, Zip64 end of central directory locator, and end\nof central directory record."]}),"\n",(0,r.jsx)(t.p,{children:"The code in this example is written to only parse zip files that do not contain\nfolders and it does not expect data descriptor records. It ignores all\ninformation following the last file data."}),"\n",(0,r.jsx)(t.p,{children:"The format of the file header for each file is as follows:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{}),(0,r.jsx)(t.th,{})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"file header signature"}),(0,r.jsx)(t.td,{children:"4 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"required version"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"general-purpose bit flag"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"compression method"}),(0,r.jsx)(t.td,{children:"2 bytes (8=DEFLATE; 0=UNCOMPRESSED)"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"last modified file time"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"last modified file date"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"crc-32"}),(0,r.jsx)(t.td,{children:"4 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"compressed size"}),(0,r.jsx)(t.td,{children:"4 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"uncompressed size"}),(0,r.jsx)(t.td,{children:"4 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"file name length"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"extra field length"}),(0,r.jsx)(t.td,{children:"2 bytes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"file name"}),(0,r.jsx)(t.td,{children:"variable"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"extra field"}),(0,r.jsx)(t.td,{children:"variable"})]})]})]}),"\n",(0,r.jsx)(t.p,{children:"Following the file header is the actual file data, which can be either\ncompressed or uncompressed, depending on the compression method flag. The flag\nis 0 (zero) if the file data is uncompressed, 8 if the data is compressed using\nthe DEFLATE algorithm, or another value for other compression algorithms."}),"\n",(0,r.jsxs)(t.p,{children:["The user interface for this example consists of a label and a text area (\n",(0,r.jsx)(t.code,{children:"taFiles"}),"). The application writes the following information to the text area\nfor each file it encounters in the .zip file: the file name, the compressed\nsize, and the uncompressed size. The following MXML document defines the user\ninterface for the Flex version of the application:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" layout="vertical" creationComplete="init();">\n\t<mx:Script>\n\t<![CDATA[\n\t\t// The application code goes here\n\t]]>\n\t</mx:Script>\n\t<mx:Form>\n\t\t<mx:FormItem label="Output">\n\t\t\t<mx:TextArea id="taFiles" width="320" height="150"/>\n\t\t</mx:FormItem>\n\t</mx:Form>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsx)(t.p,{children:"The beginning of the program performs the following tasks:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Imports the required classes"}),"\n",(0,r.jsx)(t.p,{children:"import flash.filesystem.*;\nimport flash.utils.ByteArray;\nimport flash.events.Event;"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Defines the user interface for Flash"}),"\n",(0,r.jsx)(t.p,{children:"import fl.controls.*;"}),"\n",(0,r.jsx)(t.p,{children:'//requires TextArea and Label components in the Library\nvar taFiles = new TextArea();\nvar output = new Label();\ntaFiles.setSize(320, 150);\ntaFiles.move(10, 30);\noutput.move(10, 10);\noutput.width = 150;\noutput.text = "Contents of HelloAir.zip";\naddChild(taFiles);\naddChild(output);'}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Defines the ",(0,r.jsx)(t.code,{children:"bytes"})," ByteArray"]}),"\n",(0,r.jsxs)(t.p,{children:["var bytes",":ByteArray"," = new ByteArray();"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Defines variables to store metadata from the file header"}),"\n",(0,r.jsxs)(t.p,{children:["// variables for reading fixed portion of file header\nvar fileName",":String"," = new String();\nvar flNameLength",":uint",";\nvar xfldLength",":uint",";\nvar offset",":uint",";\nvar compSize",":uint",";\nvar uncompSize",":uint",";\nvar compMethod",":int",";\nvar signature",":int",";"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Defines File ( ",(0,r.jsx)(t.code,{children:"zfile"}),") and FileStream ( ",(0,r.jsx)(t.code,{children:"zStream"}),') objects to represent the\n.zip file, and specifies the location of the .zip file from which the files\nare extracted\u2014a file named "HelloAIR.zip" in the desktop directory.']}),"\n",(0,r.jsxs)(t.p,{children:["// File variables for accessing .zip file\nvar zfile",":File",' = File.desktopDirectory.resolvePath("HelloAIR.zip");\nvar zStream',":FileStream"," = new FileStream();"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["In Flex, the program code starts in the ",(0,r.jsx)(t.code,{children:"init()"})," method, which is called as the\n",(0,r.jsx)(t.code,{children:"creationComplete"})," handler for the root ",(0,r.jsx)(t.code,{children:"mx:WindowedApplication"})," tag."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"// for Flex\nprivate function init():void\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:"The program begins by opening the .zip file in READ mode."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"zStream.open(zfile, FileMode.READ);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["It then sets the ",(0,r.jsx)(t.code,{children:"endian"})," property of ",(0,r.jsx)(t.code,{children:"bytes"})," to ",(0,r.jsx)(t.code,{children:"LITTLE_ENDIAN"})," to indicate\nthat the byte order of numeric fields has the least significant byte first."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"bytes.endian = Endian.LITTLE_ENDIAN;\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Next, a ",(0,r.jsx)(t.code,{children:"while()"})," statement begins a loop that continues until the current\nposition in the file stream is greater than or equal to the size of the file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"while (zStream.position < zfile.size)\n{\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The first statement inside the loop reads the first 30 bytes of the file stream\ninto the ByteArray ",(0,r.jsx)(t.code,{children:"bytes"}),". The first 30 bytes make up the fixed-size part of\nthe first file header."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"// read fixed metadata portion of local file header\n\nzStream.readBytes(bytes, 0, 30);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Next, the code reads an integer ( ",(0,r.jsx)(t.code,{children:"signature"}),") from the first bytes of the\n30-byte header. The ZIP format definition specifies that the signature for every\nfile header is the hexadecimal value ",(0,r.jsx)(t.code,{children:"0x04034b50"})," ; if the signature is\ndifferent it means that the code has moved beyond the file portion of the .zip\nfile and there are no more files to extract. In that case the code exits the\n",(0,r.jsx)(t.code,{children:"while"})," loop immediately rather than waiting for the end of the byte array."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"bytes.position = 0;\n\nsignature = bytes.readInt();\n// if no longer reading data files, quit\nif (signature != 0x04034b50)\n{\n    break;\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The next part of the code reads the header byte at offset position 8 and stores\nthe value in the variable ",(0,r.jsx)(t.code,{children:"compMethod"}),". This byte contains a value indicating\nthe compression method that was used to compress this file. Several compression\nmethods are allowed, but in practice nearly all .zip files use the DEFLATE\ncompression algorithm. If the current file is compressed with DEFLATE\ncompression, ",(0,r.jsx)(t.code,{children:"compMethod"})," is 8; if the file is uncompressed, ",(0,r.jsx)(t.code,{children:"compMethod"})," is 0."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"bytes.position = 8;\n\ncompMethod = bytes.readByte();  // store compression method (8 == Deflate)\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Following the first 30 bytes is a variable-length portion of the header that\ncontains the file name and, possibly, an extra field. The variable ",(0,r.jsx)(t.code,{children:"offset"}),"\nstores the size of this portion. The size is calculated by adding the file name\nlength and extra field length, read from the header at offsets 26 and 28."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"offset = 0;    // stores length of variable portion of metadata\n\nbytes.position = 26;  // offset to file name length\nflNameLength = bytes.readShort();    // store file name\noffset += flNameLength;     // add length of file name\nbytes.position = 28;    // offset to extra field length\nxfldLength = bytes.readShort();\noffset += xfldLength;    // add length of extra field\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Next the program reads the variable-length portion of the file header for the\nnumber of bytes stored in the ",(0,r.jsx)(t.code,{children:"offset"})," variable."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"// read variable length bytes between fixed-length header and compressed file data\n\nzStream.readBytes(bytes, 30, offset);\n"})}),"\n",(0,r.jsx)(t.p,{children:"The program reads the file name from the variable length portion of the header\nand displays it in the text area along with the compressed (zipped) and\nuncompressed (original) sizes of the file."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'// Flash version\n\nbytes.position = 30;\nfileName = bytes.readUTFBytes(flNameLength); // read file name\ntaFiles.appendText(fileName + "\\n"); // write file name to text area\nbytes.position = 18;\ncompSize = bytes.readUnsignedInt();  // store size of compressed portion\ntaFiles.appendText("\\tCompressed size is: " + compSize + \'\\n\');\nbytes.position = 22;  // offset to uncompressed size\nuncompSize = bytes.readUnsignedInt();  // store uncompressed size\ntaFiles.appendText("\\tUncompressed size is: " + uncompSize + \'\\n\');\n'})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'// Flex version\n\nbytes.position = 30;\nfileName = bytes.readUTFBytes(flNameLength); // read file name\ntaFiles.text += fileName + "\\n"; // write file name to text area\nbytes.position = 18;\ncompSize = bytes.readUnsignedInt();  // store size of compressed portion\ntaFiles.text += "\\tCompressed size is: " + compSize + \'\\n\';\nbytes.position = 22;  // offset to uncompressed size\nuncompSize = bytes.readUnsignedInt();  // store uncompressed size\ntaFiles.text += "\\tUncompressed size is: " + uncompSize + \'\\n\';\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The example reads the rest of the file from the file stream into ",(0,r.jsx)(t.code,{children:"bytes"})," for the\nlength specified by the compressed size, overwriting the file header in the\nfirst 30 bytes. The compressed size is accurate even if the file is not\ncompressed because in that case the compressed size is equal to the uncompressed\nsize of the file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"// read compressed file to offset 0 of bytes; for uncompressed files\n// the compressed and uncompressed size is the same\nif (compSize == 0) continue;\nzStream.readBytes(bytes, 0, compSize);\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Next, the example uncompresses the compressed file and calls the ",(0,r.jsx)(t.code,{children:"outfile()"}),"\nfunction to write it to the output file stream. It passes ",(0,r.jsx)(t.code,{children:"outfile()"})," the file\nname and the byte array containing the file data."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"if (compMethod == 8) // if file is compressed, uncompress\n\n{\n    bytes.uncompress(CompressionAlgorithm.DEFLATE);\n}\noutFile(fileName, bytes);   // call outFile() to write out the file\n"})}),"\n",(0,r.jsxs)(t.p,{children:["In the previously mentioned example,\n",(0,r.jsx)(t.code,{children:"bytes.uncompress(CompressionAlgorithm.DEFLATE)"})," will work only in AIR\napplications. To get deflated data uncompressed for both AIR and Flash Player,\ninvoke ByteArray's ",(0,r.jsx)(t.code,{children:"inflate()"})," function."]}),"\n",(0,r.jsxs)(t.p,{children:["The closing braces indicate the end of the ",(0,r.jsx)(t.code,{children:"while"})," loop, and of the ",(0,r.jsx)(t.code,{children:"init()"}),"\nmethod and the Flex application code, except for the ",(0,r.jsx)(t.code,{children:"outFile()"})," method.\nExecution loops back to the beginning of the ",(0,r.jsx)(t.code,{children:"while"})," loop and continues\nprocessing the next bytes in the .zip file\u2014either extracting another file or\nending processing of the .zip file if the last file has been processed."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"        } // end of while loop\n} // for Flex version, end of init() method and application\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"outfile()"})," function opens an output file in WRITE mode on the desktop,\ngiving it the name supplied by the ",(0,r.jsx)(t.code,{children:"filename"})," parameter. It then writes the file\ndata from the ",(0,r.jsx)(t.code,{children:"data"})," parameter to the output file stream ( ",(0,r.jsx)(t.code,{children:"outStream"}),") and\ncloses the file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"// Flash version\nfunction outFile(fileName:String, data:ByteArray):void\n{\n\tvar outFile:File = File.desktopDirectory; // destination folder is desktop\n\toutFile = outFile.resolvePath(fileName);  // name of file to write\n\tvar outStream:FileStream = new FileStream();\n\t// open output file stream in WRITE mode\n\toutStream.open(outFile, FileMode.WRITE);\n\t// write out the file\n\toutStream.writeBytes(data, 0, data.length);\n\t// close it\n\toutStream.close();\n}\n\nprivate function outFile(fileName:String, data:ByteArray):void\n{\n\tvar outFile:File = File.desktopDirectory; // dest folder is desktop\n\toutFile = outFile.resolvePath(fileName);  // name of file to write\n\tvar outStream:FileStream = new FileStream();\n\t// open output file stream in WRITE mode\n\toutStream.open(outFile, FileMode.WRITE);\n\t// write out the file\n\toutStream.writeBytes(data, 0, data.length);\n\t// close it\n\toutStream.close();\n}\n"})})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);