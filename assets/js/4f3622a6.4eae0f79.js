"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[66591],{28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}},65087:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view","title":"Projecting 3D objects onto a 2D view","description":"The","source":"@site/docs/development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view.md","sourceDirName":"development/display/working-in-three-dimensions","slug":"/development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view","permalink":"/docs/development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-in-three-dimensions/projecting-3d-objects-onto-a-2d-view.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Performing complex 3D transformations","permalink":"/docs/development/display/working-in-three-dimensions/performing-complex-3d-transformations"},"next":{"title":"Understanding 3D display objects in Flash Player and the AIR runtime","permalink":"/docs/development/display/working-in-three-dimensions/understanding-3d-display-objects-in-flash-player-and-the-air-runtime"}}');var o=i(74848),s=i(28453);const r={},l="Projecting 3D objects onto a 2D view",a={},c=[{value:"Field of view",id:"field-of-view",level:2},{value:"Projection center",id:"projection-center",level:2},{value:"Focal length",id:"focal-length",level:2},{value:"Default perspective projection values",id:"default-perspective-projection-values",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"projecting-3d-objects-onto-a-2d-view",children:"Projecting 3D objects onto a 2D view"})}),"\n",(0,o.jsxs)(n.p,{children:["The\n",(0,o.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/geom/PerspectiveProjection.html",children:"PerspectiveProjection"}),"\nclass in the ",(0,o.jsx)(n.code,{children:"flash.geom"})," package provides a simple way of applying rudimentary\nperspective when moving display objects through 3D space."]}),"\n",(0,o.jsx)(n.p,{children:"If you do not explicitly create a perspective projection for your 3D space, the\n3D engine uses a default PerspectiveProjection object that exists on the root\nand is propagated to all its children."}),"\n",(0,o.jsx)(n.p,{children:"The three properties that define how a PerspectiveProjection object displays 3D\nspace are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"fieldOfView"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"projectionCenter"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"focalLength"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Modifying the value of the ",(0,o.jsx)(n.code,{children:"fieldOfView"})," automatically modifies the value of the\n",(0,o.jsx)(n.code,{children:"focalLength"})," and vice-versa, since they are interdependent."]}),"\n",(0,o.jsxs)(n.p,{children:["The formula used to calculate the ",(0,o.jsx)(n.code,{children:"focalLength"})," given the ",(0,o.jsx)(n.code,{children:"fieldOfView"})," value\nis:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"focalLength = stageWidth/2 * (cos(fieldOfView/2) / sin(fieldOfView/2)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Typically you would modify the ",(0,o.jsx)(n.code,{children:"fieldOfView"})," property explicitly."]}),"\n",(0,o.jsx)(n.h2,{id:"field-of-view",children:"Field of view"}),"\n",(0,o.jsxs)(n.p,{children:["By manipulating the ",(0,o.jsx)(n.code,{children:"fieldOfView"})," property of the PerspectiveProjection class,\nyou can make a 3D display object approaching the viewer appear larger and an\nobject receding from the viewer appear smaller."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"fieldOfView"})," property specifies an angle ",(0,o.jsx)(n.em,{children:"between"})," 0 and 180 degrees that\ndetermines the strength of the perspective projection. The greater the value,\nthe stronger the distortion applied to a display object moving along its z-axis.\nA low ",(0,o.jsx)(n.code,{children:"fieldOfView"})," value results in very little scaling and causes objects to\nappear to move only slightly back in space. A high ",(0,o.jsx)(n.code,{children:"fieldOfView"})," value causes\nmore distortion and the appearance of greater movement. The maximum value of\n179.9999... degrees results in an extreme fish-eye camera lens effect. The\nmaximum value of ",(0,o.jsx)(n.code,{children:"fieldOfView"})," is 179.9999... and the minimum is 0.00001...\nExactly 0 and 180 are illegal values."]}),"\n",(0,o.jsx)(n.h2,{id:"projection-center",children:"Projection center"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"projectionCenter"})," property represents the vanishing point in the\nperspective projection. It is applied as an offset to the default registration\npoint (0,0) in the upper-left corner of the stage."]}),"\n",(0,o.jsx)(n.p,{children:"As an object appears to move further from the viewer, it skews towards the\nvanishing point and eventually vanishes. Imagine an infinitely long hall. As you\nlook down the hall, the edges of the walls converge to a vanishing point far\ndown the hall."}),"\n",(0,o.jsxs)(n.p,{children:["If the vanishing point is at the center of the stage, the hall disappears\ntowards a point in the center. The default value for the ",(0,o.jsx)(n.code,{children:"projectionCenter"}),"\nproperty is the center of the stage. If, for example, you want elements to\nappear on the left of the stage and a 3D area to appear on the right, set the\n",(0,o.jsx)(n.code,{children:"projectionCenter"})," to a point on the right of the stage to make that the\nvanishing point of your 3D viewing area."]}),"\n",(0,o.jsx)(n.h2,{id:"focal-length",children:"Focal length"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"focalLength"})," property represents the distance between the origin of the\nviewpoint (0,0,0) and the location of the display object on its z-axis."]}),"\n",(0,o.jsx)(n.p,{children:"A long focal length is like a telephoto lens with a narrow view and compressed\ndistances between objects. A short focal length is like a wide angle lens, with\nwhich you get a wide view with a lot of distortion. A medium focal length\napproximates what the human eye sees."}),"\n",(0,o.jsxs)(n.p,{children:["Typically the ",(0,o.jsx)(n.code,{children:"focalLength"})," is re-calculated dynamically during perspective\ntransformation as the display object moves, but you can set it explicitly."]}),"\n",(0,o.jsx)(n.h2,{id:"default-perspective-projection-values",children:"Default perspective projection values"}),"\n",(0,o.jsx)(n.p,{children:"The default PerspectiveProjection object created on the root has the following\nvalues:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"fieldOfView: 55"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"perspectiveCenter: stagewidth/2, stageHeight/2"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"focalLength: stageWidth / 2 * ( cos(fieldOfView/2) / sin(fieldOfView/2) )"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"These are the values that are used if you do not create your own\nPerspectiveProjection object."}),"\n",(0,o.jsxs)(n.p,{children:["You can instantiate your own PerspectiveProjection object with the intention of\nmodifying the ",(0,o.jsx)(n.code,{children:"projectionCenter"})," and ",(0,o.jsx)(n.code,{children:"fieldOfView"})," yourself. In this case, the\ndefault values of the newly created object are the following, based on a default\nstage size of 500 by 500:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"fieldOfView: 55"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"perspectiveCenter: 250,250"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"focalLength: 480.24554443359375"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);