"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[67966],{28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var o=n(96540);const r={},a=o.createContext(r);function s(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(a.Provider,{value:t},e.children)}},30250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"development/core-actionscript-classes/working-with-arrays/associative-arrays","title":"Associative arrays","description":"An associative array, sometimes called a hash or map, uses keys instead of","source":"@site/docs/development/core-actionscript-classes/working-with-arrays/associative-arrays.md","sourceDirName":"development/core-actionscript-classes/working-with-arrays","slug":"/development/core-actionscript-classes/working-with-arrays/associative-arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/associative-arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-arrays/associative-arrays.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Indexed arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/indexed-arrays"},"next":{"title":"Multidimensional arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/multidimensional-arrays"}}');var r=n(74848),a=n(28453);const s={sidebar_position:3},i="Associative arrays",c={},l=[{value:"Associative arrays with string keys",id:"associative-arrays-with-string-keys",level:2},{value:"Associative arrays with object keys (Dictionaries)",id:"associative-arrays-with-object-keys-dictionaries",level:2},{value:"Iterating with object keys",id:"iterating-with-object-keys",level:4},{value:"Object keys and memory management",id:"object-keys-and-memory-management",level:4}];function h(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"associative-arrays",children:"Associative arrays"})}),"\n",(0,r.jsxs)(t.p,{children:["An associative array, sometimes called a ",(0,r.jsx)(t.em,{children:"hash"})," or ",(0,r.jsx)(t.em,{children:"map"}),", uses ",(0,r.jsx)(t.em,{children:"keys"})," instead of\na numeric index to organize stored values. Each key in an associative array is a\nunique string that is used to access a stored value. An associative array is an\ninstance of the Object class, which means that each key corresponds to a\nproperty name. Associative arrays are unordered collections of key and value\npairs. Your code should not expect the keys of an associative array to be in a\nspecific order."]}),"\n",(0,r.jsxs)(t.p,{children:["ActionScript 3.0 also includes an advanced type of associative array called a\n",(0,r.jsx)(t.em,{children:"dictionary"}),". Dictionaries, which are instances of the Dictionary class in the\nflash.utils package, use keys that can be of any data type. In other words,\ndictionary keys are not limited to values of type String."]}),"\n",(0,r.jsx)(t.h2,{id:"associative-arrays-with-string-keys",children:"Associative arrays with string keys"}),"\n",(0,r.jsxs)(t.p,{children:["There are two ways to create associative arrays in ActionScript 3.0. The first\nway is to use an Object instance. By using an Object instance you can initialize\nyour array with an object literal. An instance of the Object class, also called\na ",(0,r.jsx)(t.em,{children:"generic object"}),", is functionally identical to an associative array. Each\nproperty name of the generic object serves as the key that provides access to a\nstored value."]}),"\n",(0,r.jsxs)(t.p,{children:["The following example creates an associative array named ",(0,r.jsx)(t.code,{children:"monitorInfo"}),", using an\nobject literal to initialize the array with two key and value pairs:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'var monitorInfo:Object = {type:"Flat Panel", resolution:"1600 x 1200"};\ntrace(monitorInfo["type"], monitorInfo["resolution"]);\n// output: Flat Panel 1600 x 1200\n'})}),"\n",(0,r.jsx)(t.p,{children:"If you do not need to initialize the array at declaration time, you can use the\nObject constructor to create the array, as follows:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"var monitorInfo:Object = new Object();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["After the array is created using either an object literal or the Object class\nconstructor, you can add new values to the array using either the array access\n(",(0,r.jsx)(t.code,{children:"[]"}),") operator or the dot operator (",(0,r.jsx)(t.code,{children:"."}),"). The following example adds two new\nvalues to ",(0,r.jsx)(t.code,{children:"monitorArray"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'monitorInfo["aspect ratio"] = "16:10"; // bad form, do not use spaces\nmonitorInfo.colors = "16.7 million";\ntrace(monitorInfo["aspect ratio"], monitorInfo.colors);\n// output: 16:10 16.7 million\n'})}),"\n",(0,r.jsxs)(t.p,{children:["Note that the key named ",(0,r.jsx)(t.code,{children:"aspect ratio"})," contains a space character. This is\npossible with the array access ( ",(0,r.jsx)(t.code,{children:"[]"}),") operator, but generates an error if\nattempted with the dot operator. Using spaces in your key names is not\nrecommended."]}),"\n",(0,r.jsxs)(t.p,{children:["The second way to create an associative array is to use the Array constructor\n(or the constructor of any dynamic class) and then use either the array access\n(",(0,r.jsx)(t.code,{children:"[]"}),") operator or the dot operator (",(0,r.jsx)(t.code,{children:"."}),") to add key and value pairs to the\narray. If you declare your associative array to be of type Array, you cannot use\nan object literal to initialize the array. The following example creates an\nassociative array named ",(0,r.jsx)(t.code,{children:"monitorInfo"})," using the Array constructor and adds a key\ncalled ",(0,r.jsx)(t.code,{children:"type"})," and a key called ",(0,r.jsx)(t.code,{children:"resolution"}),", along with their values:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'var monitorInfo:Array = new Array();\nmonitorInfo["type"] = "Flat Panel";\nmonitorInfo["resolution"] = "1600 x 1200";\ntrace(monitorInfo["type"], monitorInfo["resolution"]);\n// output: Flat Panel 1600 x 1200\n'})}),"\n",(0,r.jsxs)(t.p,{children:["There is no advantage in using the Array constructor to create an associative\narray. You cannot use the ",(0,r.jsx)(t.code,{children:"Array.length"})," property or any of the methods of the\nArray class with associative arrays, even if you use the Array constructor or\nthe Array data type. The use of the Array constructor is best left for the\ncreation of indexed arrays."]}),"\n",(0,r.jsx)(t.h2,{id:"associative-arrays-with-object-keys-dictionaries",children:"Associative arrays with object keys (Dictionaries)"}),"\n",(0,r.jsx)(t.p,{children:"You can use the Dictionary class to create an associative array that uses\nobjects for keys rather than strings. Such arrays are sometimes called\ndictionaries, hashes, or maps. For example, consider an application that\ndetermines the location of a Sprite object based on its association with a\nspecific container. You can use a Dictionary object to map each Sprite object to\na container."}),"\n",(0,r.jsxs)(t.p,{children:["The following code creates three instances of the Sprite class that serve as\nkeys for the Dictionary object. Each key is assigned a value of either ",(0,r.jsx)(t.code,{children:"GroupA"}),"\nor ",(0,r.jsx)(t.code,{children:"GroupB"}),". The values can be of any data type, but in this example both\n",(0,r.jsx)(t.code,{children:"GroupA"})," and ",(0,r.jsx)(t.code,{children:"GroupB"})," are instances of the Object class. Subsequently, you can\naccess the value associated with each key with the array access (",(0,r.jsx)(t.code,{children:"[]"}),") operator,\nas shown in the following code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"import flash.display.Sprite;\nimport flash.utils.Dictionary;\n\nvar groupMap:Dictionary = new Dictionary();\n\n// objects to use as keys\nvar spr1:Sprite = new Sprite();\nvar spr2:Sprite = new Sprite();\nvar spr3:Sprite = new Sprite();\n\n// objects to use as values\nvar groupA:Object = new Object();\nvar groupB:Object = new Object();\n\n// Create new key-value pairs in dictionary.\ngroupMap[spr1] = groupA;\ngroupMap[spr2] = groupB;\ngroupMap[spr3] = groupB;\n\nif (groupMap[spr1] == groupA)\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:'trace("spr1 is in groupA");'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"}\nif (groupMap[spr2] == groupB)\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:'trace("spr2 is in groupB");'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"}\nif (groupMap[spr3] == groupB)\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:'trace("spr3 is in groupB");'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"}\n"})}),"\n",(0,r.jsx)(t.h4,{id:"iterating-with-object-keys",children:"Iterating with object keys"}),"\n",(0,r.jsxs)(t.p,{children:["You can iterate through the contents of a Dictionary object with either a\n",(0,r.jsx)(t.code,{children:"for..in"})," loop or a ",(0,r.jsx)(t.code,{children:"for each..in"})," loop. A ",(0,r.jsx)(t.code,{children:"for..in"})," loop allows you to iterate\nbased on the keys, whereas a ",(0,r.jsx)(t.code,{children:"for each..in"})," loop allows you to iterate based on\nthe values associated with each key."]}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"for..in"})," loop for direct access to the object keys of a Dictionary\nobject. You can also access the values of the Dictionary object with the array\naccess (",(0,r.jsx)(t.code,{children:"[]"}),") operator. The following code uses the previous example of the\n",(0,r.jsx)(t.code,{children:"groupMap"})," dictionary to show how to iterate through a Dictionary object with\nthe ",(0,r.jsx)(t.code,{children:"for..in"})," loop:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"for (var key:Object in groupMap)\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:"trace(key, groupMap[key]);"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"}\n/* output:\n[object Sprite] [object Object]\n[object Sprite] [object Object]\n[object Sprite] [object Object]\n"})}),"\n",(0,r.jsx)(t.p,{children:"*/"}),"\n",(0,r.jsxs)(t.p,{children:["Use the ",(0,r.jsx)(t.code,{children:"for each..in"})," loop for direct access to the values of a Dictionary\nobject. The following code also uses the ",(0,r.jsx)(t.code,{children:"groupMap"})," dictionary to show how to\niterate through a Dictionary object with the ",(0,r.jsx)(t.code,{children:"for each..in"})," loop:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"for each (var item:Object in groupMap)\n{\n"})}),"\n",(0,r.jsx)(t.p,{children:"trace(item);"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"}\n/* output:\n[object Object]\n[object Object]\n[object Object]\n"})}),"\n",(0,r.jsx)(t.p,{children:"*/"}),"\n",(0,r.jsx)(t.h4,{id:"object-keys-and-memory-management",children:"Object keys and memory management"}),"\n",(0,r.jsxs)(t.p,{children:["Adobe\xae Flash\xae Player and Adobe\xae AIR\u2122 use a garbage collection system to recover\nmemory that is no longer used. When an object has no references pointing to it,\nthe object becomes eligible for garbage collection, and the memory is recovered\nthe next time the garbage collection system executes. For example, the following\ncode creates a new object and assigns a reference to the object to the variable\n",(0,r.jsx)(t.code,{children:"myObject"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"var myObject:Object = new Object();\n"})}),"\n",(0,r.jsxs)(t.p,{children:["As long as any reference to the object exists, the garbage collection system\nwill not recover the memory that the object occupies. If the value of ",(0,r.jsx)(t.code,{children:"myObject"}),"\nis changed such that it points to a different object or is set to the value\n",(0,r.jsx)(t.code,{children:"null"}),", the memory occupied by the original object becomes eligible for garbage\ncollection, but only if there are no other references to the original object."]}),"\n",(0,r.jsxs)(t.p,{children:["If you use ",(0,r.jsx)(t.code,{children:"myObject"})," as a key in a Dictionary object, you are creating another\nreference to the original object. For example, the following code creates two\nreferences to an object\u2014the ",(0,r.jsx)(t.code,{children:"myObject"})," variable, and the key in the ",(0,r.jsx)(t.code,{children:"myMap"}),"\nobject:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'import flash.utils.Dictionary;\n\nvar myObject:Object = new Object();\nvar myMap:Dictionary = new Dictionary();\nmyMap[myObject] = "foo";\n'})}),"\n",(0,r.jsxs)(t.p,{children:["To make the object referenced by ",(0,r.jsx)(t.code,{children:"myObject"})," eligible for garbage collection, you\nmust remove all references to it. In this case, you must change the value of\n",(0,r.jsx)(t.code,{children:"myObject"})," and delete the ",(0,r.jsx)(t.code,{children:"myObject"})," key from ",(0,r.jsx)(t.code,{children:"myMap"}),", as shown in the following\ncode:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"myObject = null;\ndelete myMap[myObject];\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Alternatively, you can use the ",(0,r.jsx)(t.code,{children:"useWeakReference"})," parameter of the Dictionary\nconstructor to make all of the dictionary keys ",(0,r.jsx)(t.em,{children:"weak references"}),". The garbage\ncollection system ignores weak references, which means that an object that has\nonly weak references is eligible for garbage collection. For example, in the\nfollowing code, you do not need to delete the ",(0,r.jsx)(t.code,{children:"myObject"})," key from ",(0,r.jsx)(t.code,{children:"myMap"})," in\norder to make the object eligible for garbage collection:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'import flash.utils.Dictionary;\n\nvar myObject:Object = new Object();\nvar myMap:Dictionary = new Dictionary(true);\nmyMap[myObject] = "foo";\nmyObject = null; // Make object eligible for garbage collection.\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);