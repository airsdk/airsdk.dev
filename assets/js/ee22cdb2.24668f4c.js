"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[45172],{16524:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database","title":"Connecting to a database","description":"Before you can perform any database operations, first open a connection to the","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database.md","tags":[],"version":"current","sidebarPosition":7.1,"frontMatter":{"sidebar_position":7.1},"sidebar":"mainSidebar","previous":{"title":"Strategies for working with SQL databases","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/strategies-for-working-with-sql-databases"},"next":{"title":"Working with SQL statements","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements"}}');var a=n(74848),i=n(28453);const r={sidebar_position:7.1},s="Connecting to a database",d={},c=[];function l(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"connecting-to-a-database",children:"Connecting to a database"})}),"\n",(0,a.jsxs)(t.p,{children:["Before you can perform any database operations, first open a connection to the\ndatabase file. A\n",(0,a.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),'\ninstance is used to represent a connection to one or more databases. The first\ndatabase that is connected using a SQLConnection instance is known as the "main"\ndatabase. This database is connected using the ',(0,a.jsx)(t.code,{children:"open()"})," method (for synchronous\nexecution mode) or the ",(0,a.jsx)(t.code,{children:"openAsync()"})," method (for asynchronous execution mode)."]}),"\n",(0,a.jsxs)(t.p,{children:["If you open a database using the asynchronous ",(0,a.jsx)(t.code,{children:"openAsync()"})," operation, register\nfor the SQLConnection instance's ",(0,a.jsx)(t.code,{children:"open"})," event in order to know when the\n",(0,a.jsx)(t.code,{children:"openAsync()"})," operation completes. Register for the SQLConnection instance's\n",(0,a.jsx)(t.code,{children:"error"})," event to determine if the operation fails."]}),"\n",(0,a.jsxs)(t.p,{children:['The following example shows how to open an existing database file for\nasynchronous execution. The database file is named "DBSample.db" and is located\nin the user\'s\n',(0,a.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#pointing-to-the-application-storage-directory",children:"Pointing to the application storage directory"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLMode;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\nconn.addEventListener(SQLEvent.OPEN, openHandler);\nconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\nconn.openAsync(dbFile, SQLMode.UPDATE);\n\nfunction openHandler(event:SQLEvent):void\n{\n\ttrace("the database opened successfully");\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n\ttrace("Error message:", event.error.message);\n\ttrace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLMode;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\t\t\timport flash.filesystem.File;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar conn:SQLConnection = new SQLConnection();\n\n\t\t\t\tconn.addEventListener(SQLEvent.OPEN, openHandler);\n\t\t\t\tconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n\t\t\t\t// The database file is in the application storage directory\n\t\t\t\tvar folder:File = File.applicationStorageDirectory;\n\t\t\t\tvar dbFile:File = folder.resolvePath("DBSample.db");\n\n\t\t\t\tconn.openAsync(dbFile, SQLMode.UPDATE);\n\t\t\t}\n\n\t\t\tprivate function openHandler(event:SQLEvent):void\n\t\t\t{\n\t\t\t\ttrace("the database opened successfully");\n\t\t\t}\n\n\t\t\tprivate function errorHandler(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\ttrace("Error message:", event.error.message);\n\t\t\t\ttrace("Details:", event.error.details);\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,a.jsxs)(t.p,{children:['The following example shows how to open an existing database file for\nsynchronous execution. The database file is named "DBSample.db" and is located\nin the user\'s\n',(0,a.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/working-with-file-objects-in-air#pointing-to-the-application-storage-directory",children:"Pointing to the application storage directory"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLMode;\nimport flash.errors.SQLError;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\ntry\n{\n\tconn.open(dbFile, SQLMode.UPDATE);\n\ttrace("the database opened successfully");\n}\ncatch (error:SQLError)\n{\n\ttrace("Error message:", error.message);\n\ttrace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLMode;\n\t\t\timport flash.errors.SQLError;\n\t\t\timport flash.filesystem.File;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar conn:SQLConnection = new SQLConnection();\n\n\t\t\t\t// The database file is in the application storage directory\n\t\t\t\tvar folder:File = File.applicationStorageDirectory;\n\t\t\t\tvar dbFile:File = folder.resolvePath("DBSample.db");\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tconn.open(dbFile, SQLMode.UPDATE);\n\t\t\t\t\ttrace("the database opened successfully");\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\ttrace("Error message:", error.message);\n\t\t\t\t\ttrace("Details:", error.details);\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Notice that in the ",(0,a.jsx)(t.code,{children:"openAsync()"})," method call in the asynchronous example, and\nthe ",(0,a.jsx)(t.code,{children:"open()"})," method call in the synchronous example, the second argument is the\nconstant ",(0,a.jsx)(t.code,{children:"SQLMode.UPDATE"}),". Specifying ",(0,a.jsx)(t.code,{children:"SQLMode.UPDATE"})," for the second parameter\n( ",(0,a.jsx)(t.code,{children:"openMode"}),") causes the runtime to dispatch an error if the specified file\ndoesn't exist. If you pass ",(0,a.jsx)(t.code,{children:"SQLMode.CREATE"})," for the ",(0,a.jsx)(t.code,{children:"openMode"})," parameter (or if\nyou leave the ",(0,a.jsx)(t.code,{children:"openMode"})," parameter off), the runtime attempts to create a\ndatabase file if the specified file doesn't exist. However, if the file exists\nit is opened, which is the same as if you use ",(0,a.jsx)(t.code,{children:"SQLMode.Update"}),". You can also\nspecify ",(0,a.jsx)(t.code,{children:"SQLMode.READ"})," for the ",(0,a.jsx)(t.code,{children:"openMode"})," parameter to open an existing database\nin a read-only mode. In that case data can be retrieved from the database but no\ndata can be added, deleted, or changed."]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(96540);const a={},i=o.createContext(a);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);