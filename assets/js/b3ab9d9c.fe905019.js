"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[65556],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}},59726:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface","title":"Implementing the IFilePromise interface","description":"To provide file promises for resources that cannot be accessed using a","source":"@site/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface.md","sourceDirName":"development/user-interaction/drag-and-drop-in-air/dropping-file-promises","slug":"/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Dropping remote files","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files"},"next":{"title":"Working with menus","permalink":"/docs/development/user-interaction/working-with-menus/"}}');var i=n(74848),s=n(28453);const a={sidebar_position:2},o="Implementing the IFilePromise interface",c={},l=[{value:"Using a synchronous data provider in a file promise",id:"using-a-synchronous-data-provider-in-a-file-promise",level:2},{value:"Using an asynchronous data provider in a file promise",id:"using-an-asynchronous-data-provider-in-a-file-promise",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"implementing-the-ifilepromise-interface",children:"Implementing the IFilePromise interface"})}),"\n",(0,i.jsx)(t.p,{children:"To provide file promises for resources that cannot be accessed using a\nURLFilePromise object, you can implement the IFilePromise interface in a custom\nclass. The IFilePromise interface defines the methods and properties used by the\nAIR runtime to access the data to be written to a file once the file promise is\ndropped."}),"\n",(0,i.jsx)(t.p,{children:"An IFilePromise implementation passes another object to the AIR runtime that\nprovides the data for the file promise. This object must implement the\nIDataInput interface, which the AIR runtime uses to read the data. For example,\nthe URLFilePromise class, which implements IFilePromise, uses a URLStream object\nas the data provider."}),"\n",(0,i.jsxs)(t.p,{children:["AIR can read the data synchronously or asynchronously. The IFilePromise\nimplementation reports which mode of access is supported by returning the\nappropriate value in the ",(0,i.jsx)(t.code,{children:"isAsync"})," property. If asynchronous data access is\nprovided, the data provider object must implement the IEventDispatcher interface\nand dispatch the necessary events, such as ",(0,i.jsx)(t.code,{children:"open"}),", ",(0,i.jsx)(t.code,{children:"progress"})," and ",(0,i.jsx)(t.code,{children:"complete"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"You can use a custom class, or one of the following built-in classes, as a data\nprovider for a file promise:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"ByteArray (synchronous)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"FileStream (synchronous or asynchronous)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Socket (asynchronous)"}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"URLStream (asynchronous)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"To implement the IFilePromise interface, you must provide code for the following\nfunctions and properties:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"open():IDataInput"})," \u2014 Returns the data provider object from which the data for\nthe promised file is read. The object must implement the IDataInput interface.\nIf the data is provided asynchronously, the object must also implement the\nIEventDispatcher interface and dispatch the necessary events (see\n",(0,i.jsx)(t.a,{href:"#using-an-asynchronous-data-provider-in-a-file-promise",children:"Using an asynchronous data provider in a file promise"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"get relativePath():String"})," \u2014 Provides the path, including file name, for the\ncreated file. The path is resolved relative to the drop location chosen by the\nuser in the drag-and-drop operation. To make sure that the path uses the\nproper separator character for the host operating system, use the\n",(0,i.jsx)(t.code,{children:"File.separator"})," constant when specifying paths containing directories. You\ncan add a setter function or use a constructor parameter to allow the path to\nbe set at runtime."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"get isAsync():Boolean"})," \u2014 Informs the AIR runtime whether the data provider\nobject provides it's data asynchronously or synchronously."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"close():void"})," \u2014 Called by the runtime when the data is fully read (or an\nerror prevents further reading). You can use this function to cleanup\nresources."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"reportError( e:ErrorEvent ):void"})," \u2014 Called by the runtime when an error\nreading the data occurs."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"All of the IFilePromise methods are called by the runtime during a drag-and-drop\noperation involving the file promise. Typically, your application logic should\nnot call any of these methods directly."}),"\n",(0,i.jsx)(t.h2,{id:"using-a-synchronous-data-provider-in-a-file-promise",children:"Using a synchronous data provider in a file promise"}),"\n",(0,i.jsxs)(t.p,{children:["The simplest way to implement the IFilePromise interface is to use a synchronous\ndata provider object, such as a ByteArray or a synchronous FileStream. In the\nfollowing example, a ByteArray object is created, filled with data, and returned\nwhen the ",(0,i.jsx)(t.code,{children:"open()"})," method is called."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'package\n{\n\timport flash.desktop.IFilePromise;\n\timport flash.events.ErrorEvent;\n\timport flash.utils.ByteArray;\n\timport flash.utils.IDataInput;\n\n\tpublic class SynchronousFilePromise implements IFilePromise\n\t{\n\t\tprivate const fileSize:int = 5000; //size of file data\n\t\tprivate var filePath:String = "SynchronousFile.txt";\n\n\t\tpublic function get relativePath():String\n\t\t{\n\t\t\treturn filePath;\n\t\t}\n\n\t\tpublic function get isAsync():Boolean\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic function open():IDataInput\n\t\t{\n\t\t\tvar fileContents:ByteArray = new ByteArray();\n\n\t\t\t//Create some arbitrary data for the file\n\t\t\tfor( var i:int = 0; i < fileSize; i++ )\n\t\t\t{\n\t\t\t\tfileContents.writeUTFBytes( \'S\' );\n\t\t\t}\n\n\t\t\t//Important: the ByteArray is read from the current position\n\t\t\tfileContents.position = 0;\n\t\t\treturn fileContents;\n\t\t}\n\n\t\tpublic function close():void\n\t\t{\n\t\t\t//Nothing needs to be closed in this case.\n\t\t}\n\n\t\tpublic function reportError(e:ErrorEvent):void\n\t\t{\n\t\t\ttrace("Something went wrong: " + e.errorID + " - " + e.type + ", " + e.text );\n\t\t}\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"In practice, synchronous file promises have limited utility. If the amount of\ndata is small, you could just as easily create a file in a temporary directory\nand add a normal file list array to the drag-and-drop clipboard. On the other\nhand, if the amount of data is large or generating the data is computationally\nexpensive, a long synchronous process is necessary. Long synchronous processes\ncan block UI updates for a noticeable amount of time and make your application\nseem unresponsive. To avoid this problem, you can create an asynchronous data\nprovider driven by a timer."}),"\n",(0,i.jsx)(t.h2,{id:"using-an-asynchronous-data-provider-in-a-file-promise",children:"Using an asynchronous data provider in a file promise"}),"\n",(0,i.jsxs)(t.p,{children:["When you use an asynchronous data provider object, the IFilePromise ",(0,i.jsx)(t.code,{children:"isAsync"}),"\nproperty must be ",(0,i.jsx)(t.code,{children:"true"})," and the object returned by the ",(0,i.jsx)(t.code,{children:"open()"})," method must\nimplement the IEventDispatcher interface. The runtime listens for several\nalternative events so that different built-in objects can be used as a data\nprovider. For example, ",(0,i.jsx)(t.code,{children:"progress"})," events are dispatched by FileStream and\nURLStream objects, whereas ",(0,i.jsx)(t.code,{children:"socketData"})," events are dispatched by Socket objects.\nThe runtime listens for the appropriate events from all of these objects."]}),"\n",(0,i.jsx)(t.p,{children:"The following events drive the process of reading the data from the data\nprovider object:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Event.OPEN \u2014 Informs the runtime that the data source is ready."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"ProgressEvent.PROGRESS \u2014 Informs the runtime that data is available. The\nruntime will read the amount of available data from the data provider object."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["ProgressEvent.SOCKET_DATA \u2014 Informs the runtime that data is available. The\n",(0,i.jsx)(t.code,{children:"socketData"})," event is dispatched by socket-based objects. For other object\ntypes, you should dispatch a ",(0,i.jsx)(t.code,{children:"progress"})," event. (The runtime listens for both\nevents to detect when data can be read.)"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Event.COMPLETE \u2014 Informs the runtime that the data has all been read."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Event.CLOSE \u2014 Informs the runtime that the data has all been read. (The\nruntime listens for both ",(0,i.jsx)(t.code,{children:"close"})," and ",(0,i.jsx)(t.code,{children:"complete"})," for this purpose.)"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["IOErrorEvent.IOERROR \u2014 Informs the runtime that an error reading the data has\noccurred. The runtime aborts file creation and calls the IFilePromise\n",(0,i.jsx)(t.code,{children:"close()"})," method."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["SecurityErrorEvent.SECURITY_ERROR \u2014 Informs the runtime that a security error\nhas occurred. The runtime aborts file creation and calls the IFilePromise\n",(0,i.jsx)(t.code,{children:"close()"})," method."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["HTTPStatusEvent.HTTP_STATUS \u2014 Used, along with ",(0,i.jsx)(t.code,{children:"httpResponseStatus"}),", by the\nruntime to make sure that the data available represents the desired content,\nrather than an error message (such as a 404 page). Objects based on the HTTP\nprotocol should dispatch this event."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["HTTPStatusEvent.HTTP_RESPONSE_STATUS \u2014 Used, along with ",(0,i.jsx)(t.code,{children:"httpStatus"}),", by the\nruntime to make sure that the data available represents the desired content.\nObjects based on the HTTP protocol should dispatch this event."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The data provider should dispatch these events in the following sequence:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"open"})," event"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"progress"})," or ",(0,i.jsx)(t.code,{children:"socketData"})," events"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"complete"})," or ",(0,i.jsx)(t.code,{children:"close"})," event"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Note: The built-in objects, FileStream, Socket, and URLStream, dispatch the\nappropriate events automatically."}),"\n",(0,i.jsx)(t.p,{children:"The following example creates a file promise using a custom, asynchronous data\nprovider. The data provider class extends ByteArray (for the IDataInput support)\nand implements the IEventDispatcher interface. At each timer event, the object\ngenerates a chunk of data and dispatches a progress event to inform the runtime\nthat the data is available. When enough data has been produced, the object\ndispatches a complete event."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'package\n{\n\timport flash.events.Event;\n\timport flash.events.EventDispatcher;\n\timport flash.events.IEventDispatcher;\n\timport flash.events.ProgressEvent;\n\timport flash.events.TimerEvent;\n\timport flash.utils.ByteArray;\n\timport flash.utils.Timer;\n\n\t[Event(name="open", type="flash.events.Event.OPEN")]\n\t[Event(name="complete",  type="flash.events.Event.COMPLETE")]\n\t[Event(name="progress", type="flash.events.ProgressEvent")]\n\t[Event(name="ioError", type="flash.events.IOErrorEvent")]\n\t[Event(name="securityError", type="flash.events.SecurityErrorEvent")]\n\tpublic class AsyncDataProvider extends ByteArray implements IEventDispatcher\n\t{\n\t\tprivate var dispatcher:EventDispatcher = new EventDispatcher();\n\t\tpublic var fileSize:int = 0; //The number of characters in the file\n\t\tprivate const chunkSize:int = 1000; //Amount of data written per event\n\t\tprivate var dispatchDataTimer:Timer = new Timer( 100 );\n\t\tprivate var opened:Boolean = false;\n\n\t\tpublic function AsyncDataProvider()\n\t\t{\n\t\t\tsuper();\n\t\t\tdispatchDataTimer.addEventListener( TimerEvent.TIMER, generateData );\n\t\t}\n\n\t\tpublic function begin():void{\n\t\t\tdispatchDataTimer.start();\n\t\t}\n\n\t\tpublic function end():void\n\t\t{\n\t\t\tdispatchDataTimer.stop();\n\t\t}\n\t\tprivate function generateData( event:Event ):void\n\t\t{\n\t\t\tif( !opened )\n\t\t\t{\n\t\t\t\tvar open:Event = new Event( Event.OPEN );\n\t\t\t\tdispatchEvent( open );\n\t\t\t\topened = true;\n\t\t\t}\n\t\t\telse if( position + chunkSize < fileSize )\n\t\t\t{\n\t\t\t\tfor( var i:int = 0; i <= chunkSize; i++ )\n\t\t\t\t{\n\t\t\t\t\twriteUTFBytes( \'A\' );\n\t\t\t\t}\n\t\t\t\t//Set position back to the start of the new data\n\t\t\t\tthis.position -= chunkSize;\n\t\t\t\tvar progress:ProgressEvent =\n\t\t\t\t\tnew ProgressEvent( ProgressEvent.PROGRESS, false, false, bytesAvailable, bytesAvailable + chunkSize);\n\t\t\t\tdispatchEvent( progress )\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar complete:Event = new Event( Event.COMPLETE );\n\t\t\t\tdispatchEvent( complete );\n\t\t\t}\n\t\t}\n\t\t//IEventDispatcher implementation\n\t\tpublic function addEventListener(type:String, listener:Function, useCapture:Boolean=false, priority:int=0, useWeakReference:Boolean=false):void\n\t\t{\n\t\t\tdispatcher.addEventListener( type, listener, useCapture, priority, useWeakReference );\n\t\t}\n\n\t\tpublic function removeEventListener(type:String, listener:Function, useCapture:Boolean=false):void\n\t\t{\n\t\t\tdispatcher.removeEventListener( type, listener, useCapture );\n\t\t}\n\n\t\tpublic function dispatchEvent(event:Event):Boolean\n\t\t{\n\t\t\treturn dispatcher.dispatchEvent( event );\n\t\t}\n\n\t\tpublic function hasEventListener(type:String):Boolean\n\t\t{\n\t\t\treturn dispatcher.hasEventListener( type );\n\t\t}\n\n\t\tpublic function willTrigger(type:String):Boolean\n\t\t{\n\t\t\treturn dispatcher.willTrigger( type );\n\t\t}\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Note: Because the AsyncDataProvider class in the example extends ByteArray, it\ncannot also extend EventDispatcher. To implement the IEventDispatcher interface,\nthe class uses an internal EventDispatcher object and forwards the\nIEventDispatcher method calls to that internal object. You could also extend\nEventDispatcher and implement IDataInput (or implement both interfaces)."}),"\n",(0,i.jsxs)(t.p,{children:["The asynchronous IFilePromise implementation is almost identical to the\nsynchronous implementation. The main differences are that ",(0,i.jsx)(t.code,{children:"isAsync"})," returns\n",(0,i.jsx)(t.code,{children:"true"})," and that the ",(0,i.jsx)(t.code,{children:"open()"})," method returns an asynchronous data object:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'package\n{\n\timport flash.desktop.IFilePromise;\n\timport flash.events.ErrorEvent;\n\timport flash.events.EventDispatcher;\n\timport flash.utils.IDataInput;\n\n\tpublic class AsynchronousFilePromise extends EventDispatcher implements IFilePromise\n\t{\n\t\tprivate var fileGenerator:AsyncDataProvider;\n\t\tprivate const fileSize:int = 5000; //size of file data\n\t\tprivate var filePath:String = "AsynchronousFile.txt";\n\n\t\tpublic function get relativePath():String\n\t\t{\n\t\t\treturn filePath;\n\t\t}\n\n\t\tpublic function get isAsync():Boolean\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic function open():IDataInput\n\t\t{\n\t\t\tfileGenerator = new AsyncDataProvider();\n\t\t\tfileGenerator.fileSize = fileSize;\n\t\t\tfileGenerator.begin();\n\t\t\treturn fileGenerator;\n\t\t}\n\n\t\tpublic function close():void\n\t\t{\n\t\t\tfileGenerator.end();\n\t\t}\n\n\t\tpublic function reportError(e:ErrorEvent):void\n\t\t{\n\t\t\ttrace("Something went wrong: " + e.errorID + " - " + e.type + ", " + e.text );\n\t\t}\n\t}\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);