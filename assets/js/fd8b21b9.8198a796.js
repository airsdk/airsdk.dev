"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[24563],{28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},65732:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"development/core-actionscript-classes/working-with-strings/comparing-strings","title":"Comparing strings","description":"You can use the following operators to compare strings: <, <=, !=, ==,","source":"@site/docs/development/core-actionscript-classes/working-with-strings/comparing-strings.md","sourceDirName":"development/core-actionscript-classes/working-with-strings","slug":"/development/core-actionscript-classes/working-with-strings/comparing-strings","permalink":"/docs/development/core-actionscript-classes/working-with-strings/comparing-strings","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-strings/comparing-strings.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Working with characters in strings","permalink":"/docs/development/core-actionscript-classes/working-with-strings/working-with-characters-in-strings"},"next":{"title":"Obtaining string representations of other objects","permalink":"/docs/development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects"}}');var s=n(74848),i=n(28453);const o={sidebar_position:5},c="Comparing strings",a={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"comparing-strings",children:"Comparing strings"})}),"\n",(0,s.jsxs)(t.p,{children:["You can use the following operators to compare strings: ",(0,s.jsx)(t.code,{children:"<"}),", ",(0,s.jsx)(t.code,{children:"<="}),", ",(0,s.jsx)(t.code,{children:"!="}),", ",(0,s.jsx)(t.code,{children:"=="}),",\n",(0,s.jsx)(t.code,{children:"=>"}),", and ",(0,s.jsx)(t.code,{children:">"}),". These operators can be used with conditional statements, such as\n",(0,s.jsx)(t.code,{children:"if"})," and ",(0,s.jsx)(t.code,{children:"while"}),", as the following example shows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'var str1:String = "Apple";\nvar str2:String = "apple";\nif (str1 < str2)\n{\n'})}),"\n",(0,s.jsx)(t.p,{children:'trace("A < a, B < b, C < c, ...");'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"When using these operators with strings, ActionScript considers the character\ncode value of each character in the string, comparing characters from left to\nright, as in the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'trace("A" < "B"); // true\ntrace("A" < "a"); // true\ntrace("Ab" < "az"); // true\ntrace("abc" < "abza"); // true\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Use the ",(0,s.jsx)(t.code,{children:"=="})," and ",(0,s.jsx)(t.code,{children:"!="})," operators to compare strings with each other and to\ncompare strings with other types of objects, as the following example shows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'var str1:String = "1";\nvar str1b:String = "1";\nvar str2:String = "2";\ntrace(str1 == str1b); // true\ntrace(str1 == str2); // false\nvar total:uint = 1;\ntrace(str1 == total); // true\n'})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);