"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[39927],{7113:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning","title":"Controlling sound volume and panning","description":"An individual SoundChannel object controls both the left and the right stereo","source":"@site/docs/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning.md","sourceDirName":"development/rich-media-content/working-with-sound","slug":"/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning","permalink":"/docs/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"mainSidebar","previous":{"title":"Security considerations when loading and playing sounds","permalink":"/docs/development/rich-media-content/working-with-sound/security-considerations-when-loading-and-playing-sounds"},"next":{"title":"Working with sound metadata","permalink":"/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata"}}');var a=o(74848),r=o(28453);const s={sidebar_position:9},d="Controlling sound volume and panning",l={},i=[];function h(n){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"controlling-sound-volume-and-panning",children:"Controlling sound volume and panning"})}),"\n",(0,a.jsx)(e.p,{children:"An individual SoundChannel object controls both the left and the right stereo\nchannels for a sound. If an mp3 sound is a monaural sound, the left and right\nstereo channels of the SoundChannel object will contain identical waveforms."}),"\n",(0,a.jsxs)(e.p,{children:["You can find out the amplitude of each stereo channel of the sound being played\nusing the ",(0,a.jsx)(e.code,{children:"leftPeak"})," and ",(0,a.jsx)(e.code,{children:"rightPeak"})," properties of the SoundChannel object.\nThese properties show the peak amplitude of the sound waveform itself. They do\nnot represent the actual playback volume. The actual playback volume is a\nfunction of the amplitude of the sound wave and the volume values set in the\nSoundChannel object and the SoundMixer class."]}),"\n",(0,a.jsx)(e.p,{children:"The pan property of a SoundChannel object can be used to specify a different\nvolume level for each of the left and right channels during playback. The pan\nproperty can have a value ranging from -1 to 1, where -1 means the left channel\nplays at top volume while the right channel is silent, and 1 means the right\nchannel plays at top volume while the left channel is silent. Numeric values in\nbetween -1 and 1 set proportional values for the left and right channel values,\nand a value of 0 means that both channels play at a balanced, mid-volume level."}),"\n",(0,a.jsxs)(e.p,{children:["The following code example creates a SoundTransform object with a volume value\nof 0.6 and a pan value of -1 (top left channel volume and no right channel\nvolume). It passes the SoundTransform object as a parameter to the ",(0,a.jsx)(e.code,{children:"play()"}),"\nmethod, which applies that SoundTransform object to the new SoundChannel object\nthat is created to control the playback."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'var snd:Sound = new Sound(new URLRequest("bigSound.mp3"));\nvar trans:SoundTransform = new SoundTransform(0.6, -1);\nvar channel:SoundChannel = snd.play(0, 1, trans);\n'})}),"\n",(0,a.jsxs)(e.p,{children:["You can alter the volume and panning while a sound is playing by setting the\n",(0,a.jsx)(e.code,{children:"pan"})," or ",(0,a.jsx)(e.code,{children:"volume"})," properties of a SoundTransform object and then applying that\nobject as the ",(0,a.jsx)(e.code,{children:"soundTransform"})," property of a SoundChannel object."]}),"\n",(0,a.jsxs)(e.p,{children:["You can also set global volume and pan values for all sounds at once using the\n",(0,a.jsx)(e.code,{children:"soundTransform"})," property of the SoundMixer class, as the following example\nshows:"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:"SoundMixer.soundTransform = new SoundTransform(1, -1);\n"})}),"\n",(0,a.jsxs)(e.p,{children:["You can also use a SoundTransform object to set volume and pan values for a\nMicrophone object (see ",(0,a.jsx)(e.a,{href:"/docs/development/rich-media-content/working-with-sound/capturing-sound-input",children:"Capturing sound input"}),") and\nfor Sprite objects and SimpleButton objects."]}),"\n",(0,a.jsx)(e.p,{children:"The following example alternates the panning of the sound from the left channel\nto the right channel and back while the sound plays."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{children:'import flash.events.Event;\nimport flash.media.Sound;\nimport flash.media.SoundChannel;\nimport flash.media.SoundMixer;\nimport flash.net.URLRequest;\n\nvar snd:Sound = new Sound();\nvar req:URLRequest = new URLRequest("bigSound.mp3");\nsnd.load(req);\n\nvar panCounter:Number = 0;\n\nvar trans:SoundTransform;\ntrans = new SoundTransform(1, 0);\nvar channel:SoundChannel = snd.play(0, 1, trans);\nchannel.addEventListener(Event.SOUND_COMPLETE, onPlaybackComplete);\n\naddEventListener(Event.ENTER_FRAME, onEnterFrame);\n\nfunction onEnterFrame(event:Event):void\n{\n\ttrans.pan = Math.sin(panCounter);\n\tchannel.soundTransform = trans; // or SoundMixer.soundTransform = trans;\n\tpanCounter += 0.05;\n}\n\nfunction onPlaybackComplete(event:Event):void\n{\n\tremoveEventListener(Event.ENTER_FRAME, onEnterFrame);\n}\n'})}),"\n",(0,a.jsxs)(e.p,{children:["This code starts by loading a sound file and then creating a new SoundTransform\nobject with volume set to 1 (full volume) and pan set to 0 (evenly balanced\nbetween left and right). Then it calls the ",(0,a.jsx)(e.code,{children:"snd.play()"})," method, passing the\nSoundTransform object as a parameter."]}),"\n",(0,a.jsxs)(e.p,{children:["While the sound plays, the ",(0,a.jsx)(e.code,{children:"onEnterFrame()"})," method executes repeatedly. The\n",(0,a.jsx)(e.code,{children:"onEnterFrame()"})," method uses the ",(0,a.jsx)(e.code,{children:"Math.sin()"})," function to generate a value\nbetween -1 and 1, a range that corresponds to the acceptable values of the\n",(0,a.jsx)(e.code,{children:"SoundTransform.pan"})," property. The SoundTransform object's ",(0,a.jsx)(e.code,{children:"pan"})," property is set\nto the new value, and then the channel's ",(0,a.jsx)(e.code,{children:"soundTransform"})," property is set to use\nthe altered SoundTransform object."]}),"\n",(0,a.jsx)(e.p,{children:"To run this example, replace the filename bigSound.mp3 with the name of a local\nmp3 file. Then run the example. You should hear the left channel volume getting\nlouder while the right channel volume gets softer, and vice versa."}),"\n",(0,a.jsxs)(e.p,{children:["In this example, the same effect could be achieved by setting the\n",(0,a.jsx)(e.code,{children:"soundTransform"})," property of the SoundMixer class. However, that would affect\nthe panning of all sounds currently playing, not just the single sound being\nplayed by this SoundChannel object."]})]})}function c(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},28453:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>d});var t=o(96540);const a={},r=t.createContext(a);function s(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);