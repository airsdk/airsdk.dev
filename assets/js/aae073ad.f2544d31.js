"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4163],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var a=t(96540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},67434:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases","title":"Using encryption with SQL databases","description":"All Adobe AIR applications share the same local database engine. Consequently,","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Understanding the asynchronous execution model","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model"},"next":{"title":"Strategies for working with SQL databases","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/strategies-for-working-with-sql-databases"}}');var r=t(74848),s=t(28453);const o={sidebar_position:5},i="Using encryption with SQL databases",c={},d=[{value:"Uses for an encrypted database",id:"uses-for-an-encrypted-database",level:2},{value:"Creating an encrypted database",id:"creating-an-encrypted-database",level:2},{value:"Connecting to an encrypted database",id:"connecting-to-an-encrypted-database",level:2},{value:"Changing the encryption key of a database",id:"changing-the-encryption-key-of-a-database",level:2},{value:"Considerations for using encryption with a database",id:"considerations-for-using-encryption-with-a-database",level:2},{value:"Example: Generating and using an encryption key",id:"example-generating-and-using-an-encryption-key",level:2},{value:"Using the EncryptionKeyGenerator class to obtain a secure encryption key",id:"using-the-encryptionkeygenerator-class-to-obtain-a-secure-encryption-key",level:3},{value:"Complete example code for generating and using an encryption key",id:"complete-example-code-for-generating-and-using-an-encryption-key",level:3},{value:"Flex example",id:"flex-example",level:4},{value:"Flash Professional example",id:"flash-professional-example",level:4},{value:"Understanding the EncryptionKeyGenerator class",id:"understanding-the-encryptionkeygenerator-class",level:3},{value:"Obtain and validate a strong password",id:"obtain-and-validate-a-strong-password",level:4},{value:"Expand the password to 256 bits",id:"expand-the-password-to-256-bits",level:4},{value:"Generate or retrieve a 256-bit salt value",id:"generate-or-retrieve-a-256-bit-salt-value",level:4},{value:"Combine the 256-bit password and salt using the XOR operator",id:"combine-the-256-bit-password-and-salt-using-the-xor-operator",level:4},{value:"Hash the key",id:"hash-the-key",level:4},{value:"Extract the encryption key from the hash",id:"extract-the-encryption-key-from-the-hash",level:4}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"using-encryption-with-sql-databases",children:"Using encryption with SQL databases"})}),"\n",(0,r.jsx)(n.p,{children:"All Adobe AIR applications share the same local database engine. Consequently,\nany AIR application can connect to, read from, and write to an unencrypted\ndatabase file. Starting with Adobe AIR 1.5, AIR includes the capability of\ncreating and connecting to encrypted database files. When you use an encrypted\ndatabase, in order to connect to the database an application must provide the\ncorrect encryption key. If the incorrect encryption key (or no key) is provided,\nthe application is not able to connect to the database. Consequently, the\napplication can't read data from the database or write to or change data in the\ndatabase."}),"\n",(0,r.jsx)(n.p,{children:"To use an encrypted database, you must create the database as an encrypted\ndatabase. With an existing encrypted database, you can open a connection to the\ndatabase. You can also change the encryption key of an encrypted database. Other\nthan creating and connecting to encrypted databases, the techniques for working\nwith an encrypted database are the same as for working with an unencrypted one.\nIn particular, executing SQL statements is the same regardless of whether a\ndatabase is encrypted or not."}),"\n",(0,r.jsx)(n.h2,{id:"uses-for-an-encrypted-database",children:"Uses for an encrypted database"}),"\n",(0,r.jsx)(n.p,{children:"Encryption is useful any time you want to restrict access to the information\nstored in a database. The database encryption functionality of Adobe AIR can be\nused for several purposes. The following are some examples of cases where you\nwould want to use an encrypted database:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A read-only cache of private application data downloaded from a server"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A local application store for private data that is synchronized with a server\n(data is sent to and loaded from the server)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Encrypted files used as the file format for documents created and edited by\nthe application. The files could be private to one user, or could be designed\nto be shared among all users of the application."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Any other use of a local data store, such as the ones described in\n",(0,r.jsx)(n.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/about-local-sql-databases#uses-for-local-sql-databases",children:"Uses for local SQL databases"}),",\nwhere the data must be kept private from people who have access to the machine\nor the database files."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Understanding the reason why you want to use an encrypted database helps you\ndecide how to architect your application. In particular, it can affect how your\napplication creates, obtains, and stores the encryption key for the database.\nFor more information about these considerations, see\n",(0,r.jsx)(n.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-encryption-with-sql-databases#considerations-for-using-encryption-with-a-database",children:"Considerations for using encryption with a database"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Other than an encrypted database, an alternative mechanism for keeping sensitive\ndata private is the\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/EncryptedLocalStore.html",children:"encrypted local store"}),".\nWith the encrypted local store, you store a single\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/utils/ByteArray.html",children:"ByteArray"}),"\nvalue using a String key. Only the AIR application that stores the value can\naccess it, and only on the computer on which it is stored. With the encrypted\nlocal store, it isn't necessary to create your own encryption key. For these\nreasons, the encrypted local store is most suitable for easily storing a single\nvalue or set of values that can easily be encoded in a ByteArray. An encrypted\ndatabase is most suitable for larger data sets where structured data storage and\nquerying are desirable. For more information about using the encrypted local\nstore, see\n",(0,r.jsx)(n.a,{href:"/docs/development/files-and-data/storing-local-data/encrypted-local-storage",children:"Encrypted local storage"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-encrypted-database",children:"Creating an encrypted database"}),"\n",(0,r.jsxs)(n.p,{children:["To use an encrypted database, the database file must be encrypted when it is\ncreated. Once a database is created as unencrypted, it can't be encrypted later.\nLikewise, an encrypted database can't be unencrypted later. If needed you can\nchange the encryption key of an encrypted database. For details, see\n",(0,r.jsx)(n.a,{href:"#changing-the-encryption-key-of-a-database",children:"Changing the encryption key of a database"}),".\nIf you have an existing database that's not encrypted and you want to use\ndatabase encryption, you can create a new encrypted database and copy the\nexisting table structure and data to the new database."]}),"\n",(0,r.jsxs)(n.p,{children:["Creating an encrypted database is nearly identical to creating an unencrypted\ndatabase, as described in\n",(0,r.jsx)(n.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/creating-and-modifying-a-database#creating-a-database",children:"Creating a database"}),".\nYou first create a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance that represents the connection to the database. You create the database\nby calling the SQLConnection object's ",(0,r.jsx)(n.code,{children:"open()"})," method or ",(0,r.jsx)(n.code,{children:"openAsync()"})," method,\nspecifying for the database location a file that doesn't exist yet. The only\ndifference when creating an encrypted database is that you provide a value for\nthe ",(0,r.jsx)(n.code,{children:"encryptionKey"})," parameter (the ",(0,r.jsx)(n.code,{children:"open()"})," method's fifth parameter and the\n",(0,r.jsx)(n.code,{children:"openAsync()"})," method's sixth parameter)."]}),"\n",(0,r.jsxs)(n.p,{children:["A valid ",(0,r.jsx)(n.code,{children:"encryptionKey"})," parameter value is a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/utils/ByteArray.html",children:"ByteArray"}),"\nobject containing exactly 16 bytes."]}),"\n",(0,r.jsx)(n.p,{children:"The following examples demonstrate creating an encrypted database. For\nsimplicity, in these examples the encryption key is hard-coded in the\napplication code. However, this technique is strongly discouraged because it is\nnot secure."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'var conn:SQLConnection = new SQLConnection();\n\nvar encryptionKey:ByteArray = new ByteArray();\nencryptionKey.writeUTFBytes("Some16ByteString"); // This technique is not secure!\n\n// Create an encrypted database in asynchronous mode\nconn.openAsync(dbFile, SQLMode.CREATE, null, false, 1024, encryptionKey);\n\n// Create an encrypted database in synchronous mode\nconn.open(dbFile, SQLMode.CREATE, false, 1024, encryptionKey);\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For an example demonstrating a recommended way to generate an encryption key,\nsee\n",(0,r.jsx)(n.a,{href:"#example-generating-and-using-an-encryption-key",children:"Example: Generating and using an encryption key"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"connecting-to-an-encrypted-database",children:"Connecting to an encrypted database"}),"\n",(0,r.jsxs)(n.p,{children:["Like creating an encrypted database, the procedure for opening a connection to\nan encrypted database is like connecting to an unencrypted database. That\nprocedure is described in greater detail in\n",(0,r.jsx)(n.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database",children:"Connecting to a database"}),". You use the ",(0,r.jsx)(n.code,{children:"open()"}),"\nmethod to\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html#open()",children:"open a connection in synchronous execution mode"}),",\nor the ",(0,r.jsx)(n.code,{children:"openAsync()"})," method to\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html#openAsync()",children:"open a connection in asynchronous execution mode"}),".\nThe only difference is that to open an encrypted database, you specify the\ncorrect value for the ",(0,r.jsx)(n.code,{children:"encryptionKey"})," parameter (the ",(0,r.jsx)(n.code,{children:"open()"})," method's fifth\nparameter and the ",(0,r.jsx)(n.code,{children:"openAsync()"})," method's sixth parameter)."]}),"\n",(0,r.jsxs)(n.p,{children:["If the encryption key that's provided is not correct, an error occurs. For the\n",(0,r.jsx)(n.code,{children:"open()"})," method, a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/errors/SQLError.html",children:"SQLError"}),"\nexception is thrown. For the ",(0,r.jsx)(n.code,{children:"openAsync()"})," method, the\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\nobject dispatches a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/SQLErrorEvent.html",children:"SQLErrorEvent"}),",\nwhose ",(0,r.jsx)(n.code,{children:"error"})," property contains a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/errors/SQLError.html",children:"SQLError"}),"\nobject. In either case, the SQLError object generated by the exception has the\n",(0,r.jsx)(n.code,{children:"errorID"}),' property value 3138. That error ID corresponds to the error message\n"File opened is not a database file."']}),"\n",(0,r.jsx)(n.p,{children:"The following example demonstrates opening an encrypted database in asynchronous\nexecution mode. For simplicity, in this example the encryption key is hard-coded\nin the application code. However, this technique is strongly discouraged because\nit is not secure."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLMode;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\nconn.addEventListener(SQLEvent.OPEN, openHandler);\nconn.addEventListener(SQLErrorEvent.ERROR, errorHandler);\nvar dbFile:File = File.applicationStorageDirectory.resolvePath("DBSample.db");\n\nvar encryptionKey:ByteArray = new ByteArray();\nencryptionKey.writeUTFBytes("Some16ByteString"); // This technique is not secure!\n\nconn.openAsync(dbFile, SQLMode.UPDATE, null, false, 1024, encryptionKey);\n\nfunction openHandler(event:SQLEvent):void\n{\n\ttrace("the database opened successfully");\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n\tif (event.error.errorID == 3138)\n\t{\n\t\ttrace("Incorrect encryption key");\n\t}\n\telse\n\t{\n\t\ttrace("Error message:", event.error.message);\n\t\ttrace("Details:", event.error.details);\n\t}\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The following example demonstrates opening an encrypted database in synchronous\nexecution mode. For simplicity, in this example the encryption key is hard-coded\nin the application code. However, this technique is strongly discouraged because\nit is not secure."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLMode;\nimport flash.filesystem.File;\n\nvar conn:SQLConnection = new SQLConnection();\nvar dbFile:File = File.applicationStorageDirectory.resolvePath("DBSample.db");\n\nvar encryptionKey:ByteArray = new ByteArray();\nencryptionKey.writeUTFBytes("Some16ByteString"); // This technique is not secure!\n\ntry\n{\n\tconn.open(dbFile, SQLMode.UPDATE, false, 1024, encryptionKey);\n\ttrace("the database was created successfully");\n}\ncatch (error:SQLError)\n{\n\tif (error.errorID == 3138)\n\t{\n\t\ttrace("Incorrect encryption key");\n\t}\n\telse\n\t{\n\t\ttrace("Error message:", error.message);\n\t\ttrace("Details:", error.details);\n\t}\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For an example demonstrating a recommended way to generate an encryption key,\nsee\n",(0,r.jsx)(n.a,{href:"#example-generating-and-using-an-encryption-key",children:"Example: Generating and using an encryption key"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"changing-the-encryption-key-of-a-database",children:"Changing the encryption key of a database"}),"\n",(0,r.jsxs)(n.p,{children:["When a database is encrypted, you can change the encryption key for the database\nat a later time. To change a database's encryption key, first open a connection\nto the database by creating a\n",(0,r.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance and calling its ",(0,r.jsx)(n.code,{children:"open()"})," or ",(0,r.jsx)(n.code,{children:"openAsync()"})," method. Once the database is\nconnected, call the ",(0,r.jsx)(n.code,{children:"reencrypt()"})," method, passing the new encryption key as an\nargument."]}),"\n",(0,r.jsxs)(n.p,{children:["Like most database operations, the ",(0,r.jsx)(n.code,{children:"reencrypt()"})," method's behavior varies\ndepending on whether the database connection uses synchronous or asynchronous\nexecution mode. If you use the ",(0,r.jsx)(n.code,{children:"open()"})," method to connect to the database, the\n",(0,r.jsx)(n.code,{children:"reencrypt()"})," operation runs synchronously. When the operation finishes,\nexecution continues with the next line of code:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var newKey:ByteArray = new ByteArray();\n// ... generate the new key and store it in newKey\nconn.reencrypt(newKey);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["On the other hand, if the database connection is opened using the ",(0,r.jsx)(n.code,{children:"openAsync()"}),"\nmethod, the ",(0,r.jsx)(n.code,{children:"reencrypt()"})," operation is asynchronous. Calling ",(0,r.jsx)(n.code,{children:"reencrypt()"}),"\nbegins the reencryption process. When the operation completes, the SQLConnection\nobject dispatches a ",(0,r.jsx)(n.code,{children:"reencrypt"})," event. You use an event listener to determine\nwhen the reencryption finishes:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var newKey:ByteArray = new ByteArray();\n// ... generate the new key and store it in newKey\n\nconn.addEventListener(SQLEvent.REENCRYPT, reencryptHandler);\n\nconn.reencrypt(newKey);\n\nfunction reencryptHandler(event:SQLEvent):void\n{\n\t// save the fact that the key changed\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"reencrypt()"})," operation runs in its own transaction. If the operation is\ninterrupted or fails (for example, if the application is closed before the\noperation finishes) the transaction is rolled back. In that case, the original\nencryption key is still the encryption key for the database."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"reencrypt()"})," method can't be used to remove encryption from a database.\nPassing a ",(0,r.jsx)(n.code,{children:"null"})," value or encryption key that's not a 16-byte ByteArray to the\n",(0,r.jsx)(n.code,{children:"reencrypt()"})," method results in an error."]}),"\n",(0,r.jsx)(n.h2,{id:"considerations-for-using-encryption-with-a-database",children:"Considerations for using encryption with a database"}),"\n",(0,r.jsxs)(n.p,{children:["The section ",(0,r.jsx)(n.a,{href:"#uses-for-an-encrypted-database",children:"Uses for an encrypted database"}),"\npresents several cases in which you would want to use an encrypted database.\nIt's obvious that the usage scenarios of different applications (including these\nand other scenarios) have different privacy requirements. The way you architect\nthe use of encryption in your application plays an important part in controlling\nhow private a database's data is. For example, if you are using an encrypted\ndatabase to keep personal data private, even from other users of the same\nmachine, then each user's database needs its own encryption key. For the\ngreatest security, your application can generate the key from a user-entered\npassword. Basing the encryption key on a password ensures that even if another\nperson is able to impersonate the user's account on the machine, the data still\ncan't be accessed. On the other end of the privacy spectrum, suppose you want a\ndatabase file to be readable by any user of your application but not to other\napplications. In that case every installed copy of the application needs access\nto a shared encryption key."]}),"\n",(0,r.jsx)(n.p,{children:"You can design your application, and in particular the technique used to\ngenerate the encryption key, according to the level of privacy that you want for\nyour application data. The following list provides design suggestions for\nvarious levels of data privacy:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"To make a database accessible to any user who has access to the application on\nany machine, use a single key that's available to all instances of the\napplication. For example, the first time an application runs it can download\nthe shared encryption key from a server using a secure protocol such as SSL.\nIt can then save the key in the encrypted local store for future use. As an\nalternative, encrypt the data per-user on the machine, and synchronize the\ndata with a remote data store such as a server to make the data portable."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"To make a database accessible to a single user on any machine, generate the\nencryption key from a user secret (such as a password). In particular, do not\nuse any value that's tied to a particular computer (such as a value stored in\nthe encrypted local store) to generate the key. As an alternative, encrypt the\ndata per-user on the machine, and synchronize the data with a remote data\nstore such as a server to make the data portable."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["To make a database accessible only to a single individual on a single machine,\ngenerate the key from a password and a generated salt. For an example of this\ntechnique, see\n",(0,r.jsx)(n.a,{href:"#example-generating-and-using-an-encryption-key",children:"Example: Generating and using an encryption key"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The following are additional security considerations that are important to keep\nin mind when designing an application to use an encrypted database:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"A system is only as secure as its weakest link. If you are using a\nuser-entered password to generate an encryption key, consider imposing minimum\nlength and complexity restrictions on passwords. A short password that uses\nonly basic characters can be guessed quickly."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The source code of an AIR application is stored on a user's machine in plain\ntext (for HTML content) or an easily decompilable binary format (for SWF\ncontent). Because the source code is accessible, two points to remember are:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Never hard-code an encryption key in your source code"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Always assume that the technique used to generate an encryption key (such as"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"random character generator or a particular hashing algorithm) can be easily\nworked out by an attacker\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["AIR database encryption uses the Advanced Encryption Standard (AES) with\nCounter with CBC-MAC (CCM) mode. This encryption cipher requires a\nuser-entered key to be combined with a salt value to be secure. For an example\nof this, see\n",(0,r.jsx)(n.a,{href:"#example-generating-and-using-an-encryption-key",children:"Example: Generating and using an encryption key"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"When you elect to encrypt a database, all disk files used by the database\nengine in conjunction with that database are encrypted. However, the database\nengine holds some data temporarily in an in-memory cache to improve read- and\nwrite-time performance in transactions. Any memory-resident data is\nunencrypted. If an attacker is able to access the memory used by an AIR\napplication, for example by using a debugger, the data in a database that is\ncurrently open and unencrypted would be available."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-generating-and-using-an-encryption-key",children:"Example: Generating and using an encryption key"}),"\n",(0,r.jsx)(n.p,{children:"This example application demonstrates one technique for generating an encryption\nkey. This application is designed to provide the highest level of privacy and\nsecurity for users' data. One important aspect of securing private data is to\nrequire the user to enter a password each time the application connects to the\ndatabase. Consequently, as shown in this example, an application that requires\nthis level of privacy should never directly store the database encryption key."}),"\n",(0,r.jsxs)(n.p,{children:["The application consists of two parts: an ActionScript class that generates an\nencryption key (the EncryptionKeyGenerator class), and a basic user interface\nthat demonstrates how to use that class. For the complete source code, see\n",(0,r.jsx)(n.a,{href:"#example-generating-and-using-an-encryption-key",children:"Complete example code for generating and using an encryption key"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"using-the-encryptionkeygenerator-class-to-obtain-a-secure-encryption-key",children:"Using the EncryptionKeyGenerator class to obtain a secure encryption key"}),"\n",(0,r.jsxs)(n.p,{children:["It isn't necessary to understand the details of how the EncryptionKeyGenerator\nclass works to use it in your application. If you are interested in the details\nof how the class generates an encryption key for a database, see\n",(0,r.jsx)(n.a,{href:"#understanding-the-encryptionkeygenerator-class",children:"Understanding the EncryptionKeyGenerator class"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Follow these steps to use the EncryptionKeyGenerator class in your application:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Download the EncryptionKeyGenerator class as source code or a compiled SWC.\nThe EncryptionKeyGenerator class is included in the open-source ActionScript\n3.0 core library (as3corelib) project. You can download\n",(0,r.jsx)(n.a,{href:"https://github.com/mikechambers/as3corelib",children:"the as3corelib package including source code and documentation"}),".\nYou can also download the SWC or source code files from the project page."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Place the source code for the EncryptionKeyGenerator class (or the\nas3corelib SWC) in a location where your application source code can find\nit."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["In your application source code, add an ",(0,r.jsx)(n.code,{children:"import"})," statement for the\nEncryptionKeyGenerator class."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"import com.adobe.air.crypto.EncryptionKeyGenerator;\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:["Before the point where the code creates the database or opens a connection\nto it, add code to create an EncryptionKeyGenerator instance by calling the\n",(0,r.jsx)(n.code,{children:"EncryptionKeyGenerator()"})," constructor."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var keyGenerator:EncryptionKeyGenerator = new EncryptionKeyGenerator();\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Obtain a password from the user:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var password:String = passwordInput.text;\n\nif (!keyGenerator.validateStrongPassword(password))\n{\n\t// display an error message\n\treturn;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The EncryptionKeyGenerator instance uses this password as the basis for the\nencryption key (shown in the next step). The EncryptionKeyGenerator instance\ntests the password against certain strong password validation requirements.\nIf the validation fails, an error occurs. As the example code shows, you can\ncheck the password ahead of time by calling the EncryptionKeyGenerator\nobject's ",(0,r.jsx)(n.code,{children:"validateStrongPassword()"})," method. That way you can determine\nwhether the password meets the minimum requirements for a strong password\nand avoid an error."]}),"\n",(0,r.jsxs)(n.ol,{start:"6",children:["\n",(0,r.jsx)(n.li,{children:"Generate the encryption key from the password:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var encryptionKey:ByteArray = keyGenerator.getEncryptionKey(password);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method generates and returns the encryption key (a\n16-byte ByteArray). You can then use the encryption key to create your new\nencrypted database or open your existing one."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method has one required parameter, which is the\npassword obtained in step 5."]}),"\n",(0,r.jsx)(n.p,{children:"Note: To maintain the highest level of security and privacy for data, an\napplication must require the user to enter a password each time the\napplication connects to the database. Do not store the user's password or\nthe database encryption key directly. Doing so exposes security risks.\nInstead, as demonstrated in this example, an application should use the same\ntechnique to derive the encryption key from the password both when creating\nthe encrypted database and when connecting to it later."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method also accepts a second (optional) parameter,\nthe ",(0,r.jsx)(n.code,{children:"overrideSaltELSKey"})," parameter. The EncryptionKeyGenerator creates a\nrandom value (known as a ",(0,r.jsx)(n.em,{children:"salt"})," ) that is used as part of the encryption\nkey. In order to be able to re-create the encryption key, the salt value is\nstored in the Encrypted Local Store (ELS) of your AIR application. By\ndefault, the EncryptionKeyGenerator class uses a particular String as the\nELS key. Although unlikely, it's possible that the key can conflict with\nanother key your application uses. Instead of using the default key, you\nmight want to specify your own ELS key. In that case, specify a custom key\nby passing it as the second ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," parameter, as shown here:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'var customKey:String = "My custom ELS salt key";\nvar encryptionKey:ByteArray = keyGenerator.getEncryptionKey(password, customKey);\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"7",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Create or open the database"}),"\n",(0,r.jsxs)(n.p,{children:["With an encryption key returned by the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method, your\ncode can create a new encrypted database or attempt to open the existing\nencrypted database. In either case you use the SQLConnection class's\n",(0,r.jsx)(n.code,{children:"open()"})," or ",(0,r.jsx)(n.code,{children:"openAsync()"})," method, as described in\n",(0,r.jsx)(n.a,{href:"#creating-an-encrypted-database",children:"Creating an encrypted database"})," and\n",(0,r.jsx)(n.a,{href:"#connecting-to-an-encrypted-database",children:"Connecting to an encrypted database"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["In this example, the application is designed to open the database in\nasynchronous execution mode. The code sets up the appropriate event\nlisteners and calls the ",(0,r.jsx)(n.code,{children:"openAsync()"})," method, passing the encryption key as\nthe final argument:"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"conn.addEventListener(SQLEvent.OPEN, openHandler);\nconn.addEventListener(SQLErrorEvent.ERROR, openError);\n\nconn.openAsync(dbFile, SQLMode.CREATE, null, false, 1024, encryptionKey);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the listener methods, the code removes the event listener registrations.\nIt then displays a status message indicating whether the database was\ncreated, opened, or whether an error occurred. The most noteworthy part of\nthese event handlers is in the ",(0,r.jsx)(n.code,{children:"openError()"})," method. In that method an ",(0,r.jsx)(n.code,{children:"if"}),"\nstatement checks if the database exists (meaning that the code is attempting\nto connect to an existing database) and if the error ID matches the constant\n",(0,r.jsx)(n.code,{children:"EncryptionKeyGenerator.ENCRYPTED_DB_PASSWORD_ERROR_ID"}),". If both of these\nconditions are true, it probably means that the password the user entered is\nincorrect. (It could also mean that the specified file isn't a database file\nat all.) The following is the code that checks the error ID:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'if (!createNewDB && event.error.errorID == EncryptionKeyGenerator.ENCRYPTED_DB_PASSWORD_ERROR_ID)\n{\n\tstatusMsg.text = "Incorrect password!";\n}\nelse\n{\n\tstatusMsg.text = "Error creating or opening database.";\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For the complete code for the example event listeners, see\n",(0,r.jsx)(n.a,{href:"#complete-example-code-for-generating-and-using-an-encryption-key",children:"Complete example code for generating and using an encryption key"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"complete-example-code-for-generating-and-using-an-encryption-key",children:"Complete example code for generating and using an encryption key"}),"\n",(0,r.jsx)(n.p,{children:'The following is the complete code for the example application "Generating and\nusing an encryption key." The code consists of two parts.'}),"\n",(0,r.jsxs)(n.p,{children:["The example uses the EncryptionKeyGenerator class to create an encryption key\nfrom a password. The EncryptionKeyGenerator class is included in the open-source\nActionScript 3.0 core library (as3corelib) project. You can download\n",(0,r.jsx)(n.a,{href:"https://github.com/mikechambers/as3corelib",children:"the as3corelib package including source code and documentation"}),".\nYou can also download the SWC or source code files from the project page."]}),"\n",(0,r.jsx)(n.h4,{id:"flex-example",children:"Flex example"}),"\n",(0,r.jsx)(n.p,{children:"The application MXML file contains the source code for a simple application that\ncreates or opens a connection to an encrypted database:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" layout="vertical" creationComplete="init();">\n\t<mx:Script>\n\t<![CDATA[\n\t\timport com.adobe.air.crypto.EncryptionKeyGenerator;\n\n\t\tprivate const dbFileName:String = "encryptedDatabase.db";\n\n\t\tprivate var dbFile:File;\n\t\tprivate var createNewDB:Boolean = true;\n\t\tprivate var conn:SQLConnection;\n\n\t\t// ------- Event handling -------\n\n\t\tprivate function init():void\n\t\t{\n\t\t\tconn = new SQLConnection();\n\t\t\tdbFile = File.applicationStorageDirectory.resolvePath(dbFileName);\n\t\t\tif (dbFile.exists)\n\t\t\t{\n\t\t\t\tcreateNewDB = false;\n\t\t\t\tinstructions.text = "Enter your database password to open the encrypted database.";\n\t\t\t\topenButton.label = "Open Database";\n\t\t\t}\n\t\t}\n\n\t\tprivate function openConnection():void\n\t\t{\n\t\t\tvar password:String = passwordInput.text;\n\n\t\t\tvar keyGenerator:EncryptionKeyGenerator = new EncryptionKeyGenerator();\n\n\t\t\tif (password == null || password.length <= 0)\n\t\t\t{\n\t\t\t\tstatusMsg.text = "Please specify a password.";\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!keyGenerator.validateStrongPassword(password))\n\t\t\t{\n\t\t\t\tstatusMsg.text = "The password must be 8-32 characters long. It must contain at least one lowercase letter, at least one uppercase letter, and at least one number or symbol.";\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tpasswordInput.text = "";\n\t\t\tpasswordInput.enabled = false;\n\t\t\topenButton.enabled = false;\n\n\t\t\tvar encryptionKey:ByteArray = keyGenerator.getEncryptionKey(password);\n\n\t\t\tconn.addEventListener(SQLEvent.OPEN, openHandler);\n\t\t\tconn.addEventListener(SQLErrorEvent.ERROR, openError);\n\n\t\t\tconn.openAsync(dbFile, SQLMode.CREATE, null, false, 1024, encryptionKey);\n\t\t}\n\n\t\tprivate function openHandler(event:SQLEvent):void\n\t\t{\n\t\t\tconn.removeEventListener(SQLEvent.OPEN, openHandler);\n\t\t\tconn.removeEventListener(SQLErrorEvent.ERROR, openError);\n\n\t\t\tstatusMsg.setStyle("color", 0x009900);\n\t\t\tif (createNewDB)\n\t\t\t{\n\t\t\t\tstatusMsg.text = "The encrypted database was created successfully.";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstatusMsg.text = "The encrypted database was opened successfully.";\n\t\t\t}\n\t\t}\n\n\t\tprivate function openError(event:SQLErrorEvent):void\n\t\t{\n\t\t\tconn.removeEventListener(SQLEvent.OPEN, openHandler);\n\t\t\tconn.removeEventListener(SQLErrorEvent.ERROR, openError);\n\n\t\t\tif (!createNewDB && event.error.errorID == EncryptionKeyGenerator.ENCRYPTED_DB_PASSWORD_ERROR_ID)\n\t\t\t{\n\t\t\t\tstatusMsg.text = "Incorrect password!";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstatusMsg.text = "Error creating or opening database.";\n\t\t\t}\n\t\t}\n\t]]>\n\t</mx:Script>\n\t<mx:Text id="instructions" text="Enter a password to create an encrypted database. The next time you open the application, you will need to re-enter the password to open the database again." width="75%" height="65"/>\n\t<mx:HBox>\n\t\t<mx:TextInput id="passwordInput" displayAsPassword="true"/>\n\t\t<mx:Button id="openButton" label="Create Database" click="openConnection();"/>\n\t</mx:HBox>\n\t<mx:Text id="statusMsg" color="#990000" width="75%"/>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsx)(n.h4,{id:"flash-professional-example",children:"Flash Professional example"}),"\n",(0,r.jsx)(n.p,{children:"The application FLA file contains the source code for a simple application that\ncreates or opens a connection to an encrypted database. The FLA file has four\ncomponents placed on the stage:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Instance name"}),(0,r.jsx)(n.th,{children:"Component type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"instructions"})}),(0,r.jsx)(n.td,{children:"Label"}),(0,r.jsx)(n.td,{children:"Contains the instructions given to the user"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"passwordInput"})}),(0,r.jsx)(n.td,{children:"TextInput"}),(0,r.jsx)(n.td,{children:"Input field where the user enters the password"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"openButton"})}),(0,r.jsx)(n.td,{children:"Button"}),(0,r.jsx)(n.td,{children:"Button the user clicks after entering the password"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"statusMsg"})}),(0,r.jsx)(n.td,{children:"Label"}),(0,r.jsx)(n.td,{children:"Displays status (success or failure) messages"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The code for the application is defined on a keyframe on frame 1 of the main\ntimeline. The following is the code for the application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'import com.adobe.air.crypto.EncryptionKeyGenerator;\n\nconst dbFileName:String = "encryptedDatabase.db";\n\nvar dbFile:File;\nvar createNewDB:Boolean = true;\nvar conn:SQLConnection;\n\ninit();\n\n// ------- Event handling -------\n\nfunction init():void\n{\n\tpasswordInput.displayAsPassword = true;\n\topenButton.addEventListener(MouseEvent.CLICK, openConnection);\n\tstatusMsg.setStyle("textFormat", new TextFormat(null, null, 0x990000));\n\n\tconn = new SQLConnection();\n\tdbFile = File.applicationStorageDirectory.resolvePath(dbFileName);\n\n\tif (dbFile.exists)\n\t{\n\t\tcreateNewDB = false;\n\t\tinstructions.text = "Enter your database password to open the encrypted database.";\n\t\topenButton.label = "Open Database";\n\t}\n\telse\n\t{\n\t\tinstructions.text = "Enter a password to create an encrypted database. The next time you open the application, you will need to re-enter the password to open the database again.";\n\t\topenButton.label = "Create Database";\n\t}\n}\n\nfunction openConnection(event:MouseEvent):void\n{\n\tvar keyGenerator:EncryptionKeyGenerator = new EncryptionKeyGenerator();\n\n\tvar password:String = passwordInput.text;\n\n\tif (password == null || password.length <= 0)\n\t{\n\t\tstatusMsg.text = "Please specify a password.";\n\t\treturn;\n\t}\n\n\tif (!keyGenerator.validateStrongPassword(password))\n\t{\n\t\tstatusMsg.text = "The password must be 8-32 characters long. It must contain at least one lowercase letter, at least one uppercase letter, and at least one number or symbol.";\n\t\treturn;\n\t}\n\n\tpasswordInput.text = "";\n\tpasswordInput.enabled = false;\n\topenButton.enabled = false;\n\n\tvar encryptionKey:ByteArray = keyGenerator.getEncryptionKey(password);\n\n\tconn.addEventListener(SQLEvent.OPEN, openHandler);\n\tconn.addEventListener(SQLErrorEvent.ERROR, openError);\n\n\tconn.openAsync(dbFile, SQLMode.CREATE, null, false, 1024, encryptionKey);\n}\n\nfunction openHandler(event:SQLEvent):void\n{\n\tconn.removeEventListener(SQLEvent.OPEN, openHandler);\n\tconn.removeEventListener(SQLErrorEvent.ERROR, openError);\n\n\tstatusMsg.setStyle("textFormat", new TextFormat(null, null, 0x009900));\n\tif (createNewDB)\n\t{\n\t\tstatusMsg.text = "The encrypted database was created successfully.";\n\t}\n\telse\n\t{\n\t\tstatusMsg.text = "The encrypted database was opened successfully.";\n\t}\n}\n\nfunction openError(event:SQLErrorEvent):void\n{\n\tconn.removeEventListener(SQLEvent.OPEN, openHandler);\n\tconn.removeEventListener(SQLErrorEvent.ERROR, openError);\n\n\tif (!createNewDB && event.error.errorID == EncryptionKeyGenerator.ENCRYPTED_DB_PASSWORD_ERROR_ID)\n\t{\n\t\tstatusMsg.text = "Incorrect password!";\n\t}\n\telse\n\t{\n\t\tstatusMsg.text = "Error creating or opening database.";\n\t}\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"understanding-the-encryptionkeygenerator-class",children:"Understanding the EncryptionKeyGenerator class"}),"\n",(0,r.jsxs)(n.p,{children:["It isn't necessary to understand the inner workings of the\nEncryptionKeyGenerator class to use it to create a secure encryption key for\nyour application database. The process for using the class is explained in\n",(0,r.jsx)(n.a,{href:"#using-the-encryptionkeygenerator-class-to-obtain-a-secure-encryption-key",children:"Using the EncryptionKeyGenerator class to obtain a secure encryption key"}),".\nHowever, you might find it valuable to understand the techniques that the class\nuses. For example, you might want to adapt the class or incorporate some of its\ntechniques for situations where a different level of data privacy is desired."]}),"\n",(0,r.jsxs)(n.p,{children:["The EncryptionKeyGenerator class is included in the open-source ActionScript 3.0\ncore library (as3corelib) project. You can download\n",(0,r.jsx)(n.a,{href:"https://github.com/mikechambers/as3corelib",children:"the as3corelib package including source code and documentation"}),".You\ncan also view the source code on the project site or download it to follow along\nwith the explanations."]}),"\n",(0,r.jsxs)(n.p,{children:["When code creates an EncryptionKeyGenerator instance and calls its\n",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method, several steps are taken to ensure that only the\nrightful user can access the data. The process is the same to generate an\nencryption key from a user-entered password before the database is created as\nwell as to re-create the encryption key to open the database."]}),"\n",(0,r.jsx)(n.h4,{id:"obtain-and-validate-a-strong-password",children:"Obtain and validate a strong password"}),"\n",(0,r.jsxs)(n.p,{children:["When code calls the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method, it passes in a password as a\nparameter. The password is used as the basis for the encryption key. By using a\npiece of information that only the user knows, this design ensures that only the\nuser who knows the password can access the data in the database. Even if an\nattacker accesses the user's account on the computer, the attacker can't get\ninto the database without knowing the password. For maximum security, the\napplication never stores the password."]}),"\n",(0,r.jsxs)(n.p,{children:["An application's code creates an EncryptionKeyGenerator instance and calls its\n",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method, passing a user-entered password as an argument (the\nvariable ",(0,r.jsx)(n.code,{children:"password"})," in this example):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var keyGenerator:EncryptionKeyGenerator = new EncryptionKeyGenerator();\nvar encryptionKey:ByteArray = keyGenerator.getEncryptionKey(password);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The first step the EncryptionKeyGenerator class takes when the\n",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method is called is to check the user-entered password to\nensure that it meets the password strength requirements. The\nEncryptionKeyGenerator class requires a password to be 8 - 32 characters long.\nThe password must contain a mix of uppercase and lowercase letters and at least\none number or symbol character."]}),"\n",(0,r.jsxs)(n.p,{children:["The regular expression that checks this pattern is defined as a constant named\n",(0,r.jsx)(n.code,{children:"STRONG_PASSWORD_PATTERN"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"private static const STRONG_PASSWORD_PATTERN:RegExp = /(?=^.{8,32}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The code that checks the password is in the EncryptionKeyGenerator class's\n",(0,r.jsx)(n.code,{children:"validateStrongPassword()"})," method. The code is as follows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"public function vaidateStrongPassword(password:String):Boolean\n{\n\tif (password == null || password.length <= 0)\n\t{\n\t\treturn false;\n\t}\n\n\treturn STRONG_PASSWORD_PATTERN.test(password))\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Internally the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method calls the EncryptionKeyGenerator\nclass's ",(0,r.jsx)(n.code,{children:"validateStrongPassword()"})," method and, if the password isn't valid,\nthrows an exception. The ",(0,r.jsx)(n.code,{children:"validateStrongPassword()"})," method is a public method so\nthat application code can check a password without calling the\n",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method to avoid causing an error."]}),"\n",(0,r.jsx)(n.h4,{id:"expand-the-password-to-256-bits",children:"Expand the password to 256 bits"}),"\n",(0,r.jsx)(n.p,{children:"Later in the process, the password is required to be 256 bits long. Rather than\nrequire each user to enter a password that's exactly 256 bits (32 characters)\nlong, the code creates a longer password by repeating the password characters."}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method calls the ",(0,r.jsx)(n.code,{children:"concatenatePassword()"})," method to\nperform the task of creating the long password."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var concatenatedPassword:String = concatenatePassword(password);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The following is the code for the ",(0,r.jsx)(n.code,{children:"concatenatePassword()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'private function concatenatePassword(pwd:String):String\n{\n\tvar len:int = pwd.length;\n\tvar targetLength:int = 32;\n\n\tif (len == targetLength)\n\t{\n\t\treturn pwd;\n\t}\n\n\tvar repetitions:int = Math.floor(targetLength / len);\n\tvar excess:int = targetLength % len;\n\n\tvar result:String = "";\n\n\tfor (var i:uint = 0; i < repetitions; i++)\n\t{\n\t\tresult += pwd;\n\t}\n\n\tresult += pwd.substr(0, excess);\n\n\treturn result;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"If the password is less than 256 bits, the code concatenates the password with\nitself to make it 256 bits. If the length doesn't work out exactly, the last\nrepetition is shortened to get exactly 256 bits."}),"\n",(0,r.jsx)(n.h4,{id:"generate-or-retrieve-a-256-bit-salt-value",children:"Generate or retrieve a 256-bit salt value"}),"\n",(0,r.jsxs)(n.p,{children:["The next step is to get a 256-bit salt value that in a later step is combined\nwith the password. A ",(0,r.jsx)(n.em,{children:"salt"})," is a random value that is added to or combined with\na user-entered value to form a password. Using a salt with a password ensures\nthat even if a user chooses a real word or common term as a password, the\npassword-plus-salt combination that the system uses is a random value. This\nrandomness helps guard against a dictionary attack, where an attacker uses a\nlist of words to attempt to guess a password. In addition, by generating the\nsalt value and storing it in the encrypted local store, it is tied to the user's\naccount on the machine on which the database file is located."]}),"\n",(0,r.jsxs)(n.p,{children:["If the application is calling the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method for the first\ntime, the code creates a random 256-bit salt value. Otherwise, the code loads\nthe salt value from the encrypted local store."]}),"\n",(0,r.jsxs)(n.p,{children:["The salt is stored in a variable named ",(0,r.jsx)(n.code,{children:"salt"}),". The code determines if it has\nalready created a salt by attempting to load the salt from the encrypted local\nstore:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var salt:ByteArray = EncryptedLocalStore.getItem(saltKey);\nif (salt == null)\n{\n\tsalt = makeSalt();\n\tEncryptedLocalStore.setItem(saltKey, salt);\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If the code is creating a new salt value, the ",(0,r.jsx)(n.code,{children:"makeSalt()"})," method generates a\n256-bit random value. Because the value is eventually stored in the encrypted\nlocal store, it is generated as a ByteArray object. The ",(0,r.jsx)(n.code,{children:"makeSalt()"})," method uses\nthe ",(0,r.jsx)(n.code,{children:"Math.random()"})," method to randomly generate the value. The ",(0,r.jsx)(n.code,{children:"Math.random()"}),"\nmethod can't generate 256 bits at one time. Instead, the code uses a loop to\ncall ",(0,r.jsx)(n.code,{children:"Math.random()"})," eight times. Each time, a random uint value between 0 and\n4294967295 (the maximum uint value) is generated. A uint value is used for\nconvenience, because a uint uses exactly 32 bits. By writing eight uint values\ninto the ByteArray, a 256-bit value is generated. The following is the code for\nthe ",(0,r.jsx)(n.code,{children:"makeSalt()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"private function makeSalt():ByteArray\n{\n\tvar result:ByteArray = new ByteArray;\n\n\tfor (var i:uint = 0; i < 8; i++)\n\t{\n\t\tresult.writeUnsignedInt(Math.round(Math.random() * uint.MAX_VALUE));\n\t}\n\n\treturn result;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["When the code is saving the salt to the Encrypted Local Store (ELS) or\nretrieving the salt from the ELS, it needs a String key under which the salt is\nsaved. Without knowing the key, the salt value can't be retrieved. In that case,\nthe encryption key can't be re-created each time to reopen the database. By\ndefault, the EncryptionKeyGenerator uses a predefined ELS key that is defined in\nthe constant ",(0,r.jsx)(n.code,{children:"SALT_ELS_KEY"}),". Instead of using the default key, application code\ncan also specify an ELS key to use in the call to the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"}),"\nmethod. Either the default or the application-specified salt ELS key is stored\nin a variable named ",(0,r.jsx)(n.code,{children:"saltKey"}),". That variable is used in the calls to\n",(0,r.jsx)(n.code,{children:"EncryptedLocalStore.setItem()"})," and ",(0,r.jsx)(n.code,{children:"EncryptedLocalStore.getItem()"}),", as shown\npreviously."]}),"\n",(0,r.jsx)(n.h4,{id:"combine-the-256-bit-password-and-salt-using-the-xor-operator",children:"Combine the 256-bit password and salt using the XOR operator"}),"\n",(0,r.jsx)(n.p,{children:"The code now has a 256-bit password and a 256-bit salt value. It next uses a\nbitwise XOR operation to combine the salt and the concatenated password into a\nsingle value. In effect, this technique creates a 256-bit password consisting of\ncharacters from the entire range of possible characters. This principle is true\neven though most likely the actual password input consists of primarily\nalphanumeric characters. This increased randomness provides the benefit of\nmaking the set of possible passwords large without requiring the user to enter a\nlong complex password."}),"\n",(0,r.jsxs)(n.p,{children:["The result of the XOR operation is stored in the variable ",(0,r.jsx)(n.code,{children:"unhashedKey"}),". The\nactual process of performing a bitwise XOR on the two values happens in the\n",(0,r.jsx)(n.code,{children:"xorBytes()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var unhashedKey:ByteArray = xorBytes(concatenatedPassword, salt);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The bitwise XOR operator ( ",(0,r.jsx)(n.code,{children:"^"}),") takes two uint values and returns a uint value.\n(A uint value contains 32 bits.) The input values passed as arguments to the\n",(0,r.jsx)(n.code,{children:"xorBytes()"})," method are a String (the password) and a ByteArray (the salt).\nConsequently, the code uses a loop to extract 32 bits at a time from each input\nto combine using the XOR operator."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"private function xorBytes(passwordString:String, salt:ByteArray):ByteArray\n{\n\tvar result:ByteArray = new ByteArray();\n\n\tfor (var i:uint = 0; i < 32; i += 4)\n\t{\n\t\t// ...\n\t}\n\n\treturn result;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Within the loop, first 32 bits (4 bytes) are extracted from the ",(0,r.jsx)(n.code,{children:"passwordString"}),"\nparameter. Those bits are extracted and converted into a uint ( ",(0,r.jsx)(n.code,{children:"o1"}),") in a\ntwo-part process. First, the ",(0,r.jsx)(n.code,{children:"charCodeAt()"})," method gets each character's numeric\nvalue. Next, that value is shifted to the appropriate position in the uint using\nthe bitwise left shift operator ( ",(0,r.jsx)(n.code,{children:"<<"}),") and the shifted value is added to ",(0,r.jsx)(n.code,{children:"o1"}),".\nFor example, the first character ( ",(0,r.jsx)(n.code,{children:"i"}),") becomes the first 8 bits by using the\nbitwise left shift operator ( ",(0,r.jsx)(n.code,{children:"<<"}),") to shift the bits left by 24 bits and\nassigning that value to ",(0,r.jsx)(n.code,{children:"o1"}),". The second character ",(0,r.jsx)(n.code,{children:"(i + 1"}),") becomes the second\n8 bits by shifting its value left 16 bits and adding the result to ",(0,r.jsx)(n.code,{children:"o1"}),". The\nthird and fourth characters' values are added the same way."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\t// ...\n\n\t// Extract 4 bytes from the password string and convert to a uint\n\tvar o1:uint = passwordString.charCodeAt(i) << 24;\n\to1 += passwordString.charCodeAt(i + 1) << 16;\n\to1 += passwordString.charCodeAt(i + 2) << 8;\n\to1 += passwordString.charCodeAt(i + 3);\n\n\t// ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The variable ",(0,r.jsx)(n.code,{children:"o1"})," now contains 32 bits from the ",(0,r.jsx)(n.code,{children:"passwordString"})," parameter.\nNext, 32 bits are extracted from the ",(0,r.jsx)(n.code,{children:"salt"})," parameter by calling its\n",(0,r.jsx)(n.code,{children:"readUnsignedInt()"})," method. The 32 bits are stored in the uint variable ",(0,r.jsx)(n.code,{children:"o2"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\t// ...\n\n\tsalt.position = i;\n\tvar o2:uint = salt.readUnsignedInt();\n\n\t// ...\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Finally, the two 32-bit (uint) values are combined using the XOR operator and\nthe result is written into a ByteArray named ",(0,r.jsx)(n.code,{children:"result"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\t// ...\n\n\tvar xor:uint = o1 ^ o2;\n\tresult.writeUnsignedInt(xor);\n\t// ...\n"})}),"\n",(0,r.jsx)(n.p,{children:"Once the loop completes, the ByteArray containing the XOR result is returned."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"\t\t\t// ...\n\t}\n\n\treturn result;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"hash-the-key",children:"Hash the key"}),"\n",(0,r.jsx)(n.p,{children:"Once the concatenated password and the salt have been combined, the next step is\nto further secure this value by hashing it using the SHA-256 hashing algorithm.\nHashing the value makes it more difficult for an attacker to reverse-engineer\nit."}),"\n",(0,r.jsxs)(n.p,{children:["At this point the code has a ByteArray named ",(0,r.jsx)(n.code,{children:"unhashedKey"})," containing the\nconcatenated password combined with the salt. The ActionScript 3.0 core library\n(as3corelib) project includes a SHA256 class in the com.adobe.crypto package.\nThe ",(0,r.jsx)(n.code,{children:"SHA256.hashBytes()"})," method that performs a SHA-256 hash on a ByteArray and\nreturns a String containing the 256-bit hash result as a hexadecimal number. The\nEncryptionKeyGenerator class uses the SHA256 class to hash the key:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var hashedKey:String = SHA256.hashBytes(unhashedKey);\n"})}),"\n",(0,r.jsx)(n.h4,{id:"extract-the-encryption-key-from-the-hash",children:"Extract the encryption key from the hash"}),"\n",(0,r.jsx)(n.p,{children:"The encryption key must be a ByteArray that is exactly 16 bytes (128 bits) long.\nThe result of the SHA-256 hashing algorithm is always 256 bits long.\nConsequently, the final step is to select 128 bits from the hashed result to use\nas the actual encryption key."}),"\n",(0,r.jsxs)(n.p,{children:["In the EncryptionKeyGenerator class, the code reduces the key to 128 bits by\ncalling the ",(0,r.jsx)(n.code,{children:"generateEncryptionKey()"})," method. It then returns that method's\nresult as the result of the ",(0,r.jsx)(n.code,{children:"getEncryptionKey()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"var encryptionKey:ByteArray = generateEncryptionKey(hashedKey);\nreturn encryptionKey;\n"})}),"\n",(0,r.jsx)(n.p,{children:"It isn't necessary to use the first 128 bits as the encryption key. You could\nselect a range of bits starting at some arbitrary point, you could select every\nother bit, or use some other way of selecting bits. The important thing is that\nthe code selects 128 distinct bits, and that the same 128 bits are used each\ntime."}),"\n",(0,r.jsxs)(n.p,{children:["In this case, the ",(0,r.jsx)(n.code,{children:"generateEncryptionKey()"})," method uses the range of bits\nstarting at the 18th byte as the encryption key. As mentioned previously, the\nSHA256 class returns a String containing a 256-bit hash as a hexadecimal number.\nA single block of 128 bits has too many bytes to add to a ByteArray at one time.\nConsequently, the code uses a ",(0,r.jsx)(n.code,{children:"for"})," loop to extract characters from the\nhexadecimal String, convert them to actual numeric values, and add them to the\nByteArray. The SHA-256 result String is 64 characters long. A range of 128 bits\nequals 32 characters in the String, and each character represents 4 bits. The\nsmallest increment of data you can add to a ByteArray is one byte (8 bits),\nwhich is equivalent to two characters in the ",(0,r.jsx)(n.code,{children:"hash"})," String. Consequently, the\nloop counts from 0 to 31 (32 characters) in increments of 2 characters."]}),"\n",(0,r.jsxs)(n.p,{children:["Within the loop, the code first determines the starting position for the current\npair of characters. Since the desired range starts at the character at index\nposition 17 (the 18th byte), the ",(0,r.jsx)(n.code,{children:"position"})," variable is assigned the current\niterator value ( ",(0,r.jsx)(n.code,{children:"i"}),") plus 17. The code uses the String object's ",(0,r.jsx)(n.code,{children:"substr()"}),"\nmethod to extract the two characters at the current position. Those characters\nare stored in the variable ",(0,r.jsx)(n.code,{children:"hex"}),". Next, the code uses the ",(0,r.jsx)(n.code,{children:"parseInt()"})," method to\nconvert the ",(0,r.jsx)(n.code,{children:"hex"})," String to a decimal integer value. It stores that value in the\nint variable ",(0,r.jsx)(n.code,{children:"byte"}),". Finally, the code adds the value in ",(0,r.jsx)(n.code,{children:"byte"})," to the ",(0,r.jsx)(n.code,{children:"result"}),"\nByteArray using its ",(0,r.jsx)(n.code,{children:"writeByte()"})," method. When the loop finishes, the ",(0,r.jsx)(n.code,{children:"result"}),"\nByteArray contains 16 bytes and is ready to use as a database encryption key."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"private function generateEncryptionKey(hash:String):ByteArray\n{\n\tvar result:ByteArray = new ByteArray();\n\n\tfor (var i:uint = 0; i < 32; i += 2)\n\t{\n\t\tvar position:uint = i + 17;\n\t\tvar hex:String = hash.substr(position, 2);\n\t\tvar byte:int = parseInt(hex, 16);\n\t\tresult.writeByte(byte);\n\t}\n\n\treturn result;\n}\n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);