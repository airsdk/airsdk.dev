"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[40969],{28453:(e,a,s)=>{s.d(a,{R:()=>o,x:()=>r});var i=s(96540);const t={},n=i.createContext(t);function o(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(n.Provider,{value:a},e.children)}},63170:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/display/using-the-drawing-api/the-graphics-class","title":"The Graphics class","description":"Each Shape, Sprite, and MovieClip object has a graphics property, which is an instance of the Graphics class. The Graphics class includes properties and methods for drawing lines, fills, and shapes. If you want a display object to use solely as a canvas for drawing content, you can use a Shape instance. A Shape instance will perform better than other display objects for drawing, because it doesn\u2019t have the overhead of the additional functionality in the Sprite and MovieClip classes. If you want a display object on which you can draw graphical content and also want that object to contain other display objects, you can use a Sprite instance. For more information on determining which display object to use for various tasks, see Choosing a DisplayObject subclass .","source":"@site/docs/development/display/using-the-drawing-api/the-graphics-class.md","sourceDirName":"development/display/using-the-drawing-api","slug":"/development/display/using-the-drawing-api/the-graphics-class","permalink":"/docs/development/display/using-the-drawing-api/the-graphics-class","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/the-graphics-class.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"The Graphics class","sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Basics of the drawing API","permalink":"/docs/development/display/using-the-drawing-api/basics-of-the-drawing-api"},"next":{"title":"Drawing lines and curves","permalink":"/docs/development/display/using-the-drawing-api/drawing-lines-and-curves"}}');var t=s(74848),n=s(28453);const o={title:"The Graphics class",sidebar_position:3},r=void 0,c={},d=[];function p(e){const a={a:"a",p:"p",...(0,n.R)(),...e.components};return(0,t.jsxs)(a.p,{children:["Each Shape, Sprite, and MovieClip object has a graphics property, which is an instance of the Graphics class. The Graphics class includes properties and methods for drawing lines, fills, and shapes. If you want a display object to use solely as a canvas for drawing content, you can use a Shape instance. A Shape instance will perform better than other display objects for drawing, because it doesn\u2019t have the overhead of the additional functionality in the Sprite and MovieClip classes. If you want a display object on which you can draw graphical content and also want that object to contain other display objects, you can use a Sprite instance. For more information on determining which display object to use for various tasks, see ",(0,t.jsx)(a.a,{href:"/docs/development/display/display-programming/working-with-display-objects/choosing-a-displayobject-subclass",children:"Choosing a DisplayObject subclass"})," ."]})}function l(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}}}]);