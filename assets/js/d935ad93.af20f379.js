"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[12421],{18244:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/sb_filter_before-5bac3812d2e339466b4b28956b4fb644.png"},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(96540);const a={},r=i.createContext(a);function s(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:t},e.children)}},57395:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/sb_filter_after-a89cc4699b6ef0ae1c4641ae963f1dee.png"},65741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter","title":"Using a shader as a filter","description":"Using a shader as a filter is like using any of the other filters in","source":"@site/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter.md","sourceDirName":"development/display/working-with-pixel-bender-shaders","slug":"/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter","permalink":"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-filter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Using a shader as a drawing fill","permalink":"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-as-a-drawing-fill"},"next":{"title":"Using a shader in stand-alone mode","permalink":"/docs/development/display/working-with-pixel-bender-shaders/using-a-shader-in-stand-alone-mode"}}');var a=n(74848),r=n(28453);const s={},o="Using a shader as a filter",d={},l=[];function h(e){const t={a:"a",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"using-a-shader-as-a-filter",children:"Using a shader as a filter"})}),"\n",(0,a.jsxs)(t.p,{children:["Using a shader as a filter is like using any of the other filters in\nActionScript. When you use a shader as a filter, the filtered image (a display\nobject or BitmapData object) is passed to the shader. The shader uses the input\nimage to create the filter output, which is usually a modified version of the\noriginal image. If the filtered object is a display object the shader's output\nis displayed on the screen in place of the filtered display object. If the\nfiltered object is a BitmapData object, the shader's output becomes the content\nof the BitmapData object whose ",(0,a.jsx)(t.code,{children:"applyFilter()"})," method is called."]}),"\n",(0,a.jsxs)(t.p,{children:["To use a shader as a filter, you first create the Shader object as described in\n",(0,a.jsx)(t.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader",children:"Loading or embedding a shader"}),". Next you\ncreate a ShaderFilter object linked to the Shader object. The ShaderFilter\nobject is the filter that is applied to the filtered object. You apply it to an\nobject in the same way that you apply any filter. You pass it to the ",(0,a.jsx)(t.code,{children:"filters"}),"\nproperty of a display object or you call the ",(0,a.jsx)(t.code,{children:"applyFilter()"})," method on a\nBitmapData object. For example, the following code creates a ShaderFilter object\nand applies the filter to a display object named ",(0,a.jsx)(t.code,{children:"homeButton"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"var myFilter:ShaderFilter = new ShaderFilter(myShader);\nhomeButton.filters = [myFilter];\n"})}),"\n",(0,a.jsx)(t.p,{children:"When you use a shader as a filter, the shader must be defined with at least one\ninput. As the example shows, you do not set the input value in your code.\nInstead, the filtered display object or BitmapData object is set as the input\nimage. If you use a shader that expects more than one input, you provide a value\nfor any input beyond the first one."}),"\n",(0,a.jsxs)(t.p,{children:["In some cases, a filter changes the dimensions of the original image. For\nexample, a typical drop shadow effect adds extra pixels containing the shadow\nthat's added to the image. When you use a shader that changes the image\ndimensions, set the ",(0,a.jsx)(t.code,{children:"leftExtension"}),", ",(0,a.jsx)(t.code,{children:"rightExtension"}),", ",(0,a.jsx)(t.code,{children:"topExtension"}),", and\n",(0,a.jsx)(t.code,{children:"bottomExtension"})," properties to indicate by how much you want the image size to\nchange."]}),"\n",(0,a.jsx)(t.p,{children:'The following example demonstrates using a shader as a filter. The filter in\nthis example inverts the red, green, and blue channel values of an image. The\nresult is the "negative" version of the image.'}),"\n",(0,a.jsx)(t.p,{children:"Note: The shader that this example uses is the invertRGB.pbk Pixel Bender kernel\nthat is included with the Pixel Bender Toolkit. You can load the source code for\nthe kernel from the Pixel Bender Toolkit installation directory. Compile the\nsource code and save the bytecode file in the same directory as the source code."}),"\n",(0,a.jsx)(t.p,{children:"The important ActionScript code is in these two methods:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"init()"}),": The ",(0,a.jsx)(t.code,{children:"init()"})," method is called when the application loads. In this\nmethod the code loads the shader bytecode file."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"onLoadComplete()"}),": In the ",(0,a.jsx)(t.code,{children:"onLoadComplete()"})," method the code creates the\nShader object named ",(0,a.jsx)(t.code,{children:"shader"}),". It then creates and draws the contents of an\nobject named ",(0,a.jsx)(t.code,{children:"target"}),". The ",(0,a.jsx)(t.code,{children:"target"})," object is a rectangle filled with a linear\ngradient color that is red on the left, yellow-green in the middle, and light\nblue on the right. The unfiltered object looks like this:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(18244).A+"",width:"300",height:"200"})}),"\n",(0,a.jsx)(t.p,{children:"With the filter applied the colors are inverted, making the rectangle look\nlike this:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(57395).A+"",width:"300",height:"200"})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:'The shader that this example uses is the "invertRGB.pbk" sample Pixel Bender\nkernel that is included with the Pixel Bender Toolkit. The source code is\navailable in the file "invertRGB.pbk" in the Pixel Bender Toolkit installation\ndirectory. Compile the source code and save the bytecode file with the name\n"invertRGB.pbj" in the same directory as your ActionScript source code.'}),"\n",(0,a.jsx)(t.p,{children:"The following is the ActionScript code for this example. Use this class as the\nmain application class for an ActionScript-only project in Flash Builder, or as\nthe document class for the FLA file in Flash Professional:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'package\n{\n    import flash.display.GradientType;\n    import flash.display.Graphics;\n    import flash.display.Shader;\n    import flash.display.Shape;\n    import flash.display.Sprite;\n    import flash.filters.ShaderFilter;\n    import flash.events.Event;\n    import flash.geom.Matrix;\n    import flash.net.URLLoader;\n    import flash.net.URLLoaderDataFormat;\n    import flash.net.URLRequest;\n\n    public class InvertRGB extends Sprite\n    {\n        private var shader:Shader;\n        private var loader:URLLoader;\n\n        public function InvertRGB()\n        {\n            init();\n        }\n\n        private function init():void\n        {\n            loader = new URLLoader();\n            loader.dataFormat = URLLoaderDataFormat.BINARY;\n            loader.addEventListener(Event.COMPLETE, onLoadComplete);\n            loader.load(new URLRequest("invertRGB.pbj"));\n        }\n\n\n        private function onLoadComplete(event:Event):void\n        {\n            shader = new Shader(loader.data);\n\n            var target:Shape = new Shape();\n            addChild(target);\n\n            var g:Graphics = target.graphics;\n            var c:Array = [0x990000, 0x445500, 0x007799];\n            var a:Array = [255, 255, 255];\n            var r:Array = [0, 127, 255];\n            var m:Matrix = new Matrix();\n            m.createGradientBox(w, h);\n            g.beginGradientFill(GradientType.LINEAR, c, a, r, m);\n            g.drawRect(10, 10, w, h);\n            g.endFill();\n\n            var invertFilter:ShaderFilter = new ShaderFilter(shader);\n            target.filters = [invertFilter];\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["For more information on applying filters, see\n",(0,a.jsx)(t.a,{href:"/docs/development/display/filtering-display-objects/creating-and-applying-filters",children:"Creating and applying filters"}),"."]})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);