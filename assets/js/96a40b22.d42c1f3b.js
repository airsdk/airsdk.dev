"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[13235],{28453:(e,s,c)=>{c.d(s,{R:()=>t,x:()=>i});var a=c(96540);const r={},n=a.createContext(r);function t(e){const s=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(n.Provider,{value:s},e.children)}},93344:(e,s,c)=>{c.r(s),c.d(s,{assets:()=>h,contentTitle:()=>i,default:()=>o,frontMatter:()=>t,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes","title":"Character classes","description":"You use character classes to specify a list of characters to match one position","source":"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes.md","sourceDirName":"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax","slug":"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/character-classes.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Characters, metacharacters, and metasequences","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences"},"next":{"title":"Quantifiers","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/quantifiers"}}');var r=c(74848),n=c(28453);const t={sidebar_position:3},i="Character classes",h={},l=[{value:"Escape sequences in character classes",id:"escape-sequences-in-character-classes",level:4},{value:"Ranges of characters in character classes",id:"ranges-of-characters-in-character-classes",level:4},{value:"Negated character classes",id:"negated-character-classes",level:4}];function d(e){const s={code:"code",em:"em",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"character-classes",children:"Character classes"})}),"\n",(0,r.jsxs)(s.p,{children:["You use character classes to specify a list of characters to match one position\nin the regular expression. You define character classes with square brackets (\n",(0,r.jsx)(s.code,{children:"["})," and ",(0,r.jsx)(s.code,{children:"]"}),"). For example, the following regular expression defines a character\nclass that matches ",(0,r.jsx)(s.code,{children:"bag"}),", ",(0,r.jsx)(s.code,{children:"beg"}),", ",(0,r.jsx)(s.code,{children:"big"}),", ",(0,r.jsx)(s.code,{children:"bog"}),", or ",(0,r.jsx)(s.code,{children:"bug"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/b[aeiou]g/\n"})}),"\n",(0,r.jsx)(s.h4,{id:"escape-sequences-in-character-classes",children:"Escape sequences in character classes"}),"\n",(0,r.jsxs)(s.p,{children:["Most metacharacters and metasequences that normally have special meanings in a\nregular expression ",(0,r.jsx)(s.em,{children:"do not"})," have those same meanings inside a character class.\nFor example, in a regular expression, the asterisk is used for repetition, but\nthis is not the case when the asterisk appears in a character class. The\nfollowing character class matches the asterisk literally, along with any of the\nother characters listed:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/[abc*123]/\n"})}),"\n",(0,r.jsx)(s.p,{children:"However, the three characters listed in the following table do function as\nmetacharacters, with special meaning, in character classes:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Metacharacter"}),(0,r.jsx)(s.th,{children:"Meaning in character classes"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"]"})}),(0,r.jsx)(s.td,{children:"Defines the end of the character class."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"-"})}),(0,r.jsx)(s.td,{children:'Defines a range of characters (see the following section "Ranges of characters in character classes").'})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"\\"})}),(0,r.jsx)(s.td,{children:"Defines metasequences and undoes the special meaning of metacharacters."})]})]})]}),"\n",(0,r.jsxs)(s.p,{children:["For any of these characters to be recognized as literal characters (without the\nspecial metacharacter meaning), you must precede the character with the\nbackslash escape character. For example, the following regular expression\nincludes a character class that matches any one of four symbols (",(0,r.jsx)(s.code,{children:"$"}),", ",(0,r.jsx)(s.code,{children:"\\"}),", ",(0,r.jsx)(s.code,{children:"]"}),",\nor ",(0,r.jsx)(s.code,{children:"-"}),"):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/[$\\\\\\]\\-]/\n"})}),"\n",(0,r.jsx)(s.p,{children:"In addition to the metacharacters that retain their special meanings, the\nfollowing metasequences function as metasequences within character classes:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Metasequence"}),(0,r.jsx)(s.th,{children:"Meaning in character classes"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"\\n"})}),(0,r.jsx)(s.td,{children:"Matches a newline character."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"\\r"})}),(0,r.jsx)(s.td,{children:"Matches a return character."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:"\\t"})}),(0,r.jsx)(s.td,{children:"Matches a tab character."})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"\\u"})," ",(0,r.jsx)(s.code,{children:"nnnn"})]}),(0,r.jsxs)(s.td,{children:["Matches the character with the specified Unicode code point value (as defined by the hexadecimal number ",(0,r.jsx)(s.em,{children:"nnnn"}),")."]})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsxs)(s.td,{children:[(0,r.jsx)(s.code,{children:"\\\\x"})," ",(0,r.jsx)(s.code,{children:"nn"})]}),(0,r.jsxs)(s.td,{children:["Matches the character with the specified ASCII value (as defined by the hexadecimal number ",(0,r.jsx)(s.em,{children:"nn"}),")."]})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"Other regular expression metasequences and metacharacters are treated as normal\ncharacters within a character class."}),"\n",(0,r.jsx)(s.h4,{id:"ranges-of-characters-in-character-classes",children:"Ranges of characters in character classes"}),"\n",(0,r.jsxs)(s.p,{children:["Use the hyphen to specify a range of characters, such as ",(0,r.jsx)(s.code,{children:"A-Z"}),", ",(0,r.jsx)(s.code,{children:"a-z"}),", or ",(0,r.jsx)(s.code,{children:"0-9"}),".\nThese characters must constitute a valid range in the character set. For\nexample, the following character class matches any one of the characters in the\nrange ",(0,r.jsx)(s.code,{children:"a-z"})," or any digit:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/[a-z0-9]/\n"})}),"\n",(0,r.jsxs)(s.p,{children:["You can also use the ",(0,r.jsx)(s.code,{children:"\\\\x"})," ",(0,r.jsx)(s.em,{children:"nn"})," ASCII character code to specify a range by ASCII\nvalue. For example, the following character class matches any character from a\nset of extended ASCII characters (such as ",(0,r.jsx)(s.code,{children:"\xe9"})," and ",(0,r.jsx)(s.code,{children:"\xea"}),"):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"\\\\x\n"})}),"\n",(0,r.jsx)(s.h4,{id:"negated-character-classes",children:"Negated character classes"}),"\n",(0,r.jsxs)(s.p,{children:["When you use a caret (",(0,r.jsx)(s.code,{children:"^"}),") character at the beginning of a character class, it\nnegates that class\u2014any character not listed is considered a match. The following\ncharacter class matches any character ",(0,r.jsx)(s.em,{children:"except"})," for a lowercase letter ( ",(0,r.jsx)(s.code,{children:"az"})," \u2013)\nor a digit:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/[^a-z0-9]/\n"})}),"\n",(0,r.jsxs)(s.p,{children:["You must type the caret (",(0,r.jsx)(s.code,{children:"^"}),") character at the ",(0,r.jsx)(s.em,{children:"beginning"})," of a character class\nto indicate negation. Otherwise, you are simply adding the caret character to\nthe characters in the character class. For example, the following character\nclass matches any one of a number of symbol characters, including the caret:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"/[!.,#+*%$&^]/\n"})})]})}function o(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);