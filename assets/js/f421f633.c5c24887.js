"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[45820],{6923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"development/rich-media-content/working-with-video/controlling-video-playback","title":"Controlling video playback","description":"The NetStream class offers four main methods for controlling video playback:","source":"@site/docs/development/rich-media-content/working-with-video/controlling-video-playback.md","sourceDirName":"development/rich-media-content/working-with-video","slug":"/development/rich-media-content/working-with-video/controlling-video-playback","permalink":"/docs/development/rich-media-content/working-with-video/controlling-video-playback","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-video/controlling-video-playback.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Loading video files","permalink":"/docs/development/rich-media-content/working-with-video/loading-video-files"},"next":{"title":"Playing video in full-screen mode","permalink":"/docs/development/rich-media-content/working-with-video/playing-video-in-full-screen-mode"}}');var i=t(74848),s=t(28453);const a={sidebar_position:5},r="Controlling video playback",d={},l=[{value:"Detecting the end of a video stream",id:"detecting-the-end-of-a-video-stream",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"controlling-video-playback",children:"Controlling video playback"})}),"\n",(0,i.jsx)(n.p,{children:"The NetStream class offers four main methods for controlling video playback:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#pause()",children:(0,i.jsx)(n.code,{children:"pause()"})}),":\nPauses playback of a video stream. If the video is already paused, calling this\nmethod does nothing."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#resume()",children:(0,i.jsx)(n.code,{children:"resume()"})}),":\nResumes playback of a video stream that is paused. If the video is already\nplaying, calling this method does nothing."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#seek()",children:(0,i.jsx)(n.code,{children:"seek()"})}),":\nSeeks the keyframe closest to the specified location (an offset, in seconds,\nfrom the beginning of the stream)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/NetStream.html#togglePause()",children:(0,i.jsx)(n.code,{children:"togglePause()"})}),":\nPauses or resumes playback of a stream."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: There is no ",(0,i.jsx)(n.code,{children:"stop()"})," method. In order to stop a stream you must pause\nplayback and seek to the beginning of the video stream."]}),"\n",(0,i.jsxs)(n.p,{children:["Note: The ",(0,i.jsx)(n.code,{children:"play()"})," method does not resume playback, it is used for loading video\nfiles."]}),"\n",(0,i.jsxs)(n.p,{children:["The following example demonstrates how to control a video using several\ndifferent buttons. To run the following example, create a new document and add\nfour button instances to your workspace ( ",(0,i.jsx)(n.code,{children:"pauseBtn"}),", ",(0,i.jsx)(n.code,{children:"playBtn"}),", ",(0,i.jsx)(n.code,{children:"stopBtn"}),", and\n",(0,i.jsx)(n.code,{children:"togglePauseBtn"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'var nc:NetConnection = new NetConnection();\nnc.connect(null);\n\nvar ns:NetStream = new NetStream(nc);\nns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);\nns.play("video.flv");\nfunction asyncErrorHandler(event:AsyncErrorEvent):void\n{\n\t// ignore error\n}\n\nvar vid:Video = new Video();\nvid.attachNetStream(ns);\naddChild(vid);\n\npauseBtn.addEventListener(MouseEvent.CLICK, pauseHandler);\nplayBtn.addEventListener(MouseEvent.CLICK, playHandler);\nstopBtn.addEventListener(MouseEvent.CLICK, stopHandler);\ntogglePauseBtn.addEventListener(MouseEvent.CLICK, togglePauseHandler);\n\nfunction pauseHandler(event:MouseEvent):void\n{\n\tns.pause();\n}\nfunction playHandler(event:MouseEvent):void\n{\n\tns.resume();\n}\nfunction stopHandler(event:MouseEvent):void\n{\n\t// Pause the stream and move the playhead back to\n\t// the beginning of the stream.\n\tns.pause();\n\tns.seek(0);\n}\nfunction togglePauseHandler(event:MouseEvent):void\n{\n\tns.togglePause();\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Clicking on the ",(0,i.jsx)(n.code,{children:"pauseBtn"})," button instance while the video is playing causes the\nvideo file to pause. If the video is already paused, clicking this button has no\neffect. Clicking on the ",(0,i.jsx)(n.code,{children:"playBtn"})," button instance resumes video playback if\nplayback was previously paused, otherwise the button has no effect if the video\nwas already playing."]}),"\n",(0,i.jsx)(n.h2,{id:"detecting-the-end-of-a-video-stream",children:"Detecting the end of a video stream"}),"\n",(0,i.jsxs)(n.p,{children:["In order to listen for the beginning and end of a video stream, you need to add\nan event listener to the NetStream instance to listen for the ",(0,i.jsx)(n.code,{children:"netStatus"})," event.\nThe following code demonstrates how to listen for the various codes throughout\nthe video's playback:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"ns.addEventListener(NetStatusEvent.NET_STATUS, statusHandler);\nfunction statusHandler(event:NetStatusEvent):void\n{\n\ttrace(event.info.code)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The previous code generates the following output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"NetStream.Play.Start\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Empty\nNetStream.Buffer.Full\nNetStream.Buffer.Flush\nNetStream.Play.Stop\nNetStream.Buffer.Empty\nNetStream.Buffer.Flush\n"})}),"\n",(0,i.jsx)(n.p,{children:'The two codes that you want to specifically listen for are\n"NetStream.Play.Start" and "NetStream.Play.Stop" which signal the beginning and\nend of the video\'s playback. The following snippet uses a switch statement to\nfilter these two codes and trace a message:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'function statusHandler(event:NetStatusEvent):void\n{\n\tswitch (event.info.code)\n\t{\n\t\tcase "NetStream.Play.Start":\n\t\t\ttrace("Start [" + ns.time.toFixed(3) + " seconds]");\n\t\t\tbreak;\n\t\tcase "NetStream.Play.Stop":\n\t\t\ttrace("Stop [" + ns.time.toFixed(3) + " seconds]");\n\t\t\tbreak;\n\t}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["By listening for the ",(0,i.jsx)(n.code,{children:"netStatus"})," event ( ",(0,i.jsx)(n.code,{children:"NetStatusEvent.NET_STATUS"}),"), you can\nbuild a video player which loads the next video in a playlist once the current\nvideo has finished playing."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);