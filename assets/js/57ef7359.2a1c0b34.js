"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[38490],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},63780:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"development/core-actionscript-classes/handling-errors/types-of-errors","title":"Types of errors","description":"When you develop and run applications, you encounter different types of errors","source":"@site/docs/development/core-actionscript-classes/handling-errors/types-of-errors.md","sourceDirName":"development/core-actionscript-classes/handling-errors","slug":"/development/core-actionscript-classes/handling-errors/types-of-errors","permalink":"/docs/development/core-actionscript-classes/handling-errors/types-of-errors","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-errors/types-of-errors.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Basics of error handling","permalink":"/docs/development/core-actionscript-classes/handling-errors/basics-of-error-handling"},"next":{"title":"Error handling in ActionScript 3.0","permalink":"/docs/development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0"}}');var o=r(74848),s=r(28453);const i={sidebar_position:2},a="Types of errors",c={},l=[];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"types-of-errors",children:"Types of errors"})}),"\n",(0,o.jsx)(n.p,{children:"When you develop and run applications, you encounter different types of errors\nand error terminology. The following list introduces the major error types and\nterms:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Compile-time errors"})," are raised by the ActionScript compiler during code\ncompilation. Compile-time errors occur when syntactical problems in your code\nprevent your application from being built."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Run-time errors"})," occur when you run your application after you compile it.\nRun-time errors represent errors that are caused while a SWF file plays in a\nFlash runtime (such as Adobe Flash Player or Adobe AIR). In most cases, you\nhandle run-time errors as they occur, reporting them to the user and taking\nsteps to keep your application running. If the error is a fatal error, such as\nnot being able to connect to a remote website or load required data, you can\nuse error handling to allow your application to finish, gracefully."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Synchronous errors"})," are run-time errors that occur at the time a function is\ncalled\u2014for example, when you try to use a specific method and the argument you\npass to the method is invalid, so the Flash runtime throws an exception. Most\nerrors occur synchronously\u2014at the time the statement executes\u2014and the flow of\ncontrol passes immediately to the most applicable ",(0,o.jsx)(n.code,{children:"catch"})," statement."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, the following code excerpt throws a run-time error because the\n",(0,o.jsx)(n.code,{children:"browse()"})," method is not called before the program attempts to upload a file:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'var fileRef:FileReference = new FileReference();\ntry\n{\n    fileRef.upload(new URLRequest("http://www.yourdomain.com/fileupload.cfm"));\n}\ncatch (error:IllegalOperationError)\n{\n    trace(error);\n    // Error #2037: Functions called in incorrect sequence, or earlier\n    // call was unsuccessful.\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In this case, a run-time error is thrown synchronously because Flash Player\ndetermined that the ",(0,o.jsx)(n.code,{children:"browse()"})," method was not called before the file upload\nwas attempted."]}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on synchronous error handling, see\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/handling-errors/handling-synchronous-errors-in-an-application",children:"Handling synchronous errors in an application"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Asynchronous"})," ",(0,o.jsx)(n.em,{children:"errors"})," are run-time errors that occur outside of the normal\nprogram flow. They generate events and event listeners catch them. An\nasynchronous operation is one in which a function initiates an operation, but\ndoesn't wait for it to complete. You can create an error event listener to\nwait for the application or user to try some operation. If the operation\nfails, you catch the error with an event listener and respond to the error\nevent. Then, the event listener calls an event handler function to respond to\nthe error event in a useful manner. For example, the event handler could\nlaunch a dialog box that prompts the user to resolve the error."]}),"\n",(0,o.jsxs)(n.p,{children:["Consider the file-upload synchronous error example presented earlier. If you\nsuccessfully call the ",(0,o.jsx)(n.code,{children:"browse()"})," method before beginning a file upload, Flash\nPlayer would dispatch several events. For example, when an upload starts, the\n",(0,o.jsx)(n.code,{children:"open"})," event is dispatched. When the file upload operation completes\nsuccessfully, the ",(0,o.jsx)(n.code,{children:"complete"})," event is dispatched. Because event handling is\nasynchronous (that is, it does not occur at specific, known, predesignated\ntimes), use the ",(0,o.jsx)(n.code,{children:"addEventListener()"})," method to listen for these specific\nevents, as the following code shows:"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'var fileRef:FileReference = new FileReference();\nfileRef.addEventListener(Event.SELECT, selectHandler);\nfileRef.addEventListener(Event.OPEN, openHandler);\nfileRef.addEventListener(Event.COMPLETE, completeHandler);\nfileRef.browse();\n\nfunction selectHandler(event:Event):void\n{\n    trace("...select...");\n    var request:URLRequest = new URLRequest("http://www.yourdomain.com/fileupload.cfm");\n    request.method = URLRequestMethod.POST;\n    event.target.upload(request);\n}\nfunction openHandler(event:Event):void\n{\n    trace("...open...");\n}\nfunction completeHandler(event:Event):void\n{\n    trace("...complete...");\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["For detailed information on asynchronous error handling, see\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status",children:"Responding to error events and status"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Uncaught exceptions"})," are errors thrown with no corresponding logic (like a\n",(0,o.jsx)(n.code,{children:"catch"})," statement) to respond to them. If your application throws an error,\nand no appropriate ",(0,o.jsx)(n.code,{children:"catch"})," statement or event handler can be found at the\ncurrent or higher level to handle the error, the error is considered an\nuncaught exception."]}),"\n",(0,o.jsxs)(n.p,{children:["When an uncaught error happens, the runtime dispatches an ",(0,o.jsx)(n.code,{children:"uncaughtError"}),'\nevent. This event is also known as a "global error handler." This event is\ndispatched by the SWF\'s UncaughtErrorEvents object, which is available through\nthe ',(0,o.jsx)(n.code,{children:"LoaderInfo.uncaughtErrorEvents"})," property. If no listeners are registered\nfor the ",(0,o.jsx)(n.code,{children:"uncaughtError"})," event, the runtime ignores uncaught errors and tries\nto continue running, as long as the error doesn't stop the SWF."]}),"\n",(0,o.jsxs)(n.p,{children:["In addition to dispatching the ",(0,o.jsx)(n.code,{children:"uncaughtError"})," event, debugger versions of the\nFlash runtime respond to uncaught errors by terminating the current script.\nThen, they display the uncaught error in ",(0,o.jsx)(n.code,{children:"trace"})," statement output or writing\nthe error message to a log file. If the exception object is an instance of the\nError class or one of its subclasses, stack trace information is also\ndisplayed in the output. For more information about using the debugger version\nof Flash runtimes, see\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/handling-errors/working-with-the-debugger-versions-of-flash-runtimes",children:"Working with the debugger versions of Flash runtimes"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Note: While processing an uncaughtError event, if an error event is thrown\nfrom an uncaughtError handler, the event handler is called multiple times.\nThis results in an infinite loop of exceptions. It is recommended that you\navoid such a scenario."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);