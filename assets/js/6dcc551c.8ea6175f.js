"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[41113],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var a=n(96540);const r={},s=a.createContext(r);function i(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(s.Provider,{value:t},e.children)}},52764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/inserting-data","title":"Inserting data","description":"Adding data to a database involves executing a SQL INSERT statement. Once the","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data.md","tags":[],"version":"current","sidebarPosition":7.5,"frontMatter":{"sidebar_position":7.5},"sidebar":"mainSidebar","previous":{"title":"Retrieving data from a database","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database"},"next":{"title":"Changing or deleting data","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/changing-or-deleting-data"}}');var r=n(74848),s=n(28453);const i={sidebar_position:7.5},o="Inserting data",d={},l=[{value:"Executing an INSERT statement",id:"executing-an-insert-statement",level:2},{value:"Retrieving a database-generated primary key of an inserted row",id:"retrieving-a-database-generated-primary-key-of-an-inserted-row",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"inserting-data",children:"Inserting data"})}),"\n",(0,r.jsxs)(t.p,{children:["Adding data to a database involves executing a SQL ",(0,r.jsx)(t.code,{children:"INSERT"})," statement. Once the\nstatement has finished executing, you can access the primary key for the newly\ninserted row if the key was generated by the database."]}),"\n",(0,r.jsx)(t.h2,{id:"executing-an-insert-statement",children:"Executing an INSERT statement"}),"\n",(0,r.jsxs)(t.p,{children:["To add data to a table in a database, you create and execute a\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\ninstance whose text is a SQL ",(0,r.jsx)(t.code,{children:"INSERT"})," statement."]}),"\n",(0,r.jsxs)(t.p,{children:["The following example uses a SQLStatement instance to add a row of data to the\nalready-existing employees table. This example demonstrates inserting data using\nasynchronous execution mode. Note that this listing assumes that there is a\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance named ",(0,r.jsx)(t.code,{children:"conn"}),' that has already been instantiated and is already\nconnected to a database. It also assumes that the "employees" table has already\nbeen created.']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLResult;\nimport flash.data.SQLStatement;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\n\n// ... create and open the SQLConnection instance named conn ...\n\n// create the SQL statement\nvar insertStmt:SQLStatement = new SQLStatement();\ninsertStmt.sqlConnection = conn;\n\n// define the SQL text\nvar sql:String =\n\t"INSERT INTO employees (firstName, lastName, salary) " +\n\t"VALUES (\'Bob\', \'Smith\', 8000)";\ninsertStmt.text = sql;\n\n// register listeners for the result and failure (status) events\ninsertStmt.addEventListener(SQLEvent.RESULT, insertResult);\ninsertStmt.addEventListener(SQLErrorEvent.ERROR, insertError);\n\n// execute the statement\ninsertStmt.execute();\n\nfunction insertResult(event:SQLEvent):void\n{\n\ttrace("INSERT statement succeeded");\n}\n\nfunction insertError(event:SQLErrorEvent):void\n{\n\ttrace("Error message:", event.error.message);\n\ttrace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\t// create the SQL statement\n\t\t\t\tvar insertStmt:SQLStatement = new SQLStatement();\n\t\t\t\tinsertStmt.sqlConnection = conn;\n\n\t\t\t\t// define the SQL text\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"INSERT INTO employees (firstName, lastName, salary) " +\n\t\t\t\t\t"VALUES (\'Bob\', \'Smith\', 8000)";\n\t\t\t\tinsertStmt.text = sql;\n\n\t\t\t\t// register listeners for the result and failure (status) events\n\t\t\t\tinsertStmt.addEventListener(SQLEvent.RESULT, insertResult);\n\t\t\t\tinsertStmt.addEventListener(SQLErrorEvent.ERROR, insertError);\n\n\t\t\t\t// execute the statement\n\t\t\t\tinsertStmt.execute();\n\t\t\t}\n\n\t\t\tprivate function insertResult(event:SQLEvent):void\n\t\t\t{\n\t\t\t\ttrace("INSERT statement succeeded");\n\t\t\t}\n\n\t\t\tprivate function insertError(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\ttrace("Error message:", event.error.message);\n\t\t\t\ttrace("Details:", event.error.details);\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsxs)(t.p,{children:["The following example adds a row of data to the already-existing employees\ntable, using synchronous execution mode. Note that this listing assumes that\nthere is a\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance named ",(0,r.jsx)(t.code,{children:"conn"}),' that has already been instantiated and is already\nconnected to a database. It also assumes that the "employees" table has already\nbeen created.']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLResult;\nimport flash.data.SQLStatement;\nimport flash.errors.SQLError;\n\n// ... create and open the SQLConnection instance named conn ...\n\n// create the SQL statement\nvar insertStmt:SQLStatement = new SQLStatement();\ninsertStmt.sqlConnection = conn;\n\n// define the SQL text\nvar sql:String =\n\t"INSERT INTO employees (firstName, lastName, salary) " +\n\t"VALUES (\'Bob\', \'Smith\', 8000)";\ninsertStmt.text = sql;\n\ntry\n{\n\t// execute the statement\n\tinsertStmt.execute();\n\n\ttrace("INSERT statement succeeded");\n}\ncatch (error:SQLError)\n{\n\ttrace("Error message:", error.message);\n\ttrace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.errors.SQLError;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\t// create the SQL statement\n\t\t\t\tvar insertStmt:SQLStatement = new SQLStatement();\n\t\t\t\tinsertStmt.sqlConnection = conn;\n\n\t\t\t\t// define the SQL text\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"INSERT INTO employees (firstName, lastName, salary) " +\n\t\t\t\t\t"VALUES (\'Bob\', \'Smith\', 8000)";\n\t\t\t\tinsertStmt.text = sql;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// execute the statement\n\t\t\t\t\tinsertStmt.execute();\n\t\t\t\t\ttrace("INSERT statement succeeded");\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\ttrace("Error message:", error.message);\n\t\t\t\t\ttrace("Details:", error.details);\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,r.jsx)(t.h2,{id:"retrieving-a-database-generated-primary-key-of-an-inserted-row",children:"Retrieving a database-generated primary key of an inserted row"}),"\n",(0,r.jsxs)(t.p,{children:["Often after inserting a row of data into a table, your code needs to know a\ndatabase-generated primary key or row identifier value for the newly inserted\nrow. For example, once you insert a row in one table, you might want to add rows\nin a related table. In that case you would want to insert the primary key value\nas a foreign key in the related table. The primary key of a newly inserted row\ncan be retrieved using the\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLResult.html",children:"SQLResult"}),"\nobject associated with the statement execution. This is the same object that's\nused to access result data after a ",(0,r.jsx)(t.code,{children:"SELECT"})," statement is executed. As with any\nSQL statement, when the execution of an ",(0,r.jsx)(t.code,{children:"INSERT"})," statement completes the runtime\ncreates a SQLResult instance. You access the SQLResult instance by calling the\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\nobject's ",(0,r.jsx)(t.code,{children:"getResult()"})," method if you're using an event listener or if you're\nusing synchronous execution mode. Alternatively, if you're using asynchronous\nexecution mode and you pass a\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/Responder.html",children:"Responder"}),"\ninstance to the ",(0,r.jsx)(t.code,{children:"execute()"})," call, the SQLResult instance is passed as an\nargument to the result handler function. In any case, the SQLResult instance has\na property, ",(0,r.jsx)(t.code,{children:"lastInsertRowID"}),", that contains the row identifier of the\nmost-recently inserted row if the executed SQL statement is an ",(0,r.jsx)(t.code,{children:"INSERT"}),"\nstatement."]}),"\n",(0,r.jsx)(t.p,{children:"The following example demonstrates accessing the primary key of an inserted row\nin asynchronous execution mode:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'insertStmt.text = "INSERT INTO ...";\n\ninsertStmt.addEventListener(SQLEvent.RESULT, resultHandler);\n\ninsertStmt.execute();\n\nfunction resultHandler(event:SQLEvent):void\n{\n\t// get the primary key\n\tvar result:SQLResult = insertStmt.getResult();\n\n\tvar primaryKey:Number = result.lastInsertRowID;\n\t// do something with the primary key\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"The following example demonstrates accessing the primary key of an inserted row\nin synchronous execution mode:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'insertStmt.text = "INSERT INTO ...";\n\ntry\n{\n\tinsertStmt.execute();\n\n\t// get the primary key\n\tvar result:SQLResult = insertStmt.getResult();\n\n\tvar primaryKey:Number = result.lastInsertRowID;\n\t// do something with the primary key\n}\ncatch (error:SQLError)\n{\n/\t/ respond to the error\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"Note that the row identifier may or may not be the value of the column that is\ndesignated as the primary key column in the table definition, according to the\nfollowing rules:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["If the table is defined with a primary key column whose affinity (column data\ntype) is ",(0,r.jsx)(t.code,{children:"INTEGER"}),", the ",(0,r.jsx)(t.code,{children:"lastInsertRowID"})," property contains the value that was\ninserted into that row (or the value generated by the runtime if it's an\n",(0,r.jsx)(t.code,{children:"AUTOINCREMENT"})," column)."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["If the table is defined with multiple primary key columns (a composite key) or\nwith a single primary key column whose affinity is not ",(0,r.jsx)(t.code,{children:"INTEGER"}),", behind the\nscenes the database generates an integer row identifier value for the row.\nThat generated value is the value of the ",(0,r.jsx)(t.code,{children:"lastInsertRowID"})," property."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["The value is always the row identifier of the most-recently inserted row. If\nan ",(0,r.jsx)(t.code,{children:"INSERT"})," statement causes a trigger to fire which in turn inserts a row,\nthe ",(0,r.jsx)(t.code,{children:"lastInsertRowID"})," property contains the row identifier of the last row\ninserted by the trigger rather than the row created by the ",(0,r.jsx)(t.code,{children:"INSERT"})," statement."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["As a consequence of these rules, if you want to have an explicitly defined\nprimary key column whose value is available after an ",(0,r.jsx)(t.code,{children:"INSERT"})," command through\nthe ",(0,r.jsx)(t.code,{children:"SQLResult.lastInsertRowID"})," property, the column must be defined as an\n",(0,r.jsx)(t.code,{children:"INTEGER PRIMARY KEY"})," column. Even if your table does not include an explicit\n",(0,r.jsx)(t.code,{children:"INTEGER PRIMARY KEY"})," column, it is equally acceptable to use the\ndatabase-generated row identifier as a primary key for your table in the sense\nof defining relationships with related tables. The row identifier column value\nis available in any SQL statement by using one of the special column names\n",(0,r.jsx)(t.code,{children:"ROWID"}),", ",(0,r.jsx)(t.code,{children:"_ROWID_"}),", or ",(0,r.jsx)(t.code,{children:"OID"}),". You can create a foreign key column in a related\ntable and use the row identifier value as the foreign key column value just as\nyou would with an explicitly declared ",(0,r.jsx)(t.code,{children:"INTEGER PRIMARY KEY"})," column. In that\nsense, if you are using an arbitrary primary key rather than a natural key, and\nas long as you don't mind the runtime generating the primary key value for you,\nit makes little difference whether you use an ",(0,r.jsx)(t.code,{children:"INTEGER PRIMARY KEY"})," column or\nthe system-generated row identifier as a table's primary key for defining a\nforeign key relationship with between two tables."]}),"\n",(0,r.jsxs)(t.p,{children:["For more information about primary keys and generated row identifiers, see\n",(0,r.jsx)(t.a,{href:"/docs/development/appendixes/sql-support-in-local-databases/",children:"SQL support in local databases"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);