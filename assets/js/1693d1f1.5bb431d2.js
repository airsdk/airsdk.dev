"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[15372],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(96540);const r={},d=a.createContext(r);function i(e){const n=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(d.Provider,{value:n},e.children)}},57437:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/user-interaction/drag-and-drop-in-air/dragging-data-into-an-html-element","title":"Dragging data into an HTML element","description":"The default behavior only allows text to be dragged into editable regions of the","source":"@site/docs/development/user-interaction/drag-and-drop-in-air/dragging-data-into-an-html-element.md","sourceDirName":"development/user-interaction/drag-and-drop-in-air","slug":"/development/user-interaction/drag-and-drop-in-air/dragging-data-into-an-html-element","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dragging-data-into-an-html-element","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/dragging-data-into-an-html-element.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"Dragging data out of an HTML element","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dragging-data-out-of-an-html-element"},"next":{"title":"Example: Overriding the default HTML drag-in behavior","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/example-overriding-the-default-html-drag-in-behavior"}}');var r=t(74848),d=t(28453);const i={sidebar_position:6},o="Dragging data into an HTML element",s={},l=[{value:"Enabling drag-in",id:"enabling-drag-in",level:2},{value:"Getting the dropped data",id:"getting-the-dropped-data",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dragging-data-into-an-html-element",children:"Dragging data into an HTML element"})}),"\n",(0,r.jsxs)(n.p,{children:["The default behavior only allows text to be dragged into editable regions of the\npage. You can specify that an element and its children can be made editable by\nincluding the ",(0,r.jsx)(n.code,{children:"contenteditable"})," attribute in the opening tag of the element. You\ncan also make an entire document editable by setting the document object\n",(0,r.jsx)(n.code,{children:"designMode"})," property to ",(0,r.jsx)(n.code,{children:'"on"'}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You can support alternate drag-in behavior on a page by handling the\n",(0,r.jsx)(n.code,{children:"dragenter"}),", ",(0,r.jsx)(n.code,{children:"dragover"}),", and ",(0,r.jsx)(n.code,{children:"drop"})," events for any elements that can accept\ndragged data."]}),"\n",(0,r.jsx)(n.h2,{id:"enabling-drag-in",children:"Enabling drag-in"}),"\n",(0,r.jsxs)(n.p,{children:["To handle the drag-in gesture, you must first cancel the default behavior.\nListen for the ",(0,r.jsx)(n.code,{children:"dragenter"})," and ",(0,r.jsx)(n.code,{children:"dragover"})," events on any HTML elements you want\nto use as drop targets. In the handlers for these events, call the\n",(0,r.jsx)(n.code,{children:"preventDefault()"})," method of the dispatched event object. Canceling the default\nbehavior allows non-editable regions to receive a drop."]}),"\n",(0,r.jsx)(n.h2,{id:"getting-the-dropped-data",children:"Getting the dropped data"}),"\n",(0,r.jsxs)(n.p,{children:["You can access the dropped data in the handler for the ",(0,r.jsx)(n.code,{children:"ondrop"})," event:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'function doDrop(event){\n\tdroppedText = event.dataTransfer.getData("text/plain");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Use the ",(0,r.jsx)(n.code,{children:"dataTransfer.getData()"})," method to read the data onto the clipboard,\npassing in the MIME type of the data format to read. You can find out which data\nformats are available using the ",(0,r.jsx)(n.code,{children:"types"})," property of the ",(0,r.jsx)(n.code,{children:"dataTransfer"})," object.\nThe ",(0,r.jsx)(n.code,{children:"types"})," array contains the MIME type string of each available format."]}),"\n",(0,r.jsx)(n.p,{children:"When you cancel the default behavior in the dragenter or dragover events, you\nare responsible for inserting any dropped data into its proper place in the\ndocument. No API exists to convert a mouse position into an insertion point\nwithin an element. This limitation can make it difficult to implement\ninsertion-type drag gestures."})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);