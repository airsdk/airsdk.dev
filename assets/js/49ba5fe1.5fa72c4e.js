"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[98054],{26127:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"development/core-actionscript-classes/handling-errors/handling-errors-example-custom-errors-application","title":"Handling errors example: CustomErrors application","description":"The CustomErrors application demonstrates techniques for working with custom","source":"@site/docs/development/core-actionscript-classes/handling-errors/handling-errors-example-custom-errors-application.md","sourceDirName":"development/core-actionscript-classes/handling-errors","slug":"/development/core-actionscript-classes/handling-errors/handling-errors-example-custom-errors-application","permalink":"/docs/development/core-actionscript-classes/handling-errors/handling-errors-example-custom-errors-application","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-errors/handling-errors-example-custom-errors-application.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"mainSidebar","previous":{"title":"Comparing the Error classes","permalink":"/docs/development/core-actionscript-classes/handling-errors/comparing-the-error-classes"},"next":{"title":"Using regular expressions","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/"}}');var s=n(74848),o=n(28453);const i={sidebar_position:9},a="Handling errors example: CustomErrors application",c={},l=[{value:"CustomErrors application overview",id:"customerrors-application-overview",level:2},{value:"Building a custom validator",id:"building-a-custom-validator",level:2},{value:"Defining the ApplicationError class",id:"defining-the-applicationerror-class",level:2},{value:"Defining the FatalError class",id:"defining-the-fatalerror-class",level:2},{value:"Defining the WarningError class",id:"defining-the-warningerror-class",level:2}];function d(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"handling-errors-example-customerrors-application",children:"Handling errors example: CustomErrors application"})}),"\n",(0,s.jsx)(r.p,{children:"The CustomErrors application demonstrates techniques for working with custom\nerrors when building an application. These techniques are:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Validating an XML packet"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Writing a custom error"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Throwing custom errors"}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Notifying users when an error is thrown"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["To get the application files for this sample, see\n",(0,s.jsx)(r.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,s.jsx)(r.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe CustomErrors application files can be found in the Samples/CustomError\nfolder. The application consists of the following files:"]}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"File"})}),(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Description"})})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"CustomErrors.mxml"}),(0,s.jsx)("p",{children:"or"}),(0,s.jsx)("p",{children:"CustomErrors.fla"})]}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"The main\napplication file in Flash (FLA) or Flex (MXML)"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/errors/ApplicationError.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"A class that\nserves as the base error class for both the FatalError and WarningError\nclasses."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/errors/FatalError.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"A class that\ndefines a FatalError errorthrown by the application. This class extends\nthe custom ApplicationError class."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/errors/Validator.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"A class that\ndefines a single method that validates a user-supplied employee XML\npacket."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/errors/WarningError.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"A class that\ndefines a WarningError error thrown by the application. This class\nextends the custom ApplicationError class."})})]})]})]}),"\n",(0,s.jsx)(r.h2,{id:"customerrors-application-overview",children:"CustomErrors application overview"}),"\n",(0,s.jsxs)(r.p,{children:["When the application loads, the ",(0,s.jsx)(r.code,{children:"initApp()"})," method is called for Flex\napplications or the timeline (non-function) code is executed for Flash\nProfessional applications. This code defines a sample XML packet to be verified\nby the Validator class. The following code is run:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'employeeXML =\n    <employee id="12345">\n        <firstName>John</firstName>\n        <lastName>Doe</lastName>\n        <costCenter>12345</costCenter>\n        <costCenter>67890</costCenter>\n    </employee>;\n'})}),"\n",(0,s.jsx)(r.p,{children:"The XML packet is later displayed in a TextArea component instance on the Stage.\nThis step allows you to modify the XML packet before attempting to revalidate\nit."}),"\n",(0,s.jsxs)(r.p,{children:["When the user clicks the Validate button, the ",(0,s.jsx)(r.code,{children:"validateData()"})," method is called.\nThis method validates the employee XML packet using the ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"}),"\nmethod in the Validator class. The following code shows the ",(0,s.jsx)(r.code,{children:"validateData()"}),"\nmethod:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'function validateData():void\n{\n    try\n    {\n        var tempXML:XML = XML(xmlText.text);\n        Validator.validateEmployeeXML(tempXML);\n        status.text = "The XML was successfully validated.";\n    }\n    catch (error:FatalError)\n    {\n        showFatalError(error);\n    }\n    catch (error:WarningError)\n    {\n        showWarningError(error);\n    }\n    catch (error:Error)\n    {\n        showGenericError(error);\n    }\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["First, a temporary XML object is created using the contents of the TextArea\ncomponent instance ",(0,s.jsx)(r.code,{children:"xmlText"}),". Next, the ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"})," method in the\ncustom Validator class (com.example.programmingas3/errors/Validator.as) is\ncalled and passes the temporary XML object as a parameter. If the XML packet is\nvalid, the ",(0,s.jsx)(r.code,{children:"status"})," Label component instance displays a success message and the\napplication exits. If the ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"})," method throws a custom error\n(that is, a FatalError, WarningError, or a generic Error occurs), the\nappropriate ",(0,s.jsx)(r.code,{children:"catch"})," statement executes and calls either the ",(0,s.jsx)(r.code,{children:"showFatalError()"}),",\n",(0,s.jsx)(r.code,{children:"showWarningError()"}),", or ",(0,s.jsx)(r.code,{children:"showGenericError()"})," methods. Each of these methods\ndisplays an appropriate message in a text area named ",(0,s.jsx)(r.code,{children:"statusTex"})," t to notify the\nuser of the specific error that occurred. Each method also updates the ",(0,s.jsx)(r.code,{children:"status"}),"\nLabel component instance with a specific message."]}),"\n",(0,s.jsxs)(r.p,{children:["If a fatal error occurs during an attempt to validate the employee XML packet,\nthe error message is displayed in the ",(0,s.jsx)(r.code,{children:"statusText"})," text area, and the ",(0,s.jsx)(r.code,{children:"xmlText"}),"\nTextArea component instance and ",(0,s.jsx)(r.code,{children:"validateBtn"})," Button component instance are\ndisabled, as the following code shows:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'function showFatalError(error:FatalError):void\n{\n    var message:String = error.message + "\\n\\n";\n    var title:String = error.getTitle();\n    statusText.text = message + " " + title + "\\n\\nThis application has ended.";\n    this.xmlText.enabled = false;\n    this.validateBtn.enabled = false;\n    hideButtons();\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["If a warning error instead of a fatal error occurs, the error message is\ndisplayed in the ",(0,s.jsx)(r.code,{children:"statusText"})," TextArea instance, but the ",(0,s.jsx)(r.code,{children:"xmlText"})," TextField and\nButton component instances aren't disabled. The ",(0,s.jsx)(r.code,{children:"showWarningError()"})," method\ndisplays the custom error message in the ",(0,s.jsx)(r.code,{children:"statusText"})," text area. The message\nalso asks the user to decide if they want to proceed with validating the XML or\ncancel the script. The following excerpt shows the ",(0,s.jsx)(r.code,{children:"showWarningError()"})," method:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'function showWarningError(error:WarningError):void\n{\n    var message:String = error.message + "\\n\\n" + "Do you want to exit this application?";\n    showButtons();\n    var title:String = error.getTitle();\n    statusText.text = message;\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["When the user clicks either the Yes or No button, the ",(0,s.jsx)(r.code,{children:"closeHandler()"})," method is\ncalled. The following excerpt shows the ",(0,s.jsx)(r.code,{children:"closeHandler()"})," method:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'function closeHandler(event:CloseEvent):void\n{\n    switch (event.detail)\n    {\n        case yesButton:\n            showFatalError(new FatalError(9999));\n            break;\n        case noButton:\n            statusText.text = "";\n            hideButtons();\n            break;\n    }\n}\n'})}),"\n",(0,s.jsx)(r.p,{children:"If the user chooses to cancel the script by clicking Yes, a FatalError is\nthrown, causing the application to terminate."}),"\n",(0,s.jsx)(r.h2,{id:"building-a-custom-validator",children:"Building a custom validator"}),"\n",(0,s.jsxs)(r.p,{children:["The custom Validator class contains a single method, ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"}),".\nThe ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"})," method takes a single argument, ",(0,s.jsx)(r.code,{children:"employee"}),", which is\nthe XML packet that you want to validate. The ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"})," method is\nas follows:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"public static function validateEmployeeXML(employee:XML):void\n{\n    // checks for the integrity of items in the XML\n    if (employee.costCenter.length() < 1)\n    {\n        throw new FatalError(9000);\n    }\n    if (employee.costCenter.length() > 1)\n    {\n        throw new WarningError(9001);\n    }\n    if (employee.ssn.length() != 1)\n    {\n        throw new FatalError(9002);\n    }\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["To be validated, an employee must belong to one (and only one) cost center. If\nthe employee doesn't belong to any cost centers, the method throws a FatalError,\nwhich bubbles up to the ",(0,s.jsx)(r.code,{children:"validateData()"})," method in the main application file. If\nthe employee belongs to more than one cost center, a WarningError is thrown. The\nfinal check in the XML validator is that the user has exactly one social\nsecurity number defined (the ",(0,s.jsx)(r.code,{children:"ssn"})," node in the XML packet). If there is not\nexactly one ",(0,s.jsx)(r.code,{children:"ssn"})," node, a FatalError error is thrown."]}),"\n",(0,s.jsxs)(r.p,{children:["You can add additional checks to the ",(0,s.jsx)(r.code,{children:"validateEmployeeXML()"})," method\u2014for example,\nto ensure that the ",(0,s.jsx)(r.code,{children:"ssn"})," node contains a valid number, or that the employee has\nat least one phone number and e-mail address defined, and that both values are\nvalid. You can also modify the XML so that each employee has a unique ID and\nspecifies the ID of their manager."]}),"\n",(0,s.jsx)(r.h2,{id:"defining-the-applicationerror-class",children:"Defining the ApplicationError class"}),"\n",(0,s.jsx)(r.p,{children:"The ApplicationError class serves as the base class for both the FatalError and\nWarningError classes. The ApplicationError class extends the Error class, and\ndefines its own custom methods and properties, including defining an error ID,\nseverity, and an XML object that contains the custom error codes and messages.\nThis class also defines two static constants that are used to define the\nseverity of each error type."}),"\n",(0,s.jsx)(r.p,{children:"The ApplicationError class's constructor method is as follows:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'public function ApplicationError()\n{\n    messages =\n        <errors>\n            <error code="9000">\n                <![CDATA[Employee must be assigned to a cost center.]]>\n            </error>\n            <error code="9001">\n                <![CDATA[Employee must be assigned to only one cost center.]]>\n            </error>\n            <error code="9002">\n                <![CDATA[Employee must have one and only one SSN.]]>\n            </error>\n            <error code="9999">\n                <![CDATA[The application has been stopped.]]>\n            </error>\n        </errors>;\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["Each error node in the XML object contains a unique numeric code and an error\nmessage. Error messages can be easily looked up by their error code using E4X,\nas seen in the following ",(0,s.jsx)(r.code,{children:"getMessageText()"})," method:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"public function getMessageText(id:int):String\n{\n    var message:XMLList = messages.error.(@code == id);\n    return message[0].text();\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"getMessageText()"})," method takes a single integer argument, ",(0,s.jsx)(r.code,{children:"id"}),", and returns\na string. The ",(0,s.jsx)(r.code,{children:"id"})," argument is the error code for the error to look up. For\nexample, passing an ",(0,s.jsx)(r.code,{children:"id"})," of 9001 retrieves the error saying that employees must\nbe assigned to only one cost center. If more than one error has the same error\ncode, ActionScript returns the error message only for the first result found (\n",(0,s.jsx)(r.code,{children:"message[0]"})," in the returned XMLList object)."]}),"\n",(0,s.jsxs)(r.p,{children:["The next method in this class, ",(0,s.jsx)(r.code,{children:"getTitle()"}),", doesn't take any parameters and\nreturns a string value that contains the error ID for this specific error. This\nvalue is used to help you easily identify the exact error that occurred during\nvalidation of the XML packet. The following excerpt shows the ",(0,s.jsx)(r.code,{children:"getTitle()"}),"\nmethod:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'public function getTitle():String\n{\n    return "Error #" + id;\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["The final method in the ApplicationError class is ",(0,s.jsx)(r.code,{children:"toString()."})," This method\noverrides the function defined in the Error class so that you can customize the\npresentation of the error message. The method returns a string that identifies\nthe specific error number and message that occurred."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'public override function toString():String\n{\n    return "[APPLICATION ERROR #" + id + "] " + message;\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"defining-the-fatalerror-class",children:"Defining the FatalError class"}),"\n",(0,s.jsxs)(r.p,{children:["The FatalError class extends the custom ApplicationError class and defines three\nmethods: the FatalError constructor, ",(0,s.jsx)(r.code,{children:"getTitle()"}),", and ",(0,s.jsx)(r.code,{children:"toString()"}),". The first\nmethod, the FatalError constructor, takes a single integer argument, ",(0,s.jsx)(r.code,{children:"errorID"}),",\nand sets the error's severity using the static constant values defined in the\nApplicationError class, and gets the specific error's error message by calling\nthe ",(0,s.jsx)(r.code,{children:"getMessageText()"})," method in the ApplicationError class. The FatalError\nconstructor is as follows:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"public function FatalError(errorID:int)\n{\n    id = errorID;\n    severity = ApplicationError.FATAL;\n    message = getMessageText(errorID);\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The next method in the FatalError class, ",(0,s.jsx)(r.code,{children:"getTitle()"}),", overrides the\n",(0,s.jsx)(r.code,{children:"getTitle()"}),' method defined earlier in the ApplicationError class, and appends\nthe text "-- FATAL" in the title to inform the user that a fatal error has\noccurred. The ',(0,s.jsx)(r.code,{children:"getTitle()"})," method is as follows:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'public override function getTitle():String\n{\n    return "Error #" + id + " -- FATAL";\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["The final method in this class, ",(0,s.jsx)(r.code,{children:"toString()"}),", overrides the ",(0,s.jsx)(r.code,{children:"toString()"})," method\ndefined in the ApplicationError class. The ",(0,s.jsx)(r.code,{children:"toString()"})," method is"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:'public override function toString():String\n{\n    return "[FATAL ERROR #" + id + "] " + message;\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"defining-the-warningerror-class",children:"Defining the WarningError class"}),"\n",(0,s.jsx)(r.p,{children:"The WarningError class extends the ApplicationError class and is nearly\nidentical to the FatalError class, except for a couple minor string changes and\nsets the error severity to ApplicationError.WARNING instead of\nApplicationError.FATAL, as seen in the following code:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"public function WarningError(errorID:int)\n{\n    id = errorID;\n    severity = ApplicationError.WARNING;\n    message = super.getMessageText(errorID);\n}\n"})})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var t=n(96540);const s={},o=t.createContext(s);function i(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);