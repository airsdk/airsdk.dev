"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[52589],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var s=t(96540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},71482:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>r});const s=JSON.parse('{"id":"development/rich-media-content/working-with-sound/sound-example-podcast-player","title":"Sound example: Podcast Player","description":"A podcast is a sound file that is distributed over the Internet, on demand or by","source":"@site/docs/development/rich-media-content/working-with-sound/sound-example-podcast-player.md","sourceDirName":"development/rich-media-content/working-with-sound","slug":"/development/rich-media-content/working-with-sound/sound-example-podcast-player","permalink":"/docs/development/rich-media-content/working-with-sound/sound-example-podcast-player","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/sound-example-podcast-player.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"mainSidebar","previous":{"title":"Capturing sound input","permalink":"/docs/development/rich-media-content/working-with-sound/capturing-sound-input"},"next":{"title":"Working with video","permalink":"/docs/development/rich-media-content/working-with-video/"}}');var a=t(74848),i=t(28453);const o={sidebar_position:13},d="Sound example: Podcast Player",l={},r=[{value:"Reading RSS data for a podcast channel",id:"reading-rss-data-for-a-podcast-channel",level:2},{value:"Simplifying sound loading and playback using the SoundFacade class",id:"simplifying-sound-loading-and-playback-using-the-soundfacade-class",level:2},{value:"Displaying playback progress",id:"displaying-playback-progress",level:2},{value:"Pausing and resuming playback",id:"pausing-and-resuming-playback",level:2},{value:"Extending the Podcast Player example",id:"extending-the-podcast-player-example",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sound-example-podcast-player",children:"Sound example: Podcast Player"})}),"\n",(0,a.jsx)(n.p,{children:"A podcast is a sound file that is distributed over the Internet, on demand or by\nsubscription. Podcasts are usually published as part of a series, which is also\ncalled a podcast channel. Because podcast episodes can last anywhere from one\nminute to many hours, they are usually streamed while playing. Podcast episodes,\nwhich are also called items, are usually delivered in the mp3 file format. Video\npodcasts are also popular, but this sample application plays only audio podcasts\nthat use mp3 files."}),"\n",(0,a.jsx)(n.p,{children:"This example is not a full-featured podcast aggregator application. For example,\nit does not manage subscriptions to specific podcasts or remember which podcasts\nthe user has listened to the next time the application is run. It could serve as\na starting point for a more full-featured podcast aggregator."}),"\n",(0,a.jsx)(n.p,{children:"The Podcast Player example illustrates the following ActionScript programming\ntechniques:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Reading an external RSS feed and parsing its XML content"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Creating a SoundFacade class to simplify loading and playback of sound files"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Displaying sound playback progress"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Pausing and resuming sound playback"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To get the application files for this sample, see\n",(0,a.jsx)(n.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,a.jsx)(n.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe Podcast Player application files can be found in the folder\nSamples/PodcastPlayer. The application consists of the following files:"]}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:(0,a.jsx)("p",{children:"File"})}),(0,a.jsx)("th",{children:(0,a.jsx)("p",{children:"Description"})})]})}),(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{children:[(0,a.jsx)("p",{children:"PodcastPlayer.mxml"}),"\n",(0,a.jsx)("p",{children:"or"}),"\n",(0,a.jsx)("p",{children:"PodcastPlayer.fla"})]}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"The user\ninterface for the application for Flex (MXML) or Flash (FLA)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"comp/example/programmingas3/podcastplayer/PodcastPlayer.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Document\nclass containing the user interface logic for the podcast player (Flash\nonly)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"SoundPlayer.mxml"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"An MXML\ncomponent that displays playback buttons and progress bars and controls\nsound playback, for Flex only."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"main.css"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Styles for\nthe application user interface (Flex only)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"images/"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Icons for\nstyling the buttons (Flex only)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"comp/example/programmingas3/podcastplayer/SoundPlayer.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Class for the\nSoundPlayer movie clip symbol containing the user interface logic for\nthe sound player (Flash only)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"comp/example/programmingas3/podcastplayer/PlayButtonRenderer.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Custom cell\nrenderer for displaying a play button in a data grid cell (Flash\nonly)."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/podcastplayer/RSSBase.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"A base class\nthat provides common properties and methods for the RSSChannel class and\nthe RSSItem class."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/podcastplayer/RSSChannel.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"An\nActionScript class that holds data about an RSS channel."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/podcastplayer/RSSItem.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"An\nActionScript class that holds data about an RSS item."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/podcastplayer/SoundFacade.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"The main\nActionScript class for the application. It encapsulates the methods and\nevents of the Sound class and the SoundChannel class and adds support\nfor pausing and resuming playback."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/podcastplayer/URLService.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"An\nActionScript class that retrieves data from a remote URL."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"playerconfig.xml"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"An XML file\ncontaining a list of RSS feeds that represent podcast channels."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"comp/example/programmingas3/utils/DateUtil.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"Class that is\nused for easy date formatting (Flash only)."})})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"reading-rss-data-for-a-podcast-channel",children:"Reading RSS data for a podcast channel"}),"\n",(0,a.jsx)(n.p,{children:"The Podcast Player application starts by reading information about a number of\npodcast channels and their episodes:"}),"\n",(0,a.jsx)(n.p,{children:"1. First, the application reads an XML configuration file that contains a list\nof podcast channels and displays the list of channels to the user."}),"\n",(0,a.jsx)(n.p,{children:"2. When the user selects one of the podcast channels, it reads the RSS feed for\nthe channel and displays a list of the channel episodes."}),"\n",(0,a.jsx)(n.p,{children:"This example uses the URLLoader utility class to retrieve text-based data from a\nremote location or a local file. The Podcast Player first creates a URLLoader\nobject to get a list of RSS feeds in XML format from the playerconfig.xml file.\nNext, when the user selects a specific feed from the list, a new URLLoader\nobject is created to read the RSS data from that feed's URL."}),"\n",(0,a.jsx)(n.h2,{id:"simplifying-sound-loading-and-playback-using-the-soundfacade-class",children:"Simplifying sound loading and playback using the SoundFacade class"}),"\n",(0,a.jsxs)(n.p,{children:["The ActionScript 3.0 sound architecture is powerful but complex. Applications\nthat only need basic sound loading and playback features can use a class that\nhides some of the complexity by providing a simpler set of method calls and\nevents. In the world of software design patterns, such a class is called a\n",(0,a.jsx)(n.em,{children:"facade"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"The SoundFacade class presents a single interface for performing the following\ntasks:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Loading sound files using a Sound object, a SoundLoaderContext object, and the\nSoundMixer class"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Playing sound files using the Sound object and the SoundChannel object"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Dispatching playback progress events"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Pausing and resuming playback of the sound using the Sound object and the\nSoundChannel object"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The SoundFacade class tries to offer most of the functionality of the\nActionScript sound classes with less complexity."}),"\n",(0,a.jsxs)(n.p,{children:["The following code shows the class declaration, the class properties, and the\n",(0,a.jsx)(n.code,{children:"SoundFacade()"})," constructor method:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'public class SoundFacade extends EventDispatcher\n{\n\tpublic var s:Sound;\n\tpublic var sc:SoundChannel;\n\tpublic var url:String;\n\tpublic var bufferTime:int = 1000;\n\n\tpublic var isLoaded:Boolean = false;\n\tpublic var isReadyToPlay:Boolean = false;\n\tpublic var isPlaying:Boolean = false;\n\tpublic var isStreaming:Boolean = true;\n\tpublic var autoLoad:Boolean = true;\n\tpublic var autoPlay:Boolean = true;\n\n\tpublic var pausePosition:int = 0;\n\n\tpublic static const PLAY_PROGRESS:String = "playProgress";\n\tpublic var progressInterval:int = 1000;\n\tpublic var playTimer:Timer;\n\n\tpublic function SoundFacade(soundUrl:String, autoLoad:Boolean = true,\n\t\t\t\t\t\t\t\t\tautoPlay:Boolean = true, streaming:Boolean = true,\n\t\t\t\t\t\t\t\t\tbufferTime:int = -1):void\n\t{\n\t\tthis.url = soundUrl;\n\n\t\t// Sets Boolean values that determine the behavior of this object\n\t\tthis.autoLoad = autoLoad;\n\t\tthis.autoPlay = autoPlay;\n\t\tthis.isStreaming = streaming;\n\n\t\t// Defaults to the global bufferTime value\n\t\tif (bufferTime < 0)\n\t\t{\n\t\t\tbufferTime = SoundMixer.bufferTime;\n\t\t}\n\n\t\t// Keeps buffer time reasonable, between 0 and 30 seconds\n\t\tthis.bufferTime = Math.min(Math.max(0, bufferTime), 30000);\n\n\t\tif (autoLoad)\n\t\t{\n\t\t\tload();\n\t\t}\n\t}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The SoundFacade class extends the EventDispatcher class so that it can dispatch\nits own events. The class code first declares properties for a Sound object and\na SoundChannel object. The class also stores the value of the URL of the sound\nfile and a ",(0,a.jsx)(n.code,{children:"bufferTime"})," property to use when streaming the sound. In addition,\nit accepts some Boolean parameter values that affect the loading and playback\nbehavior:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"autoLoad"})," parameter tells the object that sound loading should start as\nsoon as this object is created."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"autoPlay"})," parameter indicates that sound playing should start as soon as\nenough sound data has been loaded. If this is a streaming sound, playback will\nbegin as soon as enough data, as specified by the ",(0,a.jsx)(n.code,{children:"bufferTime"})," property, has\nloaded."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"streaming"})," parameter indicates that this sound file can start playing\nbefore loading has completed."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"bufferTime"})," parameter defaults to a value of -1. If the constructor method\ndetects a negative value in the ",(0,a.jsx)(n.code,{children:"bufferTime"})," parameter, it sets the ",(0,a.jsx)(n.code,{children:"bufferTime"}),"\nproperty to the value of ",(0,a.jsx)(n.code,{children:"SoundMixer.bufferTime"}),". This lets the application\ndefault to the global ",(0,a.jsx)(n.code,{children:"SoundMixer.bufferTime"})," value as desired."]}),"\n",(0,a.jsxs)(n.p,{children:["If the ",(0,a.jsx)(n.code,{children:"autoLoad"})," parameter is set to ",(0,a.jsx)(n.code,{children:"true"}),", the constructor method immediately\ncalls the following ",(0,a.jsx)(n.code,{children:"load()"})," method to start loading the sound file:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function load():void\n{\n\tif (this.isPlaying)\n\t{\n\t\tthis.stop();\n\t\tthis.s.close();\n\t}\n\tthis.isLoaded = false;\n\n\tthis.s = new Sound();\n\n\tthis.s.addEventListener(ProgressEvent.PROGRESS, onLoadProgress);\n\tthis.s.addEventListener(Event.OPEN, onLoadOpen);\n\tthis.s.addEventListener(Event.COMPLETE, onLoadComplete);\n\tthis.s.addEventListener(Event.ID3, onID3);\n\tthis.s.addEventListener(IOErrorEvent.IO_ERROR, onIOError);\n\tthis.s.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onIOError);\n\n\tvar req:URLRequest = new URLRequest(this.url);\n\n\tvar context:SoundLoaderContext = new SoundLoaderContext(this.bufferTime, true);\n\tthis.s.load(req, context);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"load()"})," method creates a new Sound object and then adds listeners for all\nof the important sound events. Then it tells the Sound object to load the sound\nfile, using a SoundLoaderContext object to pass in the ",(0,a.jsx)(n.code,{children:"bufferTime"})," value."]}),"\n",(0,a.jsxs)(n.p,{children:["Because the ",(0,a.jsx)(n.code,{children:"url"})," property can be changed, a SoundFacade instance can be used to\nplay different sound files in succession: simply change the ",(0,a.jsx)(n.code,{children:"url"})," property and\ncall the ",(0,a.jsx)(n.code,{children:"load()"})," method, and the new sound file will be loaded."]}),"\n",(0,a.jsx)(n.p,{children:"The following three event listener methods show how the SoundFacade object\ntracks loading progress and decides when to start playing the sound:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function onLoadOpen(event:Event):void\n{\n\tif (this.isStreaming)\n\t{\n\t\tthis.isReadyToPlay = true;\n\t\tif (autoPlay)\n\t\t{\n\t\t\tthis.play();\n\t\t}\n\t}\n\tthis.dispatchEvent(event.clone());\n}\n\npublic function onLoadProgress(event:ProgressEvent):void\n{\n\tthis.dispatchEvent(event.clone());\n}\n\npublic function onLoadComplete(event:Event):void\n{\n\tthis.isReadyToPlay = true;\n\tthis.isLoaded = true;\n\tthis.dispatchEvent(evt.clone());\n\n\tif (autoPlay && !isPlaying)\n\t{\n\t\tplay();\n\t}\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"onLoadOpen()"})," method executes when sound loading starts. If the sound can\nbe played in streaming mode, the ",(0,a.jsx)(n.code,{children:"onLoadComplete()"})," method sets the\n",(0,a.jsx)(n.code,{children:"isReadyToPlay"})," flag to ",(0,a.jsx)(n.code,{children:"true"})," right away. The ",(0,a.jsx)(n.code,{children:"isReadyToPlay"})," flag determines\nwhether the application can start the sound playing, perhaps in response to a\nuser action like clicking a Play button. The SoundChannel class manages the\nbuffering of sound data, so there is no need to explicitly check whether enough\ndata has been loaded before calling the ",(0,a.jsx)(n.code,{children:"play()"})," method."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"onLoadProgress()"})," method executes periodically during the loading process.\nIt simply dispatches a clone of its ProgressEvent object for use by code that\nuses this SoundFacade object."]}),"\n",(0,a.jsxs)(n.p,{children:["When the sound data has been fully loaded the ",(0,a.jsx)(n.code,{children:"onLoadComplete()"})," method\nexecutes, calling the ",(0,a.jsx)(n.code,{children:"play()"})," method for non-streaming sounds if needed. The\n",(0,a.jsx)(n.code,{children:"play("}),") method itself is shown below."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function play(pos:int = 0):void\n{\n\tif (!this.isPlaying)\n\t{\n\t\tif (this.isReadyToPlay)\n\t\t{\n\t\t\tthis.sc = this.s.play(pos);\n\t\t\tthis.sc.addEventListener(Event.SOUND_COMPLETE, onPlayComplete);\n\t\t\tthis.isPlaying = true;\n\n\t\t\tthis.playTimer = new Timer(this.progressInterval);\n\t\t\tthis.playTimer.addEventListener(TimerEvent.TIMER, onPlayTimer);\n\t\t\tthis.playTimer.start();\n\t\t}\n\t}\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"play()"})," method calls the ",(0,a.jsx)(n.code,{children:"Sound.play()"})," method if the sound is ready to\nplay. The resulting SoundChannel object is stored in the ",(0,a.jsx)(n.code,{children:"sc"})," property. The\n",(0,a.jsx)(n.code,{children:"play()"})," method then creates a Timer object that will be used to dispatch\nplayback progress events at regular intervals."]}),"\n",(0,a.jsx)(n.h2,{id:"displaying-playback-progress",children:"Displaying playback progress"}),"\n",(0,a.jsx)(n.p,{children:"Creating a Timer object to drive playback monitoring is complex operation that\nyou should only have to code once. Encapsulating this Timer logic in a reusable\nclass like the SoundFacade class lets applications listen to the same kinds of\nprogress events when a sound is loading and when it is playing."}),"\n",(0,a.jsxs)(n.p,{children:["The Timer object that is created by the ",(0,a.jsx)(n.code,{children:"SoundFacade.play()"})," method dispatches a\nTimerEvent instance every second. The following ",(0,a.jsx)(n.code,{children:"onPlayTimer()"})," method executes\nwhenever a new TimerEvent arrives:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function onPlayTimer(event:TimerEvent):void\n{\n\tvar estimatedLength:int =\n\t\tMath.ceil(this.s.length / (this.s.bytesLoaded / this.s.bytesTotal));\n\tvar progEvent:ProgressEvent =\n\t\tnew ProgressEvent(PLAY_PROGRESS, false, false, this.sc.position, estimatedLength);\n\tthis.dispatchEvent(progEvent);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"onPlayTimer()"})," method implements the size estimation technique described in\nthe section ",(0,a.jsx)(n.a,{href:"/docs/development/rich-media-content/working-with-sound/playing-sounds#monitoring-playback",children:"Monitoring playback"}),". Then\nit creates a new ProgressEvent instance with an event type of\n",(0,a.jsx)(n.code,{children:"SoundFacade.PLAY_PROGRESS"}),", with the ",(0,a.jsx)(n.code,{children:"bytesLoaded"})," property set to the current\nposition of the SoundChannel object and the ",(0,a.jsx)(n.code,{children:"bytesTotal"})," property set to the\nestimated length of the sound data."]}),"\n",(0,a.jsx)(n.h2,{id:"pausing-and-resuming-playback",children:"Pausing and resuming playback"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"SoundFacade.play()"})," method shown previously accepts a ",(0,a.jsx)(n.code,{children:"pos"})," parameter\ncorresponding to a starting position in the sound data. If the ",(0,a.jsx)(n.code,{children:"pos"})," value is\nzero, the sound starts playing from the beginning."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"SoundFacade.stop()"})," method also accepts a ",(0,a.jsx)(n.code,{children:"pos"})," parameter as shown here:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function stop(pos:int = 0):void\n{\n\tif (this.isPlaying)\n\t{\n\t\tthis.pausePosition = pos;\n\t\tthis.sc.stop();\n\t\tthis.playTimer.stop();\n\t\tthis.isPlaying = false;\n\t}\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Whenever the ",(0,a.jsx)(n.code,{children:"SoundFacade.stop()"})," method is called, it sets the ",(0,a.jsx)(n.code,{children:"pausePosition"}),"\nproperty so that the application knows where to position the playhead if the\nuser wants to resume playback of the same sound."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"SoundFacade.pause()"})," and ",(0,a.jsx)(n.code,{children:"SoundFacade.resume()"})," methods shown below invoke\nthe ",(0,a.jsx)(n.code,{children:"SoundFacade.stop()"})," and ",(0,a.jsx)(n.code,{children:"SoundFacade.play()"})," methods respectively, passing\na ",(0,a.jsx)(n.code,{children:"pos"})," parameter value each time."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"public function pause():void\n{\n\tstop(this.sc.position);\n}\n\npublic function resume():void\n{\n\tplay(this.pausePosition);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"pause()"})," method passes the current ",(0,a.jsx)(n.code,{children:"SoundChannel.position"})," value to the\n",(0,a.jsx)(n.code,{children:"play()"})," method, which stores that value in the ",(0,a.jsx)(n.code,{children:"pausePosition"})," property. The\n",(0,a.jsx)(n.code,{children:"resume()"})," method starts playing the same sound again using the ",(0,a.jsx)(n.code,{children:"pausePosition"}),"\nvalue as the starting point."]}),"\n",(0,a.jsx)(n.h2,{id:"extending-the-podcast-player-example",children:"Extending the Podcast Player example"}),"\n",(0,a.jsx)(n.p,{children:"This example presents a bare-bones Podcast Player that showcases the use of the\nreusable SoundFacade class. You could add other features to enhance the\nusefulness of this application, including the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Store the list of feeds and usage information about each episode in a\nSharedObject instance that can be used the next time the user runs the\napplication."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Let the user add his or her own RSS feeds to the list of podcast channels."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Remember the position of the playhead when the user stops or leaves an\nepisode, so it can be restarted from that point next time the user runs the\napplication."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Download mp3 files of episodes for listening offline, when the user is not\nconnected to the Internet."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Add subscription features that periodically check for new episodes in a\npodcast channel and update the episode list automatically."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Add podcast searching and browsing functionality using an API from a podcast\nhosting service like Odeo.com."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);