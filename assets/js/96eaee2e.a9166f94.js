"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[23329],{25581:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling","title":"Gesture event handling","description":"Handle gesture events in the same way as basic touch events. You can listen for","source":"@site/docs/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling.md","sourceDirName":"development/user-interaction/touch-multitouch-and-gesture-input","slug":"/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Touch and drag","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag"},"next":{"title":"Troubleshooting","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/troubleshooting"}}');var i=n(74848),s=n(28453);const a={sidebar_position:5},o="Gesture event handling",d={},l=[{value:"Gesture Event properties",id:"gesture-event-properties",level:2},{value:"Gesture phases",id:"gesture-phases",level:2},{value:"Gesture phase is &quot;all&quot; for simple gesture events",id:"gesture-phase-is-all-for-simple-gesture-events",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"gesture-event-handling",children:"Gesture event handling"})}),"\n",(0,i.jsxs)(t.p,{children:["Handle gesture events in the same way as basic touch events. You can listen for\na series of gesture events defined by the event type constants in the\n",(0,i.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/TransformGestureEvent.html",children:"TransformGestureEvent"}),"\nclass, the\n",(0,i.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/GestureEvent.html",children:"GestureEvent"}),"\nclass and the\n",(0,i.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/PressAndTapGestureEvent.html",children:"PressAndTapGestureEvent"}),"\nclass."]}),"\n",(0,i.jsx)(t.p,{children:"To handle a gesture touch event:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Set your application to handle gesture input by setting the"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"`flash.ui.Multitouch.inputMode` property to `MultitouchInputMode.GESTURE`.\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"Attach an event listener to an instance of a class that inherits properties"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"from the InteractiveObject class, such as Sprite or TextField.\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Specify the type of gesture event to handle."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"Call an event handler function to do something in response to the event."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For example, the following code displays a message when the square drawn on\n",(0,i.jsx)(t.code,{children:"mySprite"})," is swiped on a touch-enabled screen:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Multitouch.inputMode=MultitouchInputMode.GESTURE;\n\nvar mySprite:Sprite = new Sprite();\nvar myTextField:TextField = new TextField();\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0,0,40,40);\naddChild(mySprite);\n\nmySprite.addEventListener(TransformGestureEvent.GESTURE_SWIPE, swipehandler);\n\nfunction swipehandler(evt:TransformGestureEvent): void {\n\tmyTextField.text = "I\'ve been swiped";\n\tmyTextField.y = 50;\n\taddChild(myTextField);\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Two-finger tap events are handled the same way, but use the GestureEvent class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Multitouch.inputMode=MultitouchInputMode.GESTURE;\n\nvar mySprite:Sprite = new Sprite();\nvar myTextField:TextField = new TextField();\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0,0,40,40);\naddChild(mySprite);\n\nmySprite.addEventListener(GestureEvent.GESTURE_TWO_FINGER_TAP, taphandler);\n\nfunction taphandler(evt:GestureEvent): void {\n\tmyTextField.text = "I\'ve been two-finger tapped";\n\tmyTextField.y = 50;\n\taddChild(myTextField);\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Press-and-tap events are also handled the same way, but use the\nPressAndTapGestureEvent class:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Multitouch.inputMode=MultitouchInputMode.GESTURE;\n\nvar mySprite:Sprite = new Sprite();\nvar myTextField:TextField = new TextField();\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0,0,40,40);\naddChild(mySprite);\n\nmySprite.addEventListener(PressAndTapGestureEvent.ESTURE_PRESS_AND_TAP, taphandler);\n\nfunction taphandler(evt:PressAndTapGestureEvent): void {\n\tmyTextField.text = "I\'ve been press-and-tapped";\n\tmyTextField.y = 50;\n\taddChild(myTextField);\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Note: Not all GestureEvent, TransformGestureEvent, and PressAndTapGestureEvent\nevent types are supported in all runtime environments. For example, not all\ntouch-enabled devices are capable or detecting a multi-finger swipe. So, the\nInteractiveObject ",(0,i.jsx)(t.code,{children:"gestureSwipe"})," events are not supported on those devices. Try\ntesting for specific event support to ensure your application works, and see\n",(0,i.jsx)(t.a,{href:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/troubleshooting",children:"Troubleshooting"})," for more information."]}),"\n",(0,i.jsx)(t.h2,{id:"gesture-event-properties",children:"Gesture Event properties"}),"\n",(0,i.jsx)(t.p,{children:"Gesture events have a smaller scope of event properties than basic touch events.\nYou access them the same way, through the event object in the event handler\nfunction."}),"\n",(0,i.jsxs)(t.p,{children:["For example, the following code rotates ",(0,i.jsx)(t.code,{children:"mySprite"})," as the user performs a\nrotation gesture on it. The text field shows the amount of rotation since the\nlast gesture (when testing this code, rotate it several times to see the values\nchange):"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Multitouch.inputMode=MultitouchInputMode.GESTURE;\n\nvar mySprite:Sprite = new Sprite();\nvar mySpriteCon:Sprite = new Sprite();\nvar myTextField:TextField = new TextField();\nmyTextField.y = 50;\naddChild(myTextField);\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(-20,-20,40,40);\nmySpriteCon.addChild(mySprite);\nmySprite.x = 20;\nmySprite.y = 20;\naddChild(mySpriteCon);\n\nmySprite.addEventListener(TransformGestureEvent.GESTURE_ROTATE, rothandler);\n\nfunction rothandler(evt:TransformGestureEvent): void {\n\tevt.target.parent.rotationZ += evt.target.rotation;\n\tmyTextField.text = evt.target.parent.rotation.toString();\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Note: Not all TransformGestureEvent properties are supported in all runtime\nenvironments. For example, not all touch-enabled devices are capable or\ndetecting the rotation of a gesture on the screen. So, the\n",(0,i.jsx)(t.code,{children:"TransformGestureEvent.rotation"})," property is not supported on those devices. Try\ntesting for specific property support to ensure your application works, and see\n",(0,i.jsx)(t.a,{href:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/troubleshooting",children:"Troubleshooting"})," for more information."]}),"\n",(0,i.jsx)(t.h2,{id:"gesture-phases",children:"Gesture phases"}),"\n",(0,i.jsx)(t.p,{children:"Additionally, the gesture events can be tracked through phases, so you can track\nproperties as the gesture is taking place. For example, you can track\nx-coordinates as an object is moved with a swipe gesture. Use those values to\ndraw a line through all the points in its path after the swipe is complete. Or,\nvisually change a display object as it is dragged across a screen using a pan\ngesture. Change the object again once the pan gesture is complete."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Multitouch.inputMode = MultitouchInputMode.GESTURE;\nvar mySprite = new Sprite();\nmySprite.addEventListener(TransformGestureEvent.GESTURE_PAN , onPan);\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0, 0, 40, 40);\nvar myTextField = new TextField();\nmyTextField.y = 200;\naddChild(mySprite);\naddChild(myTextField);\n\nfunction onPan(evt:TransformGestureEvent):void {\n\tevt.target.localX++;\n\n\tif (evt.phase==GesturePhase.BEGIN) {\n\t\tmyTextField.text = "Begin";\n\t\tevt.target.scaleX *= 1.5;\n\t\tevt.target.scaleY *= 1.5;\n\t}\n\tif (evt.phase==GesturePhase.UPDATE) {\n\t\tmyTextField.text = "Update";\n\t\tevt.target.alpha = 0.5;\n\t}\n\tif (evt.phase==GesturePhase.END) {\n\t\tmyTextField.text = "End";\n\t\tevt.target.width = 40;\n\t\tevt.target.height = 40;\n\t\tevt.target.alpha = 1;\n\t}\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"Note: The frequency of the update phase depends on the runtime's environment.\nSome operating system and hardware combinations do not relay updates at all."}),"\n",(0,i.jsx)(t.h3,{id:"gesture-phase-is-all-for-simple-gesture-events",children:'Gesture phase is "all" for simple gesture events'}),"\n",(0,i.jsxs)(t.p,{children:["Some gesture event objects do not track individual phases of the gesture event,\nand instead populate the event object's phase property with the value all. The\nsimple gestures swipe and two-finger tap do not track the event by multiple\nphases. The ",(0,i.jsx)(t.code,{children:"phase"})," property of the event object for an InteractiveObject\nlistening for the ",(0,i.jsx)(t.code,{children:"gestureSwipe"})," or ",(0,i.jsx)(t.code,{children:"gestureTwoFingerTap"})," events is always ",(0,i.jsx)(t.code,{children:"all"}),"\nonce the event is dispatched:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'Multitouch.inputMode = MultitouchInputMode.GESTURE;\nvar mySprite = new Sprite();\nmySprite.addEventListener(TransformGestureEvent.GESTURE_SWIPE, onSwipe);\nmySprite.addEventListener(GestureEvent.GESTURE_TWO_FINGER_TAP, onTwoTap);\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0, 0, 40, 40);\nvar myTextField = new TextField();\nmyTextField.y = 200;\naddChild(mySprite);\naddChild(myTextField);\n\nfunction onSwipe(swipeEvt:TransformGestureEvent):void {\n\tmyTextField.text = swipeEvt.phase // Output is "all"\n}\nfunction onTwoTap(tapEvt:GestureEvent):void {\n\tmyTextField.text = tapEvt.phase // Output is "all"\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const i={},s=r.createContext(i);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);