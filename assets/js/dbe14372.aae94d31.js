"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[62203],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(96540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},96703:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements","title":"Working with SQL statements","description":"An individual SQL statement (a query or command) is represented in the runtime","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/working-with-sql-statements.md","tags":[],"version":"current","sidebarPosition":7.2,"frontMatter":{"sidebar_position":7.2},"sidebar":"mainSidebar","previous":{"title":"Connecting to a database","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/connecting-to-a-database"},"next":{"title":"Using parameters in statements","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements"}}');var a=n(74848),i=n(28453);const r={sidebar_position:7.2},o="Working with SQL statements",d={},c=[{value:"Create a SQLStatement instance.",id:"create-a-sqlstatement-instance",level:4},{value:"Specify which database the query runs against.",id:"specify-which-database-the-query-runs-against",level:4},{value:"Specify the actual SQL statement.",id:"specify-the-actual-sql-statement",level:4},{value:"Define functions to handle the result of the execute operation (asynchronous execution mode only).",id:"define-functions-to-handle-the-result-of-the-execute-operation-asynchronous-execution-mode-only",level:4},{value:"If the statement text includes parameter definitions, assign values for those parameters.",id:"if-the-statement-text-includes-parameter-definitions-assign-values-for-those-parameters",level:4},{value:"Execute the SQL statement.",id:"execute-the-sql-statement",level:4}];function l(e){const t={a:"a",code:"code",h1:"h1",h4:"h4",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"working-with-sql-statements",children:"Working with SQL statements"})}),"\n",(0,a.jsxs)(t.p,{children:["An individual SQL statement (a query or command) is represented in the runtime\nas a\n",(0,a.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\nobject. Follow these steps to create and execute a SQL statement:"]}),"\n",(0,a.jsx)(t.h4,{id:"create-a-sqlstatement-instance",children:"Create a SQLStatement instance."}),"\n",(0,a.jsx)(t.p,{children:"The SQLStatement object represents the SQL statement in your application."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"var selectData:SQLStatement = new SQLStatement();\n"})}),"\n",(0,a.jsx)(t.h4,{id:"specify-which-database-the-query-runs-against",children:"Specify which database the query runs against."}),"\n",(0,a.jsxs)(t.p,{children:["To do this, set the SQLStatement object's ",(0,a.jsx)(t.code,{children:"sqlConnection"})," property to the\n",(0,a.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html",children:"SQLConnection"}),"\ninstance that's connected with the desired database."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'// A SQLConnection named "conn" has been created previously\nselectData.sqlConnection = conn;\n'})}),"\n",(0,a.jsx)(t.h4,{id:"specify-the-actual-sql-statement",children:"Specify the actual SQL statement."}),"\n",(0,a.jsxs)(t.p,{children:["Create the statement text as a String and assign it to the SQLStatement\ninstance's ",(0,a.jsx)(t.code,{children:"text"})," property."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'selectData.text = "SELECT col1, col2 FROM my_table WHERE col1 = :param1";\n'})}),"\n",(0,a.jsx)(t.h4,{id:"define-functions-to-handle-the-result-of-the-execute-operation-asynchronous-execution-mode-only",children:"Define functions to handle the result of the execute operation (asynchronous execution mode only)."}),"\n",(0,a.jsxs)(t.p,{children:["Use the ",(0,a.jsx)(t.code,{children:"addEventListener()"})," method to register functions as listeners for the\nSQLStatement instance's ",(0,a.jsx)(t.code,{children:"result"})," and ",(0,a.jsx)(t.code,{children:"error"})," events."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"// using listener methods and addEventListener()\n\nselectData.addEventListener(SQLEvent.RESULT, resultHandler);\nselectData.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\nfunction resultHandler(event:SQLEvent):void\n{\n\t// do something after the statement execution succeeds\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n\t// do something after the statement execution fails\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Alternatively, you can specify listener methods using a\n",(0,a.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/Responder.html",children:"Responder"}),"\nobject. In that case you create the Responder instance and link the listener\nmethods to it."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"// using a Responder (flash.net.Responder)\n\nvar selectResponder = new Responder(onResult, onError);\n\nfunction onResult(result:SQLResult):void\n{\n\t// do something after the statement execution succeeds\n}\n\nfunction onError(error:SQLError):void\n{\n\t// do something after the statement execution fails\n}\n"})}),"\n",(0,a.jsx)(t.h4,{id:"if-the-statement-text-includes-parameter-definitions-assign-values-for-those-parameters",children:"If the statement text includes parameter definitions, assign values for those parameters."}),"\n",(0,a.jsxs)(t.p,{children:["To assign parameter values, use the SQLStatement instance's ",(0,a.jsx)(t.code,{children:"parameters"}),"\nassociative array property."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'selectData.parameters[":param1"] = 25;\n'})}),"\n",(0,a.jsx)(t.h4,{id:"execute-the-sql-statement",children:"Execute the SQL statement."}),"\n",(0,a.jsxs)(t.p,{children:["Call the SQLStatement instance's ",(0,a.jsx)(t.code,{children:"execute()"})," method."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"// using synchronous execution mode\n// or listener methods in asynchronous execution mode\nselectData.execute();\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Additionally, if you're using a Responder instead of event listeners in\nasynchronous execution mode, pass the Responder instance to the ",(0,a.jsx)(t.code,{children:"execute()"}),"\nmethod."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"// using a Responder in asynchronous execution mode\nselectData.execute(-1, selectResponder);\n"})}),"\n",(0,a.jsx)(t.p,{children:"For specific examples that demonstrate these steps, see the following topics:"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database",children:"Retrieving data from a database"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data",children:"Inserting data"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-local-sql-databases-in-air/changing-or-deleting-data",children:"Changing or deleting data"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);