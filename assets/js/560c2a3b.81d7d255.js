"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[30873],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(96540);const a={},r=i.createContext(a);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},48986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"development/core-actionscript-classes/working-with-xml/initialising-xml-variables","title":"Initializing XML variables","description":"You can assign an XML literal to an XML object, as follows:","source":"@site/docs/development/core-actionscript-classes/working-with-xml/initialising-xml-variables.md","sourceDirName":"development/core-actionscript-classes/working-with-xml","slug":"/development/core-actionscript-classes/working-with-xml/initialising-xml-variables","permalink":"/docs/development/core-actionscript-classes/working-with-xml/initialising-xml-variables","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-xml/initialising-xml-variables.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Initializing XML variables","sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"XMLList objects","permalink":"/docs/development/core-actionscript-classes/working-with-xml/xmllist-objects"},"next":{"title":"Assembling and transforming XML objects","permalink":"/docs/development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects"}}');var a=t(74848),r=t(28453);const s={title:"Initializing XML variables",sidebar_position:6},o=void 0,l={},c=[];function d(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"You can assign an XML literal to an XML object, as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-actionscript",children:"var myXML:XML =\n    <order>\n        <item id='1'>\n            <menuName>burger</menuName>\n            <price>3.95</price>\n        </item>\n        <item id='2'>\n            <menuName>fries</menuName>\n            <price>1.45</price>\n        </item>\n    </order>\n"})}),"\n",(0,a.jsx)(n.p,{children:"As the following snippet shows, you can also use the new constructor to create an instance of an XML object from a string that contains XML data:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-actionscript",children:'var str:String = "<order><item id=\'1\'><menuName>burger</menuName>" + "<price>3.95</price></item></order>";\nvar myXML:XML = new XML(str);\n'})}),"\n",(0,a.jsx)(n.p,{children:"If the XML data in the string is not well formed (for example, if a closing tag is missing), you will see a run-time error."}),"\n",(0,a.jsx)(n.p,{children:"You can also pass data by reference (from other variables) into an XML object, as the following example shows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-actionscript",children:'var tagname:String = "item";\nvar attributename:String = "id";\nvar attributevalue:String = "5";\nvar content:String = "Chicken";\nvar x:XML = <{tagname} {attributename}={attributevalue}>{content}</{tagname}>;\ntrace(x.toXMLString())\n// Output: <item id="5">Chicken</item>\n'})}),"\n",(0,a.jsx)(n.p,{children:"To load XML data from a URL, use the URLLoader class, as the following example shows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-actionscript",children:'import flash.events.Event;\nimport flash.net.URLLoader;\nimport flash.net.URLRequest;\n\nvar externalXML:XML;\nvar loader:URLLoader = new URLLoader();\nvar request:URLRequest = new URLRequest("xmlFile.xml");\nloader.load(request);\nloader.addEventListener(Event.COMPLETE, onComplete);\n\nfunction onComplete(event:Event):void\n{\n    var loader:URLLoader = event.target as URLLoader;\n    if (loader != null)\n    {\n        externalXML = new XML(loader.data);\n        trace(externalXML.toXMLString());\n    }\n    else\n    {\n        trace("loader is not a URLLoader!");\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To read XML data from a socket connection, use the XMLSocket class. For more information, see the XMLSocket class in the ",(0,a.jsx)(n.a,{href:"http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/index.html",children:"ActionScript 3.0 Reference for the Adobe Flash Platform"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);