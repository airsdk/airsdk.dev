"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[93804],{28453:(e,s,r)=>{r.d(s,{R:()=>i,x:()=>o});var n=r(96540);const a={},t=n.createContext(a);function i(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(t.Provider,{value:s},e.children)}},72984:(e,s,r)=>{r.r(s),r.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression","title":"Creating an instance of a regular expression","description":"There are two ways to create a regular expression instance. One way uses forward","source":"@site/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression.md","sourceDirName":"development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax","slug":"/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/creating-an-instance-of-a-regular-expression.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Regular expression syntax","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/"},"next":{"title":"Characters, metacharacters, and metasequences","permalink":"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/characters-metacharacters-and-metasequences"}}');var a=r(74848),t=r(28453);const i={sidebar_position:1},o="Creating an instance of a regular expression",c={},l=[];function d(e){const s={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"creating-an-instance-of-a-regular-expression",children:"Creating an instance of a regular expression"})}),"\n",(0,a.jsxs)(s.p,{children:["There are two ways to create a regular expression instance. One way uses forward\nslash characters (",(0,a.jsx)(s.code,{children:"/"}),") to delineate the regular expression; the other uses the\n",(0,a.jsx)(s.code,{children:"new"})," constructor. For example, the following regular expressions are\nequivalent:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'var pattern1:RegExp = /bob/i;\nvar pattern2:RegExp = new RegExp("bob", "i");\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Forward slashes delineate a regular expression literal in the same way as\nquotation marks delineate a string literal. The part of the regular expression\nwithin the forward slashes defines the ",(0,a.jsx)(s.em,{children:"pattern."})," The regular expression can\nalso include ",(0,a.jsx)(s.em,{children:"flags"})," after the final delineating slash. These flags are\nconsidered to be part of the regular expression, but they are separate from its\npattern."]}),"\n",(0,a.jsxs)(s.p,{children:["When using the ",(0,a.jsx)(s.code,{children:"new"})," constructor, you use two strings to define the regular\nexpression. The first string defines the pattern, and the second string defines\nthe flags, as in the following example:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'var pattern2:RegExp = new RegExp("bob", "i");\n'})}),"\n",(0,a.jsxs)(s.p,{children:["When including a forward slash ",(0,a.jsx)(s.em,{children:"within"})," a regular expression that is defined by\nusing the forward slash delineators, you must precede the forward slash with the\nbackslash (",(0,a.jsx)(s.code,{children:"\\"}),") escape character. For example, the following regular expression\nmatches the pattern ",(0,a.jsx)(s.code,{children:"1/2"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:"var pattern:RegExp = /1\\/2/;\n"})}),"\n",(0,a.jsxs)(s.p,{children:["To include quotation marks ",(0,a.jsx)(s.em,{children:"within"})," a regular expression that is defined with\nthe ",(0,a.jsx)(s.code,{children:"new"})," constructor, you must add backslash (",(0,a.jsx)(s.code,{children:"\\"}),") escape character before the\nquotation marks (just as you would when defining any String literal). For\nexample, the following regular expressions match the pattern ",(0,a.jsx)(s.code,{children:'eat at "joe\'s"'}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'var pattern1:RegExp = new RegExp("eat at \\"joe\'s\\"", "");\nvar pattern2:RegExp = new RegExp(\'eat at "joe\\\'s"\', "");\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Do not use the backslash escape character with quotation marks in regular\nexpressions that are defined by using the forward slash delineators. Similarly,\ndo not use the escape character with forward slashes in regular expressions that\nare defined with the ",(0,a.jsx)(s.code,{children:"new"})," constructor. The following regular expressions are\nequivalent, and they define the pattern ",(0,a.jsx)(s.code,{children:'1/2 "joe\'s"'}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'var pattern1:RegExp = /1\\/2 "joe\'s"/;\nvar pattern2:RegExp = new RegExp("1/2 \\"joe\'s\\"", "");\nvar pattern3:RegExp = new RegExp(\'1/2 "joe\\\'s"\', \'\');\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Also, in a regular expression that is defined with the ",(0,a.jsx)(s.code,{children:"new"})," constructor, to use\na metasequence that begins with the backslash (",(0,a.jsx)(s.code,{children:"\\"}),") character, such as ",(0,a.jsx)(s.code,{children:"\\d"}),"\n(which matches any digit), type the backslash character twice:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{children:'var pattern:RegExp = new RegExp("\\\\d+", ""); // matches one or more digits\n'})}),"\n",(0,a.jsxs)(s.p,{children:["You must type the backlash character twice in this case, because the first\nparameter of the ",(0,a.jsx)(s.code,{children:"RegExp()"})," constructor method is a string, and in a string\nliteral you must type a backslash character twice to have it recognized as a\nsingle backslash character."]}),"\n",(0,a.jsx)(s.p,{children:"The sections that follow describe syntax for defining regular expression\npatterns."}),"\n",(0,a.jsxs)(s.p,{children:["For more information on flags, see\n",(0,a.jsx)(s.a,{href:"/docs/development/core-actionscript-classes/using-regular-expressions/regular-expression-syntax/flags-and-properties",children:"Flags and properties"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);