"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[95219],{28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(96540);const o={},s=t.createContext(o);function a(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:r},e.children)}},82442:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers","title":"Creating and managing workers","description":"The first step in using a worker for concurrency is to create a background","source":"@site/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers.md","sourceDirName":"development/client-system-interaction/using-workers-for-concurrency","slug":"/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers","permalink":"/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Understanding workers and concurrency","permalink":"/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency"},"next":{"title":"Communicating between workers","permalink":"/docs/development/client-system-interaction/using-workers-for-concurrency/communicating-between-workers"}}');var o=n(74848),s=n(28453);const a={sidebar_position:2},i="Creating and managing workers",c={},d=[{value:"Creating a Worker object from a swf",id:"creating-a-worker-object-from-a-swf",level:2},{value:"Embedding the worker swf",id:"embedding-the-worker-swf",level:3},{value:"Loading an external worker swf",id:"loading-an-external-worker-swf",level:3},{value:"Using the main swf as the worker swf",id:"using-the-main-swf-as-the-worker-swf",level:3},{value:"Starting a worker&#39;s execution",id:"starting-a-workers-execution",level:2},{value:"Managing worker execution",id:"managing-worker-execution",level:2}];function h(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"creating-and-managing-workers",children:"Creating and managing workers"})}),"\n",(0,o.jsx)(r.p,{children:"The first step in using a worker for concurrency is to create a background\nworker. You use two types of objects to create a worker. First is a Worker\ninstance, which is what you create. The other is a WorkerDomain object, which\ncreates the Worker and manages the running Worker objects in an application."}),"\n",(0,o.jsxs)(r.p,{children:["When the runtime loads, it automatically creates the WorkerDomain object. The\nruntime also automatically creates a worker for the main swf of the application.\nThis first worker is known as the ",(0,o.jsx)("span",{class:"dfn",children:" primordial worker "}),"."]}),"\n",(0,o.jsxs)(r.p,{children:["Because there is only one WorkerDomain object for an application, you access the\nWorkerDomain instance using the static ",(0,o.jsx)(r.code,{children:"WorkerDomain.current"})," property."]}),"\n",(0,o.jsxs)(r.p,{children:["At any time, you can access the current Worker instance (the worker in which the\ncurrent code is running) using the static ",(0,o.jsx)(r.code,{children:"Worker.current"})," property."]}),"\n",(0,o.jsx)(r.h2,{id:"creating-a-worker-object-from-a-swf",children:"Creating a Worker object from a swf"}),"\n",(0,o.jsxs)(r.p,{children:["Just as the main swf runs within the primordial worker, a background worker\nexecutes the code of a single swf file. To use a background worker, you must\nauthor and compile the worker's code as a swf file. To create the background\nworker, the parent worker needs access to that swf file's bytes as a ByteArray\nobject. You pass that ByteArray to the WorkerDomain object's ",(0,o.jsx)(r.code,{children:"createWorker()"}),"\nmethod to actually create the worker."]}),"\n",(0,o.jsx)(r.p,{children:"There are three main ways to get the background worker swf as a ByteArray\nobject:"}),"\n",(0,o.jsx)(r.h3,{id:"embedding-the-worker-swf",children:"Embedding the worker swf"}),"\n",(0,o.jsx)(r.p,{children:"Use the [Embed] metatag to embed the worker swf into the main swf as a\nByteArray:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'[Embed(source="../swfs/BgWorker.swf", mimeType="application/octet-stream")]\nprivate static var BgWorker_ByteClass:Class;\nprivate function createWorker():void\n{\n\tvar workerBytes:ByteArray = new BgWorker_ByteClass();\n\tvar bgWorker:Worker = WorkerDomain.current.createWorker(workerBytes);\n\n\t// ... set up worker communication and start the worker\n}\n'})}),"\n",(0,o.jsx)(r.p,{children:"The worker swf is compiled into the main swf as a ByteArray subclass named\nBgWorker_ByteClass. Creating an instance of that class gives you a ByteArray\npre-populated with the worker swf's bytes."}),"\n",(0,o.jsx)(r.h3,{id:"loading-an-external-worker-swf",children:"Loading an external worker swf"}),"\n",(0,o.jsx)(r.p,{children:"Use a URLLoader object to load an external swf file. The swf file must come from\nthe same security domain, such as a swf file loaded from the same internet\ndomain as the main swf or included in an AIR application package."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'var workerLoader:URLLoader = new URLLoader();\nworkerLoader.dataFormat = URLLoaderDataFormat.BINARY;\nworkerLoader.addEventListener(Event.COMPLETE, loadComplete);\nworkerLoader.load(new URLRequest("BgWorker.swf"));\n\nprivate function loadComplete(event:Event):void\n{\n\t// create the background worker\n\tvar workerBytes:ByteArray = event.target.data as ByteArray;\n\tvar bgWorker:Worker = WorkerDomain.current.createWorker(workerBytes);\n\n\t// ... set up worker communication and start the worker\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["When the URLLoader finishes loading the swf file, the swf's bytes are available\nin the URLLoader object's ",(0,o.jsx)(r.code,{children:"data"})," property ( ",(0,o.jsx)(r.code,{children:"event.target.data"})," in the example)."]}),"\n",(0,o.jsx)(r.h3,{id:"using-the-main-swf-as-the-worker-swf",children:"Using the main swf as the worker swf"}),"\n",(0,o.jsxs)(r.p,{children:["You can use a single swf as both the main swf and the worker swf. Use the main\ndisplay class's ",(0,o.jsx)(r.code,{children:"loaderInfo.bytes"})," property to access the swf's bytes."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"// The primordial worker's main class constructor\npublic function PrimordialWorkerClass()\n{\n\tinit();\n}\n\nprivate function init():void\n{\n\tvar swfBytes:ByteArray = this.loaderInfo.bytes;\n\n\t// Check to see if this is the primordial worker or the background worker\n\tif (Worker.current.isPrimordial)\n\t{\n\t\t// create a background worker\n\t\tvar bgWorker:Worker = WorkerDomain.current.createWorker(swfBytes);\n\n\t\t// ... set up worker communication and start the worker\n\t}\n\telse // entry point for the background worker\n\t{\n\t\t// set up communication between workers using getSharedProperty()\n\t\t// ... (not shown)\n\n\t\t// start the background work\n\t}\n}\n"})}),"\n",(0,o.jsxs)(r.p,{children:["If you use this technique, use an ",(0,o.jsx)(r.code,{children:"if"})," statement to branch the swf file code\nwithin the main class's constructor or a method it calls. To determine whether\nthe code is running in the main worker or the background worker, check the\ncurrent Worker object's ",(0,o.jsx)(r.code,{children:"isPrimordial"})," property, as shown in the example."]}),"\n",(0,o.jsx)(r.h2,{id:"starting-a-workers-execution",children:"Starting a worker's execution"}),"\n",(0,o.jsxs)(r.p,{children:["Once you have created a worker, you start its code executing by calling the\nWorker object's ",(0,o.jsx)(r.code,{children:"start()"})," method. The ",(0,o.jsx)(r.code,{children:"start()"})," operation doesn't happen\nimmediately. To know when the worker is running, register a listener for the\nWorker object's ",(0,o.jsx)(r.code,{children:"workerState"})," event. That event is dispatched when the Worker\nobject switches states in its lifecycle, such as when it starts executing code.\nIn your ",(0,o.jsx)(r.code,{children:"workerState"})," event handler, check that the Worker object's ",(0,o.jsx)(r.code,{children:"state"}),"\nproperty is ",(0,o.jsx)(r.code,{children:"WorkerState.RUNNING"}),". At that point the worker is running and its\nmain class's constructor has run. The following code listing shows an example of\nregistering for the ",(0,o.jsx)(r.code,{children:"workerState"})," event and calling the ",(0,o.jsx)(r.code,{children:"start()"})," method:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"// listen for worker state changes to know when the worker is running\nbgWorker.addEventListener(Event.WORKER_STATE, workerStateHandler);\n// set up communication between workers using\n// setSharedProperty(), createMessageChannel(), etc.\n// ... (not shown)\nbgWorker.start();\nprivate function workerStateHandler(event:Event):void\n{\n\tif (bgWorker.state == WorkerState.RUNNING)\n\t{\n\t\t// The worker is running.\n\t\t// Send it a message or wait for a response.\n\t}\n}\n"})}),"\n",(0,o.jsx)(r.h2,{id:"managing-worker-execution",children:"Managing worker execution"}),"\n",(0,o.jsxs)(r.p,{children:["At any time you can access the set of running workers in your application using\nthe WorkerDomain class's ",(0,o.jsx)(r.code,{children:"listWorkers()"})," method. This method returns the set of\nworkers whose ",(0,o.jsx)(r.code,{children:"state"})," property is ",(0,o.jsx)(r.code,{children:"WorkerState.RUNNING"}),", including the\nprimordial worker. If a worker hasn't been started or if its execution has\nalready been stopped, it is not included."]}),"\n",(0,o.jsxs)(r.p,{children:["If you no longer need a worker, you can call the Worker object's ",(0,o.jsx)(r.code,{children:"terminate()"}),"\nmethod to shut down the worker and release its memory and other system\nresources."]})]})}function l(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);