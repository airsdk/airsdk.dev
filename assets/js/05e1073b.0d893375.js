"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[82256],{7889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/display/display-programming/working-with-display-objects/setting-stage-properties","title":"Setting Stage properties","description":"The Stage class overrides most properties and methods of the DisplayObject class. If you call one of these overridden properties or methods, Flash Player and AIR throw an exception. For example, the Stage object does not have x or y properties, since its position is fixed as the main container for the application. The x and y properties refer to the position of a display object relative to its container, and since the Stage is not contained in another display object container, these properties do not apply.","source":"@site/docs/development/display/display-programming/working-with-display-objects/setting-stage-properties.md","sourceDirName":"development/display/display-programming/working-with-display-objects","slug":"/development/display/display-programming/working-with-display-objects/setting-stage-properties","permalink":"/docs/development/display/display-programming/working-with-display-objects/setting-stage-properties","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/display-programming/working-with-display-objects/setting-stage-properties.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Setting Stage properties","sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"Traversing the display list","permalink":"/docs/development/display/display-programming/working-with-display-objects/traversing-the-display-list"},"next":{"title":"Handling events for display objects","permalink":"/docs/development/display/display-programming/working-with-display-objects/handling-events-for-display-objects"}}');var a=n(74848),o=n(28453);const i={title:"Setting Stage properties",sidebar_position:6},r=void 0,l={},c=[{value:"Controlling the playback frame rate",id:"controlling-the-playback-frame-rate",level:2},{value:"Controlling Stage scaling",id:"controlling-stage-scaling",level:2},{value:"Setting the stage scale mode for AIR windows",id:"setting-the-stage-scale-mode-for-air-windows",level:3},{value:"Working with full-screen mode",id:"working-with-full-screen-mode",level:2},{value:"Enabling full-screen mode in Flash Player",id:"enabling-full-screen-mode-in-flash-player",level:3},{value:"Enabling full-screen interactive mode in Flash Player 11.3 and higher",id:"enabling-full-screen-interactive-mode-in-flash-player-113-and-higher",level:3},{value:"Full screen stage size and scaling",id:"full-screen-stage-size-and-scaling",level:3},{value:"Keyboard support in full-screen mode",id:"keyboard-support-in-full-screen-mode",level:3},{value:"Mouse support in full-screen mode",id:"mouse-support-in-full-screen-mode",level:3},{value:"Hardware scaling in full-screen mode",id:"hardware-scaling-in-full-screen-mode",level:3},{value:"Direct and GPU-compositing window modes",id:"direct-and-gpu-compositing-window-modes",level:3}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"The Stage class overrides most properties and methods of the DisplayObject class. If you call one of these overridden properties or methods, Flash Player and AIR throw an exception. For example, the Stage object does not have x or y properties, since its position is fixed as the main container for the application. The x and y properties refer to the position of a display object relative to its container, and since the Stage is not contained in another display object container, these properties do not apply."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Some properties and methods of the Stage class are only available to display objects that are in the same security sandbox as the first SWF file loaded. For details, see Stage security ."})}),"\n",(0,a.jsx)(t.h2,{id:"controlling-the-playback-frame-rate",children:"Controlling the playback frame rate"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"frameRate"})," property of the Stage class is used to set the frame rate for all SWF files loaded into the application. For more information, see the ActionScript 3.0 Reference for the Adobe Flash Platform ."]}),"\n",(0,a.jsx)(t.h2,{id:"controlling-stage-scaling",children:"Controlling Stage scaling"}),"\n",(0,a.jsxs)(t.p,{children:["When the portion of the screen representing Flash Player or AIR is resized, the runtime automatically adjusts the Stage contents to compensate. The Stage class\u2019s ",(0,a.jsx)(t.code,{children:"scaleMode"})," property determines how the Stage contents are adjusted. This property can be set to four different values, defined as constants in the ",(0,a.jsx)(t.code,{children:"flash.display.StageScaleMode"})," class:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"StageScaleMode.EXACT_FIT"})," scales the SWF to fill the new stage dimensions without regard for the original content aspect ratio. The scale factors might not be the same for width and height, so the content can appear squeezed or stretched if the aspect ratio of the stage is changed."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"StageScaleMode.SHOW_ALL"})," scales the SWF to fit entirely within the new stage dimensions without changing the content aspect ratio. This scale mode displays all of the content, but can result in \u201cletterbox\u201d borders, like the black bars that appear when viewing a wide-screen movie on a standard television."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"StageScaleMode.NO_BORDER"})," scales the SWF to entirely fill the new stage dimensions without changing the aspect ratio of the content. This scale mode makes full use of the stage display area, but can result in cropping."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"StageScaleMode.NO_SCALE"})," \u2014 does not scale the SWF. If the new stage dimensions are smaller, the content is cropped; if larger, the added space is blank."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["In the ",(0,a.jsx)(t.code,{children:"StageScaleMode.NO_SCALE"})," scale mode only, the ",(0,a.jsx)(t.code,{children:"stageWidth"})," and ",(0,a.jsx)(t.code,{children:"stageHeight"})," properties of the Stage class can be used to determine the actual pixel dimensions of the resized stage. (In the other scale modes, the ",(0,a.jsx)(t.code,{children:"stageWidth"})," and ",(0,a.jsx)(t.code,{children:"stageHeight"})," properties always reflect the original width and height of the SWF.) In addition, when ",(0,a.jsx)(t.code,{children:"scaleMode"})," is set to ",(0,a.jsx)(t.code,{children:"StageScaleMode.NO_SCALE"})," and the SWF file is resized, the Stage class\u2019s resize event is dispatched, allowing you to make adjustments accordingly."]}),"\n",(0,a.jsxs)(t.p,{children:["Consequently, having ",(0,a.jsx)(t.code,{children:"scaleMode"})," set to ",(0,a.jsx)(t.code,{children:"StageScaleMode.NO_SCALE"})," allows you to have greater control over how the screen contents adjust to the window resizing if you desire. For example, in a SWF containing a video and a control bar, you might want to make the control bar stay the same size when the Stage is resized, and only change the size of the video window to accommodate the Stage size change. This is demonstrated in the following example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"// mainContent is a display object containing the main content;\n// it is positioned at the top-left corner of the Stage, and\n// it should resize when the SWF resizes.\n\n// controlBar is a display object (e.g. a Sprite) containing several\n// buttons; it should stay positioned at the bottom-left corner of the\n// Stage (below mainContent) and it should not resize when the SWF\n// resizes.\n\nimport flash.display.Stage;\nimport flash.display.StageAlign;\nimport flash.display.StageScaleMode;\nimport flash.events.Event;\n\nvar swfStage:Stage = mainContent.stage;\nswfStage.scaleMode = StageScaleMode.NO_SCALE;\nswfStage.align = StageAlign.TOP_LEFT;\nswfStage.addEventListener(Event.RESIZE, resizeDisplay);\n\nfunction resizeDisplay(event:Event):void\n{\n    var swfWidth:int = swfStage.stageWidth;\n    var swfHeight:int = swfStage.stageHeight;\n\n    // Resize the main content area\n    var newContentHeight:Number = swfHeight - controlBar.height;\n    mainContent.height = newContentHeight;\n    mainContent.scaleX = mainContent.scaleY;\n\n    // Reposition the control bar.\n    controlBar.y = newContentHeight;\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"setting-the-stage-scale-mode-for-air-windows",children:"Setting the stage scale mode for AIR windows"}),"\n",(0,a.jsxs)(t.p,{children:["The stage ",(0,a.jsx)(t.code,{children:"scaleMode"})," property determines how the stage scales and clips child display objects when a window is resized. Only the ",(0,a.jsx)(t.code,{children:"noScale"})," mode should be used in AIR. In this mode, the stage is not scaled. Instead, the size of the stage changes directly with the bounds of the window. Objects may be clipped if the window is resized smaller."]}),"\n",(0,a.jsx)(t.p,{children:"The stage scale modes are designed for use in a environments such as a web browser where you don't always have control over the size or aspect ratio of the stage. The modes let you choose the least bad compromise when the stage does not match the ideal size or aspect ratio of your application. In AIR, you always have control of the stage, so in most cases re-laying out your content or adjusting the dimensions of your window will give you better results than enabling stage scaling."}),"\n",(0,a.jsx)(t.p,{children:"In the browser and for the initial AIR window, the relationship between the window size and the initial scale factor is read from the loaded SWF file. However, when you create a NativeWindow object, AIR chooses an arbitrary relationship between the window size and the scale factor of 72:1. Thus, if your window is 72x72 pixels, a 10x10 rectangle added to the window is drawn the correct size of 10x10 pixels. However, if the window is 144x144 pixels, then a 10x10 pixel rectangle is scaled to 20x20 pixels. If you insist on using a scaleMode other than noScale for a window stage, you can compensate by setting the scale factor of any display objects in the window to the ratio of 72 pixels to the current width and height of the stage. For example, the following code calculates the required scale factor for a display object named client :"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"if(newWindow.stage.scaleMode != StageScaleMode.NO_SCALE){\n    client.scaleX = 72/newWindow.stage.stageWidth;\n    client.scaleY = 72/newWindow.stage.stageHeight;\n}\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Flex and HTML windows automatically set the stage scaleMode to noScale . Changing the scaleMode disturbs the automatic layout mechanisms used in these types of windows."})}),"\n",(0,a.jsx)(t.h2,{id:"working-with-full-screen-mode",children:"Working with full-screen mode"}),"\n",(0,a.jsx)(t.p,{children:"Full-screen mode allows you to set a movie\u2019s stage to fill a viewer\u2019s entire monitor without any container borders or menus. The Stage class\u2019s displayState property is used to toggle full-screen mode on and off for a SWF. The displayState property can be set to one of the values defined by the constants in the flash.display.StageDisplayState class. To turn on full-screen mode, set the displayState property to StageDisplayState.FULL_SCREEN :"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"stage.displayState = StageDisplayState.FULL_SCREEN;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To turn on full-screen interactive mode (new in Flash Player 11.3), set the displayState property to ",(0,a.jsx)(t.code,{children:"StageDisplayState.FULL_SCREEN_INTERACTIVE"})," :"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;\n"})}),"\n",(0,a.jsx)(t.p,{children:"In Flash Player, full-screen mode can only be initiated through ActionScript in response to a mouse click (including right-click) or keypress. AIR content running in the application security sandbox does not require that full-screen mode be entered in response to a user gesture."}),"\n",(0,a.jsxs)(t.p,{children:["To exit full-screen mode, set the displayState property to ",(0,a.jsx)(t.code,{children:"StageDisplayState.NORMAL"})," ."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"stage.displayState = StageDisplayState.NORMAL;\n"})}),"\n",(0,a.jsx)(t.p,{children:"In addition, a user can choose to leave full-screen mode by switching focus to a different window or by using one of several key combinations: the Esc key (all platforms), Control-W (Windows), Command-W (Mac), or Alt-F4 (Windows)."}),"\n",(0,a.jsx)(t.h3,{id:"enabling-full-screen-mode-in-flash-player",children:"Enabling full-screen mode in Flash Player"}),"\n",(0,a.jsx)(t.p,{children:"To enable full-screen mode for a SWF file embedded in an HTML page, the HTML code to embed Flash Player must include a param tag and embed attribute with the name allowFullScreen and value true , like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<object>\n  ...\n  <param name="allowFullScreen" value="true" />\n  <embed ... allowFullScreen="true" />\n</object>\n'})}),"\n",(0,a.jsx)(t.p,{children:"In the Flash authoring tool, select File -> Publish Settings and in the Publish Settings dialog box, on the HTML tab, select the Flash Only - Allow Full Screen template."}),"\n",(0,a.jsxs)(t.p,{children:["In Flex, ensure that the HTML template includes ",(0,a.jsx)(t.code,{children:"<object>"})," and ",(0,a.jsx)(t.code,{children:"<embed>"})," tags that support full screen."]}),"\n",(0,a.jsxs)(t.p,{children:["If you are using JavaScript in a web page to generate the SWF-embedding tags, you must alter the JavaScript to add the allowFullScreen param tag and attribute. For example, if your HTML page uses the ",(0,a.jsx)(t.code,{children:"AC_FL_RunContent()"})," function (which is used in HTML pages generated by Flash Professional and Flash Builder), you should add the ",(0,a.jsx)(t.code,{children:"allowFullScreen"})," parameter to that function call as follows:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"AC_FL_RunContent(\n...\n'allowFullScreen','true',\n...\n); //end AC code\n"})}),"\n",(0,a.jsx)(t.p,{children:"This does not apply to SWF files running in the stand-alone Flash Player."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"If you set the Window Mode (wmode in the HTML) to Opaque Windowless (opaque) or Transparent Windowless (transparent), the full-screen window is always opaque"})}),"\n",(0,a.jsx)(t.p,{children:"There are also security-related restrictions for using full-screen mode with Flash Player in a browser. These restrictions are described in Security ."}),"\n",(0,a.jsx)(t.h3,{id:"enabling-full-screen-interactive-mode-in-flash-player-113-and-higher",children:"Enabling full-screen interactive mode in Flash Player 11.3 and higher"}),"\n",(0,a.jsx)(t.p,{children:"Flash Player 11.3 and higher support full-screen interactive mode, which enables full support for all keyboard keys (except for Esc , which exits full-screen interactive mode). Full-screen interactive mode is useful for gaming (for example, to enable chat in a multi-player game or WASD keyboard controls in a first-person shooter game.)"}),"\n",(0,a.jsx)(t.p,{children:"To enable full-screen interactive mode for a SWF file embedded in an HTML page, the HTML code to embed Flash Player must include a param tag and embed attribute with the name allowFullScreenInteractive and value true , like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<object>\n  ...\n  <param name="allowFullScreenInteractive" value="true" />\n  <embed ... allowFullScreenInteractive="true" />\n</object>\n'})}),"\n",(0,a.jsx)(t.p,{children:"In the Flash authoring tool, select File -> Publish Settings and in the Publish Settings dialog box, on the HTML tab, select the Flash Only - Allow Full Screen Interactive template."}),"\n",(0,a.jsxs)(t.p,{children:["In Flash Builder and Flex, ensure that the HTML templates include ",(0,a.jsx)(t.code,{children:"<object>"})," and ",(0,a.jsx)(t.code,{children:"<embed>"})," tags that support full screen interactive mode."]}),"\n",(0,a.jsx)(t.p,{children:"If you are using JavaScript in a web page to generate the SWF-embedding tags, you must alter the JavaScript to add the allowFullScreenInteractive param tag and attribute. For example, if your HTML page uses the AC_FL_RunContent() function (which is used in HTML pages generated by Flash Professional and Flash Builder), you should add the allowFullScreenInteractive parameter to that function call as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"AC_FL_RunContent(\n...\n'allowFullScreenInteractive','true',\n...\n); //end AC code\n"})}),"\n",(0,a.jsx)(t.p,{children:"This does not apply to SWF files running in the stand-alone Flash Player."}),"\n",(0,a.jsx)(t.h3,{id:"full-screen-stage-size-and-scaling",children:"Full screen stage size and scaling"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"Stage.fullScreenHeight"})," and ",(0,a.jsx)(t.code,{children:"Stage.fullScreenWidth"})," properties return the height and the width of the monitor that\u2019s used when going to full-screen size, if that state is entered immediately. These values can be incorrect if the user has the opportunity to move the browser from one monitor to another after you retrieve these values but before entering full-screen mode. If you retrieve these values in the same event handler where you set the Stage.displayState property to StageDisplayState.FULL_SCREEN , the values are correct.For users with multiple monitors, the SWF content expands to fill only one monitor. Flash Player and AIR use a metric to determine which monitor contains the greatest portion of the SWF, and uses that monitor for full-screen mode. The fullScreenHeight and fullScreenWidth properties only reflect the size of the monitor that is used for full-screen mode. For more information, see ",(0,a.jsx)(t.code,{children:"Stage.fullScreenHeight"})," and ",(0,a.jsx)(t.code,{children:"Stage.fullScreenWidth"})," in the ActionScript 3.0 Reference for the Adobe Flash Platform ."]}),"\n",(0,a.jsxs)(t.p,{children:["Stage scaling behavior for full-screen mode is the same as under normal mode; the scaling is controlled by the Stage class\u2019s ",(0,a.jsx)(t.code,{children:"scaleMode"})," property. If the ",(0,a.jsx)(t.code,{children:"scaleMode"})," property is set to ",(0,a.jsx)(t.code,{children:"StageScaleMode.NO_SCALE"})," , the Stage\u2019s ",(0,a.jsx)(t.code,{children:"stageWidth"})," and ",(0,a.jsx)(t.code,{children:"stageHeight"})," properties change to reflect the size of the screen area occupied by the SWF (the entire screen, in this case); if viewed in the browser the HTML parameter for this controls the setting."]}),"\n",(0,a.jsxs)(t.p,{children:["You can use the Stage class\u2019s ",(0,a.jsx)(t.code,{children:"fullScreen"})," event to detect and respond when full-screen mode is turned on or off. For example, you might want to reposition, add, or remove items from the screen when entering or leaving full-screen mode, as in this example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"import flash.events.FullScreenEvent;\n\nfunction fullScreenRedraw(event:FullScreenEvent):void\n{\n    if (event.fullScreen)\n    {\n        // Remove input text fields.\n        // Add a button that closes full-screen mode.\n    }\n    else\n    {\n        // Re-add input text fields.\n        // Remove the button that closes full-screen mode.\n    }\n}\n\nmySprite.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenRedraw);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["As this code shows, the event object for the ",(0,a.jsx)(t.code,{children:"fullScreen"})," event is an instance of the ",(0,a.jsx)(t.code,{children:"flash.events.FullScreenEvent"})," class, which includes a ",(0,a.jsx)(t.code,{children:"fullScreen"})," property indicating whether full-screen mode is enabled ( ",(0,a.jsx)(t.code,{children:"true"})," ) or not ( ",(0,a.jsx)(t.code,{children:"false"})," )."]}),"\n",(0,a.jsx)(t.h3,{id:"keyboard-support-in-full-screen-mode",children:"Keyboard support in full-screen mode"}),"\n",(0,a.jsx)(t.p,{children:"When Flash Player runs in a browser, all keyboard-related ActionScript, such as keyboard events and text entry in TextField instances, is disabled in full-screen mode. The exceptions (the keys that are enabled) are:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Selected non-printing keys, specifically the arrow keys, space bar, and tab key"}),"\n",(0,a.jsx)(t.li,{children:"Keyboard shortcuts that terminate full-screen mode: Esc (Windows and Mac), Control-W (Windows), Command-W (Mac), and Alt-F4"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"These restrictions are not present for SWF content running in the stand-alone Flash Player or in AIR. AIR supports an interactive full-screen mode that allows keyboard input."}),"\n",(0,a.jsx)(t.h3,{id:"mouse-support-in-full-screen-mode",children:"Mouse support in full-screen mode"}),"\n",(0,a.jsx)(t.p,{children:"By default, mouse events in full-screen mode work the same way as when not in full-screen mode. However, in full-screen mode, you can optionally set the Stage.mouseLock property to enable mouse locking. Mouse locking disables the cursor and enables unbounded mouse movement."}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"You can only enable mouse locking in full-screen mode for desktop applications. Setting it on applications not in full-screen mode, or for applications on mobile devices, throws an exception."})}),"\n",(0,a.jsx)(t.p,{children:"Mouse locking is disabled automatically and the mouse cursor is made visible again when:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"The user exits full-screen mode by using the Escape key (all platforms), Control-W (Windows), Command-W (Mac), or Alt-F4 (Windows)."}),"\n",(0,a.jsx)(t.li,{children:"The application window loses focus."}),"\n",(0,a.jsx)(t.li,{children:"Any settings UI is visible, including all privacy dialog boxes."}),"\n",(0,a.jsx)(t.li,{children:"A native dialog box is shown, such as a file upload dialog box."}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Events associated with mouse movement, such as the mouseMove event, use the ",(0,a.jsx)(t.code,{children:"MouseEvent"})," class to represent the event object. When mouse locking is disabled, use the ",(0,a.jsx)(t.code,{children:"MouseEvent.localX"})," and ",(0,a.jsx)(t.code,{children:"MouseEvent.localY"})," properties to determine the location of the mouse.When mouse locking is enabled, use the ",(0,a.jsx)(t.code,{children:"MouseEvent.movementX"})," and ",(0,a.jsx)(t.code,{children:"MouseEvent.movementY"})," properties to determine the location of the mouse. The movementX and movementY properties contain changes in the position of the mouse since the last event, instead of absolute coordinates of the mouse location."]}),"\n",(0,a.jsx)(t.h3,{id:"hardware-scaling-in-full-screen-mode",children:"Hardware scaling in full-screen mode"}),"\n",(0,a.jsxs)(t.p,{children:["You can use the Stage class\u2019s ",(0,a.jsx)(t.code,{children:"fullScreenSourceRect"})," property to set Flash Player or AIR to scale a specific region of the stage to full-screen mode. Flash Player and AIR scale in hardware, if available, using the graphics and video card on a user's computer, and generally display content more quickly than software scaling."]}),"\n",(0,a.jsx)(t.p,{children:"To take advantage of hardware scaling, you set the whole stage or part of the stage to full-screen mode. The following ActionScript 3.0 code sets the whole stage to full-screen mode:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\n{\n    stage.fullScreenSourceRect = new Rectangle(0,0,320,240);\n    stage.displayState = StageDisplayState.FULL_SCREEN;\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"When this property is set to a valid rectangle and the displayState property is set to full-screen mode, Flash Player and AIR scale the specified area. The actual Stage size in pixels within ActionScript does not change. Flash Player and AIR enforce a minimum limit for the size of the rectangle to accommodate the standard \u201cPress Esc to exit full-screen mode\u201d message. This limit is usually around 260 by 30 pixels but can vary depending on platform and Flash Player version."}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsx)(t.p,{children:"The fullScreenSourceRect property can only be set when Flash Player or AIR is not in full-screen mode. To use this property correctly, set this property first, then set the displayState property to full-screen mode."})}),"\n",(0,a.jsxs)(t.p,{children:["To enable scaling, set the ",(0,a.jsx)(t.code,{children:"fullScreenSourceRect"})," property to a rectangle object."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"stage.fullScreenSourceRect = new Rectangle(0,0,320,240);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["To disable scaling, set the ",(0,a.jsx)(t.code,{children:"fullScreenSourceRect"})," property to ",(0,a.jsx)(t.code,{children:"null"})," ."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"stage.fullScreenSourceRect = null;\n"})}),"\n",(0,a.jsx)(t.p,{children:"To take advantage of all hardware acceleration features with Flash Player, enable it through the Flash Player Settings dialog box. To load the dialog box, right-click (Windows) or Control-click (Mac) inside Flash Player content in your browser. Select the Display tab, which is the first tab, and click the checkbox: Enable hardware acceleration."}),"\n",(0,a.jsx)(t.h3,{id:"direct-and-gpu-compositing-window-modes",children:"Direct and GPU-compositing window modes"}),"\n",(0,a.jsx)(t.p,{children:"Flash Player 10 introduces two window modes, direct and GPU compositing, which you can enable through the publish settings in the Flash authoring tool. These modes are not supported in AIR. To take advantage of these modes, you must enable hardware acceleration for Flash Player."}),"\n",(0,a.jsx)(t.p,{children:"Direct mode uses the fastest, most direct path to push graphics to the screen, which is advantageous for video playback."}),"\n",(0,a.jsx)(t.p,{children:"GPU Compositing uses the graphics processing unit on the video card to accelerate compositing. Video compositing is the process of layering multiple images to create a single video image. When compositing is accelerated with the GPU it can improve the performance of YUV conversion, color correction, rotation or scaling, and blending. YUV conversion refers to the color conversion of composite analog signals, which are used for transmission, to the RGB (red, green, blue) color model that video cameras and displays use. Using the GPU to accelerate compositing reduces the memory and computational demands that are otherwise placed on the CPU. It also results in smoother playback for standard-definition video."}),"\n",(0,a.jsx)(t.p,{children:"Be cautious in implementing these window modes. Using GPU compositing can be expensive for memory and CPU resources. If some operations (such as blend modes, filtering, clipping or masking) cannot be carried out in the GPU, they are done by the software. Adobe recommends limiting yourself to one SWF file per HTML page when using these modes and you should not enable these modes for banners. The Flash Test Movie facility does not use hardware acceleration but you can use it through the Publish Preview option."}),"\n",(0,a.jsx)(t.p,{children:"Setting a frame rate in your SWF file that is higher than 60, the maximum screen refresh rate, is useless. Setting the frame rate from 50 through 55 allows for dropped frames, which can occur for various reasons from time to time."}),"\n",(0,a.jsx)(t.p,{children:"Using direct mode requires Microsoft DirectX 9 with VRAM 128 MB on Windows and OpenGL for Apple Macintosh, Mac OS X v10.2 or higher. GPU compositing requires Microsoft DirectX 9 and Pixel Shader 2.0 support on Windows with 128 MB of VRAM. On Mac OS X and Linux, GPU compositing requires OpenGL 1.5 and several OpenGL extensions (framebuffer object, multitexture, shader objects, shading language, fragment shader)."}),"\n",(0,a.jsxs)(t.p,{children:["You can activate ",(0,a.jsx)(t.code,{children:"direct"})," and ",(0,a.jsx)(t.code,{children:"gpu"})," acceleration modes on a per-SWF basis through the Flash Publish Settings dialog box, using the Hardware Acceleration menu on the Flash tab. If you choose None, the window mode reverts to ",(0,a.jsx)(t.code,{children:"default"})," , ",(0,a.jsx)(t.code,{children:"transparent"})," , or ",(0,a.jsx)(t.code,{children:"opaque"})," , as specified by the Window Mode setting on the HTML tab."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(96540);const a={},o=s.createContext(a);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);