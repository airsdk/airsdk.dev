"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[87365],{15988:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"development/core-actionscript-classes/handling-events/event-objects","title":"Event objects","description":"Event objects serve two main purposes in the new event-handling system. First,","source":"@site/docs/development/core-actionscript-classes/handling-events/event-objects.md","sourceDirName":"development/core-actionscript-classes/handling-events","slug":"/development/core-actionscript-classes/handling-events/event-objects","permalink":"/docs/development/core-actionscript-classes/handling-events/event-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-events/event-objects.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"The event flow","permalink":"/docs/development/core-actionscript-classes/handling-events/the-event-flow"},"next":{"title":"Event listeners","permalink":"/docs/development/core-actionscript-classes/handling-events/event-listeners"}}');var o=n(74848),a=n(28453);const i={sidebar_position:4},r="Event objects",c={},h=[{value:"Understanding Event class properties",id:"understanding-event-class-properties",level:2},{value:"Event object types",id:"event-object-types",level:4},{value:"Default behavior information",id:"default-behavior-information",level:4},{value:"Event flow information",id:"event-flow-information",level:4},{value:"The <code>bubbles</code> property",id:"the-bubbles-property",level:4},{value:"The <code>eventPhase</code> property",id:"the-eventphase-property",level:4},{value:"The <code>target</code> property",id:"the-target-property",level:4},{value:"The <code>currentTarget</code> property",id:"the-currenttarget-property",level:4},{value:"Understanding Event class methods",id:"understanding-event-class-methods",level:2},{value:"Event class utility methods",id:"event-class-utility-methods",level:4},{value:"Stopping event flow",id:"stopping-event-flow",level:4},{value:"Canceling default event behavior",id:"canceling-default-event-behavior",level:4},{value:"Subclasses of the Event class",id:"subclasses-of-the-event-class",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"event-objects",children:"Event objects"})}),"\n",(0,o.jsx)(t.p,{children:"Event objects serve two main purposes in the new event-handling system. First,\nevent objects represent actual events by storing information about specific\nevents in a set of properties. Second, event objects contain a set of methods\nthat allow you to manipulate event objects and affect the behavior of the\nevent-handling system."}),"\n",(0,o.jsx)(t.p,{children:"To facilitate access to these properties and methods, the Flash Player API\ndefines an Event class that serves as the base class for all event objects. The\nEvent class defines a fundamental set of properties and methods that are common\nto all event objects."}),"\n",(0,o.jsx)(t.p,{children:"This section begins with a discussion of the Event class properties, continues\nwith a description of the Event class methods, and concludes with an explanation\nof why subclasses of the Event class exist."}),"\n",(0,o.jsx)(t.h2,{id:"understanding-event-class-properties",children:"Understanding Event class properties"}),"\n",(0,o.jsx)(t.p,{children:"The Event class defines a number of read-only properties and constants that\nprovide important information about an event object.The following are especially\nimportant:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Event object types are represented by constants and stored in the ",(0,o.jsx)(t.code,{children:"Event.type"}),"\nproperty."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Whether an event's default behavior can be prevented is represented by a\nBoolean value and stored in the ",(0,o.jsx)(t.code,{children:"Event.cancelable"})," property."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Event flow information is contained in the remaining properties."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"event-object-types",children:"Event object types"}),"\n",(0,o.jsxs)(t.p,{children:["Every event object has an associated event type. Event types are stored in the\n",(0,o.jsx)(t.code,{children:"Event.type"})," property as string values. It is useful to know the type of an\nevent object so that your code can distinguish objects of different types from\none another. For example, the following code specifies that the ",(0,o.jsx)(t.code,{children:"clickHandler()"}),"\nlistener function should respond to any mouse click event objects that are\npassed to ",(0,o.jsx)(t.code,{children:"myDisplayObject"}),":"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:"myDisplayObject.addEventListener(MouseEvent.CLICK, clickHandler);\n"})}),"\n",(0,o.jsx)(t.p,{children:"Some two dozen event types are associated with the Event class itself and are\nrepresented by Event class constants, some of which are shown in the following\nexcerpt from the Event class definition:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:'package flash.events \n{ \n    public class Event\n    {\n        // class constants \n        public static const ACTIVATE:String = "activate"; \n        public static const ADDED:String= "added"; \n        // remaining constants omitted for brevity \n    }\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"These constants provide an easy way to refer to specific event types. You should\nuse these constants instead of the strings they represent. If you misspell a\nconstant name in your code, the compiler will catch the mistake, but if you\ninstead use strings, a typographical error may not manifest at compile time and\ncould lead to unexpected behavior that could be difficult to debug. For example,\nwhen adding an event listener, use the following code:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:"myDisplayObject.addEventListener(MouseEvent.CLICK, clickHandler);\n"})}),"\n",(0,o.jsx)(t.p,{children:"rather than:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:'myDisplayObject.addEventListener("click", clickHandler);\n'})}),"\n",(0,o.jsx)(t.h4,{id:"default-behavior-information",children:"Default behavior information"}),"\n",(0,o.jsxs)(t.p,{children:["Your code can check whether the default behavior for any given event object can\nbe prevented by accessing the ",(0,o.jsx)(t.code,{children:"cancelable"})," property. The ",(0,o.jsx)(t.code,{children:"cancelable"})," property\nholds a Boolean value that indicates whether or not a default behavior can be\nprevented. You can prevent, or cancel, the default behavior associated with a\nsmall number of events using the ",(0,o.jsx)(t.code,{children:"preventDefault()"})," method. For more\ninformation, see Canceling default event behavior under\n",(0,o.jsx)(t.a,{href:"#understanding-event-class-methods",children:"Understanding Event class methods"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"event-flow-information",children:"Event flow information"}),"\n",(0,o.jsx)(t.p,{children:"The remaining Event class properties contain important information about an\nevent object and its relationship to the event flow, as described in the\nfollowing list:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"bubbles"})," property contains information about the parts of the event flow\nin which the event object participates."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"eventPhase"})," property indicates the current phase in the event flow."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"target"})," property stores a reference to the event target."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"currentTarget"})," property stores a reference to the display list object\nthat is currently processing the event object."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.h4,{id:"the-bubbles-property",children:["The ",(0,o.jsx)(t.code,{children:"bubbles"})," property"]}),"\n",(0,o.jsxs)(t.p,{children:["An event is said to bubble if its event object participates in the bubbling\nphase of the event flow, which means that the event object is passed from the\ntarget node back through its ancestors until it reaches the Stage. The\n",(0,o.jsx)(t.code,{children:"Event.bubbles"})," property stores a Boolean value that indicates whether the event\nobject participates in the bubbling phase. Because all events that bubble also\nparticipate in the capture and target phases, any event that bubbles\nparticipates in all three of the event flow phases. If the value is ",(0,o.jsx)(t.code,{children:"true"}),", the\nevent object participates in all three phases. If the value is ",(0,o.jsx)(t.code,{children:"false"}),", the\nevent object does not participate in the bubbling phase."]}),"\n",(0,o.jsxs)(t.h4,{id:"the-eventphase-property",children:["The ",(0,o.jsx)(t.code,{children:"eventPhase"})," property"]}),"\n",(0,o.jsxs)(t.p,{children:["You can determine the event phase for any event object by investigating its\n",(0,o.jsx)(t.code,{children:"eventPhase"})," property. The ",(0,o.jsx)(t.code,{children:"eventPhase"})," property contains an unsigned integer\nvalue that represents one of the three phases of the event flow. The Flash\nPlayer API defines a separate EventPhase class that contains three constants\nthat correspond to the three unsigned integer values, as shown in the following\ncode excerpt:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:"package flash.events \n{ \n    public final class EventPhase\n    {\n        public static const CAPTURING_PHASE:uint = 1; \n        public static const AT_TARGET:uint = 2; \n        public static const BUBBLING_PHASE:uint= 3; \n    } \n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["These constants correspond to the three valid values of the ",(0,o.jsx)(t.code,{children:"eventPhase"}),"\nproperty. You can use these constants to make your code more readable. For\nexample, if you want to ensure that a function named ",(0,o.jsx)(t.code,{children:"myFunc()"})," is called only\nif the event target is in the target stage, you can use the following code to\ntest for this condition:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-actionscript",children:"if (event.eventPhase == EventPhase.AT_TARGET) \n{ \n    myFunc();\n}\n"})}),"\n",(0,o.jsxs)(t.h4,{id:"the-target-property",children:["The ",(0,o.jsx)(t.code,{children:"target"})," property"]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"target"})," property holds a reference to the object that is the target of the\nevent. In some cases, this is straightforward, such as when a microphone becomes\nactive, the target of the event object is the Microphone object. If the target\nis on the display list, however, the display list hierarchy must be taken into\naccount. For example, if a user inputs a mouse click on a point that includes\noverlapping display list objects, Flash Player and AIR always choose the object\nthat is farthest away from the Stage as the event target."]}),"\n",(0,o.jsxs)(t.p,{children:["For complex SWF files, especially those in which buttons are routinely decorated\nwith smaller child objects, the ",(0,o.jsx)(t.code,{children:"target"})," property may not be used frequently\nbecause it will often point to a button's child object instead of the button. In\nthese situations, the common practice is to add event listeners to the button\nand use the ",(0,o.jsx)(t.code,{children:"currentTarget"})," property because it points to the button, whereas\nthe ",(0,o.jsx)(t.code,{children:"target"})," property may point to a child of the button."]}),"\n",(0,o.jsxs)(t.h4,{id:"the-currenttarget-property",children:["The ",(0,o.jsx)(t.code,{children:"currentTarget"})," property"]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"currentTarget"})," property contains a reference to the object that is\ncurrently processing the event object. Although it may seem odd not to know\nwhich node is currently processing the event object that you are examining, keep\nin mind that you can add a listener function to any display object in that event\nobject's event flow, and the listener function can be placed in any location.\nMoreover, the same listener function can be added to different display objects.\nAs a project increases in size and complexity, the ",(0,o.jsx)(t.code,{children:"currentTarget"})," property\nbecomes more and more useful."]}),"\n",(0,o.jsx)(t.h2,{id:"understanding-event-class-methods",children:"Understanding Event class methods"}),"\n",(0,o.jsx)(t.p,{children:"There are three categories of Event class methods:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Utility methods, which can create copies of an event object or convert it to a\nstring"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Event flow methods, which remove event objects from the event flow"}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Default behavior methods, which prevent default behavior or check whether it\nhas been prevented"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h4,{id:"event-class-utility-methods",children:"Event class utility methods"}),"\n",(0,o.jsxs)(t.p,{children:["There are two utility methods in the Event class. The ",(0,o.jsx)(t.code,{children:"clone()"})," method allows\nyou to create copies of an event object. The ",(0,o.jsx)(t.code,{children:"toString()"})," method allows you to\ngenerate a string representation of the properties of an event object along with\ntheir values. Both of these methods are used internally by the event model\nsystem, but are exposed to developers for general use."]}),"\n",(0,o.jsx)(t.p,{children:"For advanced developers creating subclasses of the Event class, you must\noverride and implement versions of both utility methods to ensure that the event\nsubclass will work properly."}),"\n",(0,o.jsx)(t.h4,{id:"stopping-event-flow",children:"Stopping event flow"}),"\n",(0,o.jsxs)(t.p,{children:["You can call either the ",(0,o.jsx)(t.code,{children:"Event.stopPropagation()"})," method or the\n",(0,o.jsx)(t.code,{children:"Event.stopImmediatePropagation()"})," method to prevent an event object from\ncontinuing on its way through the event flow. The two methods are nearly\nidentical and differ only in whether the current node's other event listeners\nare allowed to execute:"]}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Event.stopPropagation()"})," method prevents the event object from moving on\nto the next node, but only after any other event listeners on the current node\nare allowed to execute."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"Event.stopImmediatePropagation()"})," method also prevents the event object\nfrom moving on to the next node, but does not allow any other event listeners\non the current node to execute."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"Calling either of these methods has no effect on whether the default behavior\nassociated with an event occurs. Use the default behavior methods of the Event\nclass to prevent default behavior."}),"\n",(0,o.jsx)(t.h4,{id:"canceling-default-event-behavior",children:"Canceling default event behavior"}),"\n",(0,o.jsxs)(t.p,{children:["The two methods that pertain to canceling default behavior are the\n",(0,o.jsx)(t.code,{children:"preventDefault()"})," method and the ",(0,o.jsx)(t.code,{children:"isDefaultPrevented()"})," method. Call the\n",(0,o.jsx)(t.code,{children:"preventDefault()"})," method to cancel the default behavior associated with an\nevent. To check whether ",(0,o.jsx)(t.code,{children:"preventDefault()"})," has already been called on an event\nobject, call the ",(0,o.jsx)(t.code,{children:"isDefaultPrevented()"})," method, which returns a value of ",(0,o.jsx)(t.code,{children:"true"}),"\nif the method has already been called and ",(0,o.jsx)(t.code,{children:"false"})," otherwise."]}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"preventDefault()"})," method will work only if the event's default behavior can\nbe cancelled. You can check whether this is the case by referring to the API\ndocumentation for that event type, or by using ActionScript to examine the\n",(0,o.jsx)(t.code,{children:"cancelable"})," property of the event object."]}),"\n",(0,o.jsx)(t.p,{children:"Canceling the default behavior has no effect on the progress of an event object\nthrough the event flow. Use the event flow methods of the Event class to remove\nan event object from the event flow."}),"\n",(0,o.jsx)(t.h2,{id:"subclasses-of-the-event-class",children:"Subclasses of the Event class"}),"\n",(0,o.jsx)(t.p,{children:"For many events, the common set of properties defined in the Event class is\nsufficient. Other events, however, have unique characteristics that cannot be\ncaptured by the properties available in the Event class. For these events,\nActionScript 3.0 defines several subclasses of the Event class."}),"\n",(0,o.jsx)(t.p,{children:"Each subclass provides additional properties and event types that are unique to\nthat category of events. For example, events related to mouse input have several\nunique characteristics that cannot be captured by the properties defined in the\nEvent class. The MouseEvent class extends the Event class by adding ten\nproperties that contain information such as the location of the mouse event and\nwhether specific keys were pressed during the mouse event."}),"\n",(0,o.jsxs)(t.p,{children:["An Event subclass also contains constants that represent the event types that\nare associated with the subclass. For example, the MouseEvent class defines\nconstants for several mouse event types, include the ",(0,o.jsx)(t.code,{children:"click"}),", ",(0,o.jsx)(t.code,{children:"doubleClick"}),",\n",(0,o.jsx)(t.code,{children:"mouseDown"}),", and ",(0,o.jsx)(t.code,{children:"mouseUp"})," event types."]}),"\n",(0,o.jsxs)(t.p,{children:["As described in the section on Event class utility methods under\n",(0,o.jsx)(t.a,{href:"#event-class-utility-methods",children:"Event objects"}),", when creating an Event subclass\nyou must override the ",(0,o.jsx)(t.code,{children:"clone()"})," and ",(0,o.jsx)(t.code,{children:"toString()"})," methods to provide\nfunctionality specific to the subclass."]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>r});var s=n(96540);const o={},a=s.createContext(o);function i(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);