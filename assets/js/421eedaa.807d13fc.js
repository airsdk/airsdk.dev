"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[33170],{11470:(e,t,n)=>{n.d(t,{A:()=>j});var r=n(96540),a=n(34164),i=n(23104),o=n(56347),s=n(205),l=n(57485),c=n(31682),d=n(70679);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=p(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[c,u]=h({queryString:n,groupId:a}),[f,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,d.Dv)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=c??f;return m({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)}),[u,x,i]),tabValues:i}}var x=n(92303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function v(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),a=s[n].value;a!==r&&(c(t),o(a))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...i,className:(0,a.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:i}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function w(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",g.tabList),children:[(0,b.jsx)(v,{...t,...e}),(0,b.jsx)(y,{...t,...e})]})}function j(e){const t=(0,x.A)();return(0,b.jsx)(w,{...e,children:u(e.children)},String(t))}},19365:(e,t,n)=>{n.d(t,{A:()=>o});n(96540);var r=n(34164);const a={tabItem:"tabItem_Ymn6"};var i=n(74848);function o(e){let{children:t,hidden:n,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,o),hidden:n,children:t})}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},30542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tools/building/ant/examples","title":"Examples","description":"In the following examples are shown some of the most common usages of the ant tasks.","source":"@site/docs/tools/building/ant/examples.mdx","sourceDirName":"tools/building/ant","slug":"/tools/building/ant/examples","permalink":"/docs/tools/building/ant/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/tools/building/ant/examples.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Examples","sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Tasks","permalink":"/docs/tools/building/ant/tasks"},"next":{"title":"Getting Started with Scout","permalink":"/docs/tools/development/scout/getting-started"}}');var a=n(74848),i=n(28453);n(11470),n(19365);const o={title:"Examples",sidebar_position:5},s=void 0,l={},c=[{value:"Compiling SWCs",id:"compiling-swcs",level:2},{value:"Basics",id:"basics",level:3},{value:"Specify Configuration",id:"specify-configuration",level:3},{value:"Including Libraries",id:"including-libraries",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Compiler Defines",id:"compiler-defines",level:3},{value:"Reports",id:"reports",level:3},{value:"Compiling SWF",id:"compiling-swf",level:2},{value:"Basics",id:"basics-1",level:3},{value:"Compiling with ANEs",id:"compiling-with-anes",level:2},{value:"Packaging AIR",id:"packaging-air",level:2}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In the following examples are shown some of the most common usages of the ant tasks."}),"\n",(0,a.jsx)(t.h2,{id:"compiling-swcs",children:"Compiling SWCs"}),"\n",(0,a.jsxs)(t.p,{children:["Note most of the following can be equally applied to ",(0,a.jsx)(t.code,{children:"mxmlc"})," to build a ",(0,a.jsx)(t.code,{children:"swf"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"basics",children:"Basics"}),"\n",(0,a.jsxs)(t.p,{children:["Build the all the source in ",(0,a.jsx)(t.code,{children:"src"})," into ",(0,a.jsx)(t.code,{children:"bin/output.swc"})," library:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"specify-configuration",children:"Specify Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["The following specifies the configuration to use for compilation.\nYou use the ",(0,a.jsx)(t.code,{children:"load-config"})," tag to specify an xml configuration, this can either be a custom one, or one of the 2 default configuration files included with the AIR SDK:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"frameworks/air-config.xml\nframeworks/flex-config.xml\n"})}),"\n",(0,a.jsx)(t.p,{children:"These represent build configurations for AIR and FLEX libraries respectively. They include all the references to the AIR and Flex frameworks allowing your code to access the\nstandard framework classes."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"including-libraries",children:"Including Libraries"}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"library-path"})," option allows you to add other ",(0,a.jsx)(t.code,{children:"swc"}),"'s as a dependency."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<library-path file="lib.swc" append="true"/>\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Or you could include a directory containing a series of ",(0,a.jsx)(t.code,{children:"swc"})," libraries:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\t<property name="libraries.dir" value="libs" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}" />\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<library-path dir="${libraries.dir}" append="true">\n                <include name="*.swc" />\n            </library-path>\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"metadata",children:"Metadata"}),"\n",(0,a.jsxs)(t.p,{children:["You can use the ",(0,a.jsx)(t.code,{children:"keep-as3-metadata"})," tag to specify the metadata tags to keep in the compiled code:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}" />\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<keep-as3-metadata name="Inject" />\n\t\t\t<keep-as3-metadata name="PostConstruct" />\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h3,{id:"compiler-defines",children:"Compiler Defines"}),"\n",(0,a.jsx)(t.p,{children:"Compiler definitions allow you to pass in values into your code at compilation time."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<property name="version" value="1.0.0" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}" />\n\t\t<compc output="${output.dir}/output.swc" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<compiler.define name="CONFIG::VERSION" value="\'${version}\'" />\n\t\t</compc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.p,{children:"Then in your actionscript:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",metastring:'title="Main.as"',children:"package \n{\n    import flash.display.Sprite;\n\n    public class MyApp extends Sprite\n    {\n\t\tpublic static const VERSION : String = CONFIG::VERSION;\n        \n        public function Main():void \n        {\n\t\t\ttrace( VERSION ); // outputs 1.0.0 as defined in the build script\n        }\n    }\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"reports",children:"Reports"}),"\n",(0,a.jsxs)(t.p,{children:["You can output a few reports and the configuration from the task to analyse the result of the compilation. These are passed directly as attributes on the ",(0,a.jsx)(t.code,{children:"compc"})," task"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"dump-config"}),": write a file containing all currently set configuration values;"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"size-report"}),": output an XML-formatted report detailing the size of all code and data;"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"link-report"}),": output a XML-formatted report of all definitions linked;"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'\t<compc ... \t\n\t\tdump-config="${output.dir}/config.xml" \n\t\tsize-report="${output.dir}/sizereport.xml" \n\t\tlink-report="${output.dir}/linkreport.xml" >\n'})}),"\n",(0,a.jsx)(t.h2,{id:"compiling-swf",children:"Compiling SWF"}),"\n",(0,a.jsxs)(t.p,{children:["Most of the above can be applied to the ",(0,a.jsx)(t.code,{children:"mxmlc"})," command to build a swf."]}),"\n",(0,a.jsx)(t.h3,{id:"basics-1",children:"Basics"}),"\n",(0,a.jsxs)(t.p,{children:["Build the all the source in ",(0,a.jsx)(t.code,{children:"src"})," into ",(0,a.jsx)(t.code,{children:"bin/output.swf"})," library:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\n\t<target name="compile">\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t</mxmlc>\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h2,{id:"compiling-with-anes",children:"Compiling with ANEs"}),"\n",(0,a.jsxs)(t.p,{children:["ANEs are a special type of library and require additional attention when building your application ",(0,a.jsx)(t.code,{children:"swf"})," / ",(0,a.jsx)(t.code,{children:"swc"}),". An ANE is essentially a SWC to the compilers and should be linked as an external library which will be included when packaging your AIR application using ",(0,a.jsx)(t.code,{children:"adt"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["However, if you simply add an ANE as an ",(0,a.jsx)(t.code,{children:"external-library-path"})," it will be ignored. You need to copy and rename these ",(0,a.jsx)(t.code,{children:".ane"})," files to ",(0,a.jsx)(t.code,{children:".swc"})," before compiling in order to correctly compile your ",(0,a.jsx)(t.code,{children:"swc"})," or ",(0,a.jsx)(t.code,{children:"swf"})," that references an ",(0,a.jsx)(t.code,{children:"ane"}),". Fortunately this is easy with Ant:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<?xml version="1.0"?>\n<project name="ane_example" default="compile" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\t<property name="ane.dir" value="ane" />\n\t<property name="ane.swc.dir" value="ane-swc" />\n\n\t<target name="create-ane-swc">\n\t\t\x3c!-- Copy ANE files to the ane-swc and rename to .swc --\x3e\n\t\t<delete dir="${ane.swc.dir}" />\n        <copy todir="${ane.swc.dir}">\n            <fileset dir="${ane.dir}">\n                <include name="*.ane" />\n            </fileset>\n            <globmapper from="*.ane" to="*.swc"/>\n        </copy>\n\t</target>\n\n\t<target name="compile" depends="create-ane-swc" >\n\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<external-library-path dir="${ane.swc.dir}" append="true"> \n                <include name="**/*.swc"/> \n            </external-library-path> \n\t\t</mxmlc>\n\n\t\t<delete dir="${ane.swc.dir}" />\n\t</target>\n\t\n</project>\n'})}),"\n",(0,a.jsx)(t.h2,{id:"packaging-air",children:"Packaging AIR"}),"\n",(0,a.jsxs)(t.p,{children:["Packaging an AIR project uses the ",(0,a.jsx)(t.code,{children:"exec"})," Ant task which allows you to call an executable."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<exec executable="${air.adt}" failonerror="true">\n\t<arg line="-package"/>\n\t<arg line="-storetype pkcs12"/>\n\t<arg line="-keystore certificate.p12"/>\n\t<arg line="-storepass ${password}"/>\n\t<arg line="${output.dir}/MyApp.air"/>\n\t<arg line="${source.dir}/MyApp-app.xml"/>\n\t<arg line="-C ${output.dir} output.swf"/>\n</exec>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["As you have to use ",(0,a.jsx)(t.code,{children:"adt.bat"})," on Windows and ",(0,a.jsx)(t.code,{children:"adt"})," on macOS there is a useful Ant script we can use to select the appropriate executable:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'\x3c!-- Simple condition to switch between adt.bat and adt --\x3e\n<condition property="isWindows" else="false">\n\t<os family="windows" />\n</condition>\n<condition  property="air.adt" \n\t\t\tvalue="${env.AIR_HOME}/bin/adt.bat" \n\t\t\telse="${env.AIR_HOME}/bin/adt">\n\t<istrue value="${isWindows}"/>\n</condition>\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In the following we compile our source using ",(0,a.jsx)(t.code,{children:"mxmlc"})," and then build an ",(0,a.jsx)(t.code,{children:".air"})," package from the ",(0,a.jsx)(t.code,{children:"output.swf"})," using the ",(0,a.jsx)(t.code,{children:"MyApp-app.xml"})," AIR application descriptor:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",metastring:'title="build.xml"',children:'<project name="air_example" default="build" >\n\n\t<property environment="env."/>\n\t<taskdef resource="flexTasks.tasks" classpath="${env.AIR_HOME}/ant"/>\n\n\t<property name="output.dir" value="bin" />\n\t<property name="source.dir" value="src" />\n\t<property name="ane.dir" value="ane" />\n\t<property name="ane.swc.dir" value="ane-swc" />\n\n\t\x3c!-- Copy ANE files to the ane-swc and rename to .swc --\x3e\n\t<target name="create-ane-swc">\n\t\t<delete dir="${ane.swc.dir}" />\n        <copy todir="${ane.swc.dir}">\n            <fileset dir="${ane.dir}">\n                <include name="*.ane" />\n            </fileset>\n            <globmapper from="*.ane" to="*.swc"/>\n        </copy>\n\t</target>\n\n\t\x3c!-- Compile a swf from our code --\x3e\n\t<target name="compile" depends="create-ane-swc" >\n\t\t<mkdir dir="${output.dir}"/>\n\t\t<mxmlc output="${output.dir}/output.swf" failonerror="true" maxmemory="1024m">\n\t\t\t<load-config filename="${env.AIR_HOME}/frameworks/air-config.xml" />\n\t\t\t<source-path path-element="${source.dir}"/>\n\t\t\t<include-sources dir="${source.dir}" includes="*"/>\n\t\t\t<external-library-path dir="${ane.swc.dir}" append="true"> \n                <include name="**/*.swc"/> \n            </external-library-path> \n\t\t</mxmlc>\n\t\t<delete dir="${ane.swc.dir}" />\n\t</target>\n\n\t\x3c!-- Simple condition to switch between adt.bat and adt --\x3e\n\t<condition property="isWindows" else="false">\n\t\t<os family="windows" />\n\t</condition>\n\t<condition property="air.adt" value="${env.AIR_HOME}/bin/adt.bat" else="${env.AIR_HOME}/bin/adt">\n\t\t<istrue value="${isWindows}"/>\n\t</condition>\n\t\n\t\x3c!-- Package an air from our code --\x3e\n\t<target name="build" depends="compile">\n\n\t\t<exec executable="${air.adt}" failonerror="true">\n\t\t\t<arg line="-package"/>\n\t\t\t<arg line="-storetype pkcs12"/>\n\t\t\t<arg line="-keystore certificate.p12"/>\n\t\t\t<arg line="-storepass ${password}"/>\n\t\t\t<arg line="${output.dir}/MyApp.air"/>\n\t\t\t<arg line="${source.dir}/MyApp-app.xml"/>\n\t\t\t<arg line="-C ${output.dir} output.swf"/>\n\t\t</exec>\n\n\t</target>\n\t\n</project>\n'})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);