"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[40245],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(96540);const o={},l=t.createContext(o);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(l.Provider,{value:n},e.children)}},41357:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"development/display/filtering-display-objects/convolution-filter","title":"Convolution filter","description":"The ConvolutionFilter class can be used to apply a wide range of imaging","source":"@site/docs/development/display/filtering-display-objects/convolution-filter.md","sourceDirName":"development/display/filtering-display-objects","slug":"/development/display/filtering-display-objects/convolution-filter","permalink":"/docs/development/display/filtering-display-objects/convolution-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/filtering-display-objects/convolution-filter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Color matrix filter","permalink":"/docs/development/display/filtering-display-objects/color-matrix-filter"},"next":{"title":"Creating and applying filters","permalink":"/docs/development/display/filtering-display-objects/creating-and-applying-filters"}}');var o=i(74848),l=i(28453);const a={},s="Convolution filter",r={},h=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"convolution-filter",children:"Convolution filter"})}),"\n",(0,o.jsx)(n.p,{children:"The ConvolutionFilter class can be used to apply a wide range of imaging\ntransformations to BitmapData objects or display objects, such as blurring, edge\ndetection, sharpening, embossing, and beveling."}),"\n",(0,o.jsx)(n.p,{children:"The convolution filter conceptually goes through each pixel in the source image\none by one and determines the final color of that pixel using the value of the\npixel and its surrounding pixels. A matrix, specified as an array of numeric\nvalues, indicates to what degree the value of each particular neighboring pixel\naffects the final resulting value."}),"\n",(0,o.jsx)(n.p,{children:"Consider the most commonly used type of matrix, which is a three by three\nmatrix. The matrix includes nine values:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"N    N    N\nN    P    N\nN    N    N\n"})}),"\n",(0,o.jsx)(n.p,{children:'When the convolution filter is applied to a certain pixel, it will look at the\ncolor value of the pixel itself ("P" in the example), as well as the values of\nthe surrounding pixels (labeled "N" in the example). However, by setting values\nin the matrix, you specify how much priority certain pixels have in affecting\nthe resulting image.'}),"\n",(0,o.jsx)(n.p,{children:"For example, the following matrix, applied using a convolution filter, will\nleave an image exactly as it was:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0    0    0\n0    1    0\n0    0    0\n"})}),"\n",(0,o.jsx)(n.p,{children:"The reason the image is unchanged is because the original pixel's value has a\nrelative strength of 1 in determining the final pixel color, while the\nsurrounding pixels' values have relative strength of 0\u2014meaning their colors\ndon't affect the final image."}),"\n",(0,o.jsx)(n.p,{children:"Similarly, this matrix will cause the pixels of an image to shift one pixel to\nthe left:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"0    0    0\n0    0    1\n0    0    0\n"})}),"\n",(0,o.jsx)(n.p,{children:"Notice that in this case, the pixel itself has no effect on the final value of\nthe pixel displayed in that location on the final image\u2014only the value of the\npixel to the right is used to determine the pixel's resulting value."}),"\n",(0,o.jsx)(n.p,{children:"In ActionScript, you create the matrix as a combination of an Array instance\ncontaining the values and two properties specifying the number of rows and\ncolumns in the matrix. The following example loads an image and, when the image\nfinishes loading, applies a convolution filter to the image using the matrix in\nthe previous listing:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// Load an image onto the Stage.\nvar loader:Loader = new Loader();\nvar url:URLRequest = new URLRequest("http://www.helpexamples.com/flash/images/image1.jpg");\nloader.load(url);\nthis.addChild(loader);\n\nfunction applyFilter(event:MouseEvent):void\n{\n'})}),"\n",(0,o.jsxs)(n.p,{children:["// Create the convolution matrix.\nvar matrix",":Array"," = [0, 0, 0,\n0, 0, 1,\n0, 0, 0];"]}),"\n",(0,o.jsxs)(n.p,{children:["var convolution",":ConvolutionFilter"," = new ConvolutionFilter();\nconvolution.matrixX = 3;\nconvolution.matrixY = 3;\nconvolution.matrix = matrix;\nconvolution.divisor = 1;"]}),"\n",(0,o.jsx)(n.p,{children:"loader.filters = [convolution];"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"}\n\nloader.addEventListener(MouseEvent.CLICK, applyFilter);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Something that isn't obvious in this code is the effect of using values other\nthan 1 or 0 in the matrix. For example, the same matrix, with the number 8\ninstead of 1 in the right-hand position, performs the same action (shifting the\npixels to the left). In addition, it affects the colors of the image, making\nthem 8 times brighter. This is because the final pixel color values are\ncalculated by multiplying the matrix values by the original pixel colors, adding\nthe values together, and dividing by the value of the filter's ",(0,o.jsx)(n.code,{children:"divisor"}),"\nproperty. Notice that in the example code, the ",(0,o.jsx)(n.code,{children:"divisor"})," property is set to 1.\nAs a general rule, if you want the brightness of the colors to stay about the\nsame as in the original image, you should make the divisor equal to the sum of\nthe matrix values. So with a matrix where the values add up to 8, and a divisor\nof 1, the resulting image is going to be roughly 8 times brighter than the\noriginal image."]}),"\n",(0,o.jsx)(n.p,{children:"Although the effect of this matrix isn't very noticeable, other matrix values\ncan be used to create various effects. Here are several standard sets of matrix\nvalues for different effects using a three by three matrix:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Basic blur (divisor 5):"}),"\n",(0,o.jsx)(n.p,{children:"0 1 0\n1 1 1\n0 1 0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Sharpening (divisor 1):"}),"\n",(0,o.jsx)(n.p,{children:"0, -1, 0\n-1, 5, -1\n0, -1, 0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Edge detection (divisor 1):"}),"\n",(0,o.jsx)(n.p,{children:"0, -1, 0\n-1, 4, -1\n0, -1, 0"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Embossing effect (divisor 1):"}),"\n",(0,o.jsx)(n.p,{children:"-2, -1, 0\n-1, 1, 1\n0, 1, 2"}),"\n",(0,o.jsxs)(n.p,{children:["Notice that with most of these effects, the divisor is 1. This is because the\nnegative matrix values added to the positive matrix values result in 1 (or 0\nin the case of edge detection, but the ",(0,o.jsx)(n.code,{children:"divisor"})," property's value cannot be\n0)."]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);