"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[38806],{28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var r=n(96540);const c={},s=r.createContext(c);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),r.createElement(s.Provider,{value:t},e.children)}},75370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"development/display/working-with-geometry/using-rectangle-objects","title":"Using Rectangle objects","description":"A Rectangle object defines a rectangular area. A Rectangle object has a position, defined by the x and y coordinates of its upper-left corner, a width property, and a height property. You can define these properties for a new Rectangle object by calling the Rectangle() constructor function, as follows:","source":"@site/docs/development/display/working-with-geometry/using-rectangle-objects.md","sourceDirName":"development/display/working-with-geometry","slug":"/development/display/working-with-geometry/using-rectangle-objects","permalink":"/docs/development/display/working-with-geometry/using-rectangle-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-geometry/using-rectangle-objects.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Using Rectangle objects","sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"Using Point objects","permalink":"/docs/development/display/working-with-geometry/using-point-objects"},"next":{"title":"Using Matrix objects","permalink":"/docs/development/display/working-with-geometry/using-matrix-objects"}}');var c=n(74848),s=n(28453);const i={title:"Using Rectangle objects",sidebar_position:4},o=void 0,a={},d=[{value:"Resizing and repositioning Rectangle objects",id:"resizing-and-repositioning-rectangle-objects",level:2},{value:"Finding unions and intersections of Rectangle objects",id:"finding-unions-and-intersections-of-rectangle-objects",level:2},{value:"Other uses of Rectangle objects",id:"other-uses-of-rectangle-objects",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.p,{children:"A Rectangle object defines a rectangular area. A Rectangle object has a position, defined by the x and y coordinates of its upper-left corner, a width property, and a height property. You can define these properties for a new Rectangle object by calling the Rectangle() constructor function, as follows:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar rx:Number = 0;\nvar ry:Number = 0;\nvar rwidth:Number = 100;\nvar rheight:Number = 50;\nvar rect1:Rectangle = new Rectangle(rx, ry, rwidth, rheight);\n"})}),"\n",(0,c.jsx)(t.h2,{id:"resizing-and-repositioning-rectangle-objects",children:"Resizing and repositioning Rectangle objects"}),"\n",(0,c.jsx)(t.p,{children:"There are a number of ways to resize and reposition Rectangle objects."}),"\n",(0,c.jsxs)(t.p,{children:["You can directly reposition the Rectangle object by changing its ",(0,c.jsx)(t.code,{children:"x"})," and ",(0,c.jsx)(t.code,{children:"y"})," properties. This change has no effect on the width or height of the Rectangle object."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar x1:Number = 0;\nvar y1:Number = 0;\nvar width1:Number = 100;\nvar height1:Number = 50;\nvar rect1:Rectangle = new Rectangle(x1, y1, width1, height1);\ntrace(rect1) // (x=0, y=0, w=100, h=50)\nrect1.x = 20;\nrect1.y = 30;\ntrace(rect1); // (x=20, y=30, w=100, h=50)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["As the following code shows, when you change the ",(0,c.jsx)(t.code,{children:"left"})," or ",(0,c.jsx)(t.code,{children:"top"})," property of a ",(0,c.jsx)(t.code,{children:"Rectangle"})," object, the rectangle is repositioned. The rectangle\u2019s x and y properties match the left and top properties, respectively. However, the position of the lower-left corner of the ",(0,c.jsx)(t.code,{children:"Rectangle"})," object does not change, so it is resized."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar x1:Number = 0;\nvar y1:Number = 0;\nvar width1:Number = 100;\nvar height1:Number = 50;\nvar rect1:Rectangle = new Rectangle(x1, y1, width1, height1);\ntrace(rect1) // (x=0, y=0, w=100, h=50)\nrect1.left = 20;\nrect1.top = 30;\ntrace(rect1); // (x=20, y=30, w=80, h=20)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Similarly, as the following example shows, if you change the ",(0,c.jsx)(t.code,{children:"bottom"})," or ",(0,c.jsx)(t.code,{children:"right"})," property of a Rectangle object, the position of its upper-left corner does not change. The rectangle is resized accordingly:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar x1:Number = 0;\nvar y1:Number = 0;\nvar width1:Number = 100;\nvar height1:Number = 50;\nvar rect1:Rectangle = new Rectangle(x1, y1, width1, height1);\ntrace(rect1) // (x=0, y=0, w=100, h=50)\nrect1.right = 60;\ntrect1.bottom = 20;\ntrace(rect1); // (x=0, y=0, w=60, h=20)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["You can also reposition a Rectangle object by using the ",(0,c.jsx)(t.code,{children:"offset()"})," method, as follows:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar x1:Number = 0;\nvar y1:Number = 0;\nvar width1:Number = 100;\nvar height1:Number = 50;\nvar rect1:Rectangle = new Rectangle(x1, y1, width1, height1);\ntrace(rect1) // (x=0, y=0, w=100, h=50)\nrect1.offset(20, 30);\ntrace(rect1); // (x=20, y=30, w=100, h=50)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"offsetPt()"})," method works similarly, except that it takes a ",(0,c.jsx)(t.code,{children:"Point"})," object as its parameter, rather than ",(0,c.jsx)(t.code,{children:"x"})," and ",(0,c.jsx)(t.code,{children:"y"})," offset values."]}),"\n",(0,c.jsxs)(t.p,{children:["You can also resize a ",(0,c.jsx)(t.code,{children:"Rectangle"})," object by using the ",(0,c.jsx)(t.code,{children:"inflate()"})," method, which includes two parameters, ",(0,c.jsx)(t.code,{children:"dx"})," and ",(0,c.jsx)(t.code,{children:"dy"})," . The ",(0,c.jsx)(t.code,{children:"dx"})," parameter represents the number of pixels that the left and right sides of the rectangle moves from the center. The ",(0,c.jsx)(t.code,{children:"dy"})," parameter represents the number of pixels that the top and bottom of the rectangle moves from the center:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.Rectangle;\nvar x1:Number = 0;\nvar y1:Number = 0;\nvar width1:Number = 100;\nvar height1:Number = 50;\nvar rect1:Rectangle = new Rectangle(x1, y1, width1, height1);\ntrace(rect1) // (x=0, y=0, w=100, h=50)\nrect1.inflate(6,4);\ntrace(rect1); // (x=-6, y=-4, w=112, h=58)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"inflatePt() "}),"method works similarly, except that it takes a ",(0,c.jsx)(t.code,{children:"Point"})," object as its parameter, rather than ",(0,c.jsx)(t.code,{children:"dx"})," and ",(0,c.jsx)(t.code,{children:"dy"})," values."]}),"\n",(0,c.jsx)(t.h2,{id:"finding-unions-and-intersections-of-rectangle-objects",children:"Finding unions and intersections of Rectangle objects"}),"\n",(0,c.jsxs)(t.p,{children:["You use the ",(0,c.jsx)(t.code,{children:"union()"})," method to find the rectangular region formed by the boundaries of two rectangles:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.display.*;\nimport flash.geom.Rectangle;\nvar rect1:Rectangle = new Rectangle(0, 0, 100, 100);\ntrace(rect1); // (x=0, y=0, w=100, h=100)\nvar rect2:Rectangle = new Rectangle(120, 60, 100, 100);\ntrace(rect2); // (x=120, y=60, w=100, h=100)\ntrace(rect1.union(rect2)); // (x=0, y=0, w=220, h=160)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["You use the ",(0,c.jsx)(t.code,{children:"intersection()"})," method to find the rectangular region formed by the overlapping region of two rectangles:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.display.*;\nimport flash.geom.Rectangle;\nvar rect1:Rectangle = new Rectangle(0, 0, 100, 100);\ntrace(rect1); // (x=0, y=0, w=100, h=100)\nvar rect2:Rectangle = new Rectangle(80, 60, 100, 100);\ntrace(rect2); // (x=120, y=60, w=100, h=100)\ntrace(rect1.intersection(rect2)); // (x=80, y=60, w=20, h=40)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["You use the ",(0,c.jsx)(t.code,{children:"intersects()"})," method to find out whether two rectangles intersect. You can also use the ",(0,c.jsx)(t.code,{children:"intersects()"})," method to find out whether a display object is in a certain region of the Stage. For the following code example, assume the coordinate space of the display object container that contains the circle object is the same as that of the Stage. The example shows how to use the ",(0,c.jsx)(t.code,{children:"intersects()"})," method to determine if a display object, circle , intersects specified regions of the ",(0,c.jsx)(t.code,{children:"Stage"}),", defined by the ",(0,c.jsx)(t.code,{children:"target1"})," and ",(0,c.jsx)(t.code,{children:"target2"})," Rectangle objects:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-actionscript",children:"import flash.display.*;\nimport flash.geom.Rectangle;\nvar circle:Shape = new Shape();\ncircle.graphics.lineStyle(2, 0xFF0000);\ncircle.graphics.drawCircle(250, 250, 100);\naddChild(circle);\nvar circleBounds:Rectangle = circle.getBounds(stage);\nvar target1:Rectangle = new Rectangle(0, 0, 100, 100);\ntrace(circleBounds.intersects(target1)); // false\nvar target2:Rectangle = new Rectangle(0, 0, 300, 300);\ntrace(circleBounds.intersects(target2)); // true\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Similarly, you can use the ",(0,c.jsx)(t.code,{children:"intersects()"})," method to find out whether the bounding rectangles of two display objects overlap. Use the ",(0,c.jsx)(t.code,{children:"getRect()"})," method of the ",(0,c.jsx)(t.code,{children:"DisplayObject"})," class to include any additional space that the strokes of a display object add to a bounding region."]}),"\n",(0,c.jsx)(t.h2,{id:"other-uses-of-rectangle-objects",children:"Other uses of Rectangle objects"}),"\n",(0,c.jsx)(t.p,{children:"Rectangle objects are used in the following methods and properties:"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Class"}),(0,c.jsx)(t.th,{children:"Methods or properties"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"BitmapData"}),(0,c.jsxs)(t.td,{children:[(0,c.jsx)(t.code,{children:"applyFilter()"}),", ",(0,c.jsx)(t.code,{children:"colorTransform()"}),", ",(0,c.jsx)(t.code,{children:"copyChannel()"}),", ",(0,c.jsx)(t.code,{children:"copyPixels()"}),", ",(0,c.jsx)(t.code,{children:"draw()"}),", ",(0,c.jsx)(t.code,{children:"drawWithQuality()"}),", ",(0,c.jsx)(t.code,{children:"encode()"}),", ",(0,c.jsx)(t.code,{children:"fillRect()"}),", ",(0,c.jsx)(t.code,{children:"generateFilterRect()"}),", ",(0,c.jsx)(t.code,{children:"getColorBoundsRect()"}),", ",(0,c.jsx)(t.code,{children:"getPixels()"}),", ",(0,c.jsx)(t.code,{children:"merge()"}),", ",(0,c.jsx)(t.code,{children:"paletteMap()"}),", ",(0,c.jsx)(t.code,{children:"pixelDissolve()"}),", ",(0,c.jsx)(t.code,{children:"setPixels()"}),", and ",(0,c.jsx)(t.code,{children:"threshold()"})]}),(0,c.jsx)(t.td,{children:"Used as the type for some parameters to define a region of the BitmapData object."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"DisplayObject"}),(0,c.jsxs)(t.td,{children:[(0,c.jsx)(t.code,{children:"getBounds()"}),", ",(0,c.jsx)(t.code,{children:"getRect()"}),", ",(0,c.jsx)(t.code,{children:"scrollRect"}),", ",(0,c.jsx)(t.code,{children:"scale9Grid"})]}),(0,c.jsx)(t.td,{children:"Used as the data type for the property or the data type returned."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"PrintJob"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"addPage()"})}),(0,c.jsxs)(t.td,{children:["Used to define the ",(0,c.jsx)(t.code,{children:"printArea"})," parameter."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"Sprite"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"startDrag()"})}),(0,c.jsxs)(t.td,{children:["Used to define the ",(0,c.jsx)(t.code,{children:"bounds"})," parameter."]})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"TextField"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"getCharBoundaries()"})}),(0,c.jsx)(t.td,{children:"Used as the return value type."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:"Transform"}),(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"pixelBounds"})}),(0,c.jsx)(t.td,{children:"Used as the data type."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}}}]);