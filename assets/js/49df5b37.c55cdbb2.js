"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[65627],{28453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var o=n(96540);const s={},i=o.createContext(s);function t(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:r},e.children)}},71034:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0","title":"Error handling in ActionScript 3.0","description":"Since many applications can run without building the logic to handle errors,","source":"@site/docs/development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0.md","sourceDirName":"development/core-actionscript-classes/handling-errors","slug":"/development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0","permalink":"/docs/development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-errors/error-handling-in-actionscript-3.0.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Types of errors","permalink":"/docs/development/core-actionscript-classes/handling-errors/types-of-errors"},"next":{"title":"Working with the debugger versions of Flash runtimes","permalink":"/docs/development/core-actionscript-classes/handling-errors/working-with-the-debugger-versions-of-flash-runtimes"}}');var s=n(74848),i=n(28453);const t={sidebar_position:3},a="Error handling in ActionScript 3.0",c={},l=[{value:"ActionScript 3.0 error-handling elements",id:"actionscript-30-error-handling-elements",level:2},{value:"Error-handling strategies",id:"error-handling-strategies",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"error-handling-in-actionscript-30",children:"Error handling in ActionScript 3.0"})}),"\n",(0,s.jsx)(r.p,{children:"Since many applications can run without building the logic to handle errors,\ndevelopers are tempted to postpone building error handling into their\napplications. However, without error handling, an application can easily stall\nor frustrate the user if something doesn't work as expected. ActionScript 2.0\nhas an Error class that allows you to build logic into custom functions to throw\nan exception with a specific message. Because error handling is critical for\nmaking a user-friendly application, ActionScript 3.0 includes an expanded\narchitecture for catching errors."}),"\n",(0,s.jsxs)(r.p,{children:["Note: While the\n",(0,s.jsx)(r.a,{href:"https://airsdk.dev/reference/actionscript/3.0/index.html",children:"ActionScript 3.0 Reference for the Adobe Flash Platform"}),"\ndocuments the exceptions thrown by many methods, it might not include all\npossible exceptions for each method. A method might throw an exception for\nsyntax errors or other problems that are not noted explicitly in the method\ndescription, even when the description does list some of the exceptions a method\nthrows."]}),"\n",(0,s.jsx)(r.h2,{id:"actionscript-30-error-handling-elements",children:"ActionScript 3.0 error-handling elements"}),"\n",(0,s.jsx)(r.p,{children:"ActionScript 3.0 includes many tools for error handling, including:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Error classes. ActionScript 3.0 includes a broad range of Error classes to\nexpand the scope of situations that can produce error objects. Each Error\nclass helps applications handle and respond to specific error conditions,\nwhether they are related to system errors (like a MemoryError condition),\ncoding errors (like an ArgumentError condition), networking and communication\nerrors (like a URIError condition), or other situations. For more information\non each class, see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/comparing-the-error-classes",children:"Comparing the Error classes"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Fewer silent failures. In earlier versions of Flash Player, errors were\ngenerated and reported only if you explicitly used the ",(0,s.jsx)(r.code,{children:"throw"})," statement. For\nFlash Player 9 and later Flash runtimes, native ActionScript methods and\nproperties throw run-time errors. These errors allow you to handle these\nexceptions more effectively when they occur, then react to each exception,\nindividually."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Clear error messages displayed during debugging. When you are using the\ndebugger version of a Flash runtime, problematic code or situations generate\nrobust error messages, which help you easily identify reasons why a particular\nblock of code fails. These messages make fixing errors more efficient. For\nmore information, see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/working-with-the-debugger-versions-of-flash-runtimes",children:"Working with the debugger versions of Flash runtimes"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Precise errors allow for clear error messages displayed to users. In previous\nversions of Flash Player, the ",(0,s.jsx)(r.code,{children:"FileReference.upload()"})," method returned a\nBoolean value of ",(0,s.jsx)(r.code,{children:"false"})," if the ",(0,s.jsx)(r.code,{children:"upload()"})," call was unsuccessful, indicating\none of five possible errors. If an error occurs when you call the ",(0,s.jsx)(r.code,{children:"upload()"}),"\nmethod in ActionScript 3.0, four specific errors help you display more\naccurate error messages to end users."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Refined error handling. Distinct errors are thrown for many common situations.\nFor example, in ActionScript 2.0, before a FileReference object has been\npopulated, the ",(0,s.jsx)(r.code,{children:"name"})," property has the value ",(0,s.jsx)(r.code,{children:"null"})," (so, before you can use or\ndisplay the ",(0,s.jsx)(r.code,{children:"name"})," property, ensure that the value is set and not ",(0,s.jsx)(r.code,{children:"null"}),"). In\nActionScript 3.0, if you attempt to access the ",(0,s.jsx)(r.code,{children:"name"})," property before it has\nbeen populated, Flash Player or AIR throws an IllegalOperationError, which\ninforms you that the value has not been set, and you can use\n",(0,s.jsx)(r.code,{children:"try..catch..finally"})," blocks to handle the error. For more information see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/handling-synchronous-errors-in-an-application#using-try-catch-finally-statements",children:"Using try..catch..finally statements"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["No significant performance drawbacks. Using ",(0,s.jsx)(r.code,{children:"try..catch..finally"})," blocks to\nhandle errors takes little or no additional resources compared to previous\nversions of ActionScript."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["An ErrorEvent class that allows you to build listeners for specific\nasynchronous error events. For more information see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status",children:"Responding to error events and status"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"error-handling-strategies",children:"Error-handling strategies"}),"\n",(0,s.jsx)(r.p,{children:"As long as your application doesn't encounter a problematic condition, it can\nstill run successfully if you don't build error-handling logic into your code.\nHowever, if you don't actively handle errors and your application does encounter\na problem, your users will never know why your application fails when it does."}),"\n",(0,s.jsx)(r.p,{children:"There are different ways you can approach error handling in your application.\nThe following list summarizes the three major options for handling errors:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Use ",(0,s.jsx)(r.code,{children:"try..catch..finally"})," statements. These statements catch synchronous\nerrors as they occur. You can nest your statements into a hierarchy to catch\nexceptions at various levels of code execution. For more information, see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/handling-synchronous-errors-in-an-application#using-try-catch-finally-statements",children:"Using try..catch..finally statements"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Create your own custom error objects. You can use the Error class to create\nyour own custom error objects to track specific operations in your application\nthat are not covered by built-in error types. Then you can use\n",(0,s.jsx)(r.code,{children:"try..catch..finally"})," statements on your custom error objects. For more\ninformation see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/creating-custom-error-classes",children:"Creating custom error classes"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Write event listeners and handlers to respond to error events. By using this\nstrategy, you can create global error handlers that let you handle similar\nevents without duplicating much code in ",(0,s.jsx)(r.code,{children:"try..catch..finally"})," blocks. You are\nalso more likely to catch asynchronous errors using this approach. For more\ninformation, see\n",(0,s.jsx)(r.a,{href:"/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status",children:"Responding to error events and status"}),"."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);