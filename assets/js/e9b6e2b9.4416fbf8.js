"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[11163],{14299:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>n,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"development/display/display-programming/working-with-display-objects/properties-and-methods-of-the-displayobject-class","title":"Properties and methods of the DisplayObject class","description":"All display objects are subclasses of the DisplayObject class, and as such they inherit the properties and methods of the DisplayObject class. The properties inherited are basic properties that apply to all display objects. For example, each display object has an x property and a y property that specifies the object\u2019s position in its display object container.","source":"@site/docs/development/display/display-programming/working-with-display-objects/properties-and-methods-of-the-displayobject-class.md","sourceDirName":"development/display/display-programming/working-with-display-objects","slug":"/development/display/display-programming/working-with-display-objects/properties-and-methods-of-the-displayobject-class","permalink":"/docs/development/display/display-programming/working-with-display-objects/properties-and-methods-of-the-displayobject-class","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/display-programming/working-with-display-objects/properties-and-methods-of-the-displayobject-class.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Properties and methods of the DisplayObject class","sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Working with display objects","permalink":"/docs/development/display/display-programming/working-with-display-objects/"},"next":{"title":"Adding display objects to the display list","permalink":"/docs/development/display/display-programming/working-with-display-objects/adding-display-objects-to-the-display-list"}}');var o=s(74848),i=s(28453);const r={title:"Properties and methods of the DisplayObject class",sidebar_position:2},p=void 0,n={},c=[];function l(e){const t={p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"All display objects are subclasses of the DisplayObject class, and as such they inherit the properties and methods of the DisplayObject class. The properties inherited are basic properties that apply to all display objects. For example, each display object has an x property and a y property that specifies the object\u2019s position in its display object container."}),"\n",(0,o.jsx)(t.p,{children:"You cannot create a DisplayObject instance using the DisplayObject class constructor. You must create another type of object (an object that is a subclass of the DisplayObject class), such as a Sprite, to instantiate an object with the new operator. Also, if you want to create a custom display object class, you must create a subclass of one of the display object subclasses that has a usable constructor function (such as the Shape class or the Sprite class). For more information, see the DisplayObject class description in the ActionScript 3.0 Reference for the Adobe Flash Platform ."})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>p});var a=s(96540);const o={},i=a.createContext(o);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);