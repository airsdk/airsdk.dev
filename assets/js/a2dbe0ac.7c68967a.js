"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[33303],{17824:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/sc_hierarchy_securityControl-33af3046f3bb60e058b5cbe58322b059.png"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var s=i(96540);const t={},o=s.createContext(t);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(o.Provider,{value:n},e.children)}},77583:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"development/security/permission-controls","title":"Permission controls","description":"The Flash Player client run-time security model has been designed around","source":"@site/docs/development/security/permission-controls.md","sourceDirName":"development/security","slug":"/development/security/permission-controls","permalink":"/docs/development/security/permission-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/security/permission-controls.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Security sandboxes","permalink":"/docs/development/security/security-sandboxes"},"next":{"title":"Restricting networking APIs","permalink":"/docs/development/security/restricting-networking-apis"}}');var t=i(74848),o=i(28453);const r={sidebar_position:3},a="Permission controls",l={},c=[{value:"Administrator controls",id:"administrator-controls",level:2},{value:"The mms.cfg file",id:"the-mmscfg-file",level:3},{value:"The Global Flash Player Trust directory",id:"the-global-flash-player-trust-directory",level:3},{value:"User controls",id:"user-controls",level:2},{value:"The Settings UI and Settings Manager",id:"the-settings-ui-and-settings-manager",level:3},{value:"The User Flash Player Trust directory",id:"the-user-flash-player-trust-directory",level:3},{value:"Website controls (policy files)",id:"website-controls-policy-files",level:2},{value:"Master policy files",id:"master-policy-files",level:3},{value:"URL policy file scope",id:"url-policy-file-scope",level:3},{value:"Specifying access permissions in a URL policy file",id:"specifying-access-permissions-in-a-url-policy-file",level:3},{value:"Preloading policy files",id:"preloading-policy-files",level:3},{value:"Author (developer) controls",id:"author-developer-controls",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"permission-controls",children:"Permission controls"})}),"\n",(0,t.jsxs)(n.p,{children:["The Flash Player client run-time security model has been designed around\nresources, which are objects such as SWF files, local data, and Internet URLs.\n",(0,t.jsx)(n.em,{children:"Stakeholders"})," are the parties who own or use those resources. Stakeholders can\nexercise controls (security settings) over their own resources, and each\nresource has four stakeholders. Flash Player strictly enforces a hierarchy of\nauthority for these controls, as the following illustration shows:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Hierarchy of authority",src:i(17824).A+"",width:"130",height:"290"})}),"\n",(0,t.jsx)(n.p,{children:"Hierarchy of security controls"}),"\n",(0,t.jsx)(n.p,{children:"This means, for instance, that if an administrator restricts access to a\nresource, no other stakeholders can override that restriction."}),"\n",(0,t.jsx)(n.p,{children:"For AIR applications, these permission controls only apply to content running\noutside the AIR application sandbox."}),"\n",(0,t.jsx)(n.h2,{id:"administrator-controls",children:"Administrator controls"}),"\n",(0,t.jsx)(n.p,{children:"An administrative user of a computer (a user who has logged in with\nadministrative rights) can apply Flash Player security settings that affect all\nusers of the computer. In a non-enterprise environment, such as on a home\ncomputer, there is usually one user who also has administrative access. Even in\nan enterprise environment, individual users may have administrative rights to\nthe computer."}),"\n",(0,t.jsx)(n.p,{children:"There are two types of administrative user controls:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The mms.cfg file"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"The Global Flash Player Trust directory"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"the-mmscfg-file",children:"The mms.cfg file"}),"\n",(0,t.jsx)(n.p,{children:"The mms.cfg file is a text file that lets administrators enable or restrict\naccess to a variety of capabilities. When Flash Player starts, it reads its\nsecurity settings from this file, and uses them to limit functionality. The\nmms.cfg file includes settings that the administrator uses to manage\ncapabilities such as privacy controls, local file security, socket connections,\nand so on."}),"\n",(0,t.jsxs)(n.p,{children:["A SWF file can access some information on capabilities that have been disabled\nby calling the ",(0,t.jsx)(n.code,{children:"Capabilities.avHardwareDisable"})," and\n",(0,t.jsx)(n.code,{children:"Capabilities.localFileReadDisable"})," properties. However, most of the settings in\nthe mms.cfg file cannot be queried from ActionScript."]}),"\n",(0,t.jsx)(n.p,{children:"To enforce application-independent security and privacy policies for a computer,\nthe mms.cfg file should be modified only by system administrators. The mms.cfg\nfile is not for use by application installers. While an installer running with\nadministrative privileges could modify the contents of the mms.cfg file, Adobe\nconsiders such usage a violation of the user's trust and urges creators of\ninstallers never to modify the mms.cfg file."}),"\n",(0,t.jsx)(n.p,{children:"The mms.cfg file is stored in the following location:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Windows 32-bit: ",(0,t.jsx)(n.em,{children:"system"})," %WINDIR%\\System32\\Macromed\\Flash\\mms.cfg"]}),"\n",(0,t.jsx)(n.p,{children:"(for example, C:\\WINDOWS\\system32\\Macromed\\Flash\\mms.cfg)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Windows 64-bit: ",(0,t.jsx)(n.em,{children:"system"})," %WINDIR%\\SysWOW64\\Macromed\\Flash\\mms.cfg"]}),"\n",(0,t.jsx)(n.p,{children:"(for example, C:\\WINDOWS\\sysWOW64\\Macromed\\Flash\\mms.cfg)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Mac: ",(0,t.jsx)(n.em,{children:"app support"})," /Macromedia/mms.cfg"]}),"\n",(0,t.jsx)(n.p,{children:"(for example, /Library/Application Support/Macromedia/mms.cfg)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Linux: /etc/adobe/mms.cfg"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Google Chrome: Google Chrome uses its own version of the mms.cfg file, saved\nat:"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Mac: ",(0,t.jsx)(n.em,{children:"/Users/(username)"})," /Library/Application\nSupport/Google/Chrome/Default/Pepper Data/Shockwave Flash/System"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Win: ",(0,t.jsx)(n.em,{children:"%USERNAME%"})," /AppData/Local/Google/Chrome/User Data/Default/Pepper\nData/Shockwave Flash/System"]}),"\n",(0,t.jsx)(n.p,{children:"The System directory may not exist. If not, create it manually."}),"\n",(0,t.jsx)(n.p,{children:"You might use third-party administration tools, such as Microsoft System\nManagement Server, to replicate the configuration file to the user's computer."}),"\n",(0,t.jsx)(n.p,{children:"Use the standard techniques provided by your operating system to hide or\notherwise prevent end users from seeing or modifying the mms.cfg file on their\nsystems."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["For more information about the mms.cfg file, see the Flash Player Administration\nGuide at\n",(0,t.jsx)(n.a,{href:"https://web.archive.org/web/20151111130758/http://www.adobe.com/devnet/flashplayer/articles/flash_player_admin_guide.html",children:"www.adobe.com/go/flash_player_admin"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"the-global-flash-player-trust-directory",children:"The Global Flash Player Trust directory"}),"\n",(0,t.jsx)(n.p,{children:"Administrative users and installer applications can register specified local SWF\nfiles as trusted for all users. These SWF files are assigned to the\nlocal-trusted sandbox. They can interact with any other SWF files, and they can\nload data from anywhere, remote or local. Files are designated as trusted in the\nGlobal Flash Player Trust directory, in the following location:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Windows: ",(0,t.jsx)(n.em,{children:"system"})," \\Macromed\\Flash\\FlashPlayerTrust"]}),"\n",(0,t.jsx)(n.p,{children:"(for example, C:\\WINDOWS\\system32\\Macromed\\Flash\\FlashPlayerTrust)"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Mac: ",(0,t.jsx)(n.em,{children:"app support"})," /Macromedia/FlashPlayerTrust"]}),"\n",(0,t.jsx)(n.p,{children:"(for example, /Library/Application Support/Macromedia/FlashPlayerTrust)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The Flash Player Trust directory can contain any number of text files, each of\nwhich lists trusted paths, with one path per line. Each path can be an\nindividual SWF file, HTML file, or directory. Comment lines begin with the ",(0,t.jsx)(n.code,{children:"#"}),"\nsymbol. For example, a Flash Player trust configuration file containing the\nfollowing text grants trusted status to all files in the specified directory and\nall subdirectories:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Trust files in the following directories:\nC:\\Documents and Settings\\All Users\\Documents\\SampleApp\n"})}),"\n",(0,t.jsx)(n.p,{children:"The paths listed in a trust configuration file should always be local paths or\nSMB network paths. Any HTTP path in a trust configuration file is ignored; only\nlocal files can be trusted."}),"\n",(0,t.jsx)(n.p,{children:"To avoid conflicts, give each trust configuration file a filename corresponding\nto the installing application, and use a .cfg file extension."}),"\n",(0,t.jsx)(n.p,{children:"As a developer distributing a locally run SWF file through an installer\napplication, you can have the installer application add a configuration file to\nthe Global Flash Player Trust directory, granting full privileges to the file\nthat you are distributing. The installer application must be run by a user with\nadministrative rights. Unlike the mms.cfg file, the Global Flash Player Trust\ndirectory is included for the purpose of installer applications granting trust\npermissions. Both administrative users and installer applications can designate\ntrusted local applications using the Global Flash Player Trust directory."}),"\n",(0,t.jsxs)(n.p,{children:["There are also Flash Player Trust directories for individual users (see\n",(0,t.jsx)(n.a,{href:"#user-controls",children:"User controls"}),")."]}),"\n",(0,t.jsx)(n.h2,{id:"user-controls",children:"User controls"}),"\n",(0,t.jsx)(n.p,{children:"Flash Player provides three different user-level mechanisms for setting\npermissions: the Settings UI and Settings Manager, and the User Flash Player\nTrust directory."}),"\n",(0,t.jsx)(n.h3,{id:"the-settings-ui-and-settings-manager",children:"The Settings UI and Settings Manager"}),"\n",(0,t.jsx)(n.p,{children:"The Settings UI is a quick, interactive mechanism for configuring the settings\nfor a specific domain. The Settings Manager presents a more detailed interface\nand provides the ability to make global changes that affect permissions for many\nor all domains. Additionally, when a new permission is requested by a SWF file,\nrequiring run-time decisions concerning security or privacy, dialog boxes are\ndisplayed in which users can adjust some Flash Player settings."}),"\n",(0,t.jsx)(n.p,{children:"The Settings Manager and Settings UI provide security-related options such as\ncamera and microphone settings, shared object storage settings, settings related\nto legacy content, and so on. Neither the Settings Manager nor the Settings UI\nare available to AIR applications."}),"\n",(0,t.jsxs)(n.p,{children:["Note: Any settings made in the mms.cfg file (see\n",(0,t.jsx)(n.a,{href:"#administrator-controls",children:"Administrator controls"}),") are not reflected in the\nSettings Manager."]}),"\n",(0,t.jsxs)(n.p,{children:["For details on the Settings Manager, see\n",(0,t.jsx)(n.a,{href:"https://web.archive.org/web/20150219041754/http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager.html",children:"www.adobe.com/go/settingsmanager"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"the-user-flash-player-trust-directory",children:"The User Flash Player Trust directory"}),"\n",(0,t.jsx)(n.p,{children:"Users and installer applications can register specified local SWF files as\ntrusted. These SWF files are assigned to the local-trusted sandbox. They can\ninteract with any other SWF files, and they can load data from anywhere, remote\nor local. A user designates a file as trusted in the User Flash Player Trust\ndirectory, which is in same directory as the shared object storage area, in the\nfollowing locations (locations are specific to the current user):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Windows: app data\\Macromedia\\Flash Player\\Security\\FlashPlayerTrust"}),"\n",(0,t.jsx)(n.p,{children:"(for example, C:\\Documents and Settings\\JohnD\\Application\nData\\Macromedia\\Flash Player\\Security\\FlashPlayerTrust on Windows XP or\nC:\\Users\\JohnD\\AppData\\Roaming\\Macromedia\\Flash\nPlayer\\Security\\FlashPlayerTrust on Windows Vista)"}),"\n",(0,t.jsx)(n.p,{children:"In Windows, the Application Data folder is hidden by default. To show hidden\nfolders and files, select My Computer to open Windows Explorer, select\nTools\xa0> Folder Options and then select the View tab. Under the View tab,\nselect the Show hidden files and folders radio button."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Mac: app data/Macromedia/Flash Player/#Security/FlashPlayerTrust"}),"\n",(0,t.jsx)(n.p,{children:"(for example, /Users/JohnD/Library/Preferences/Macromedia/Flash\nPlayer/#Security/FlashPlayerTrust)"}),"\n",(0,t.jsx)(n.p,{children:"These settings affect only the current user, not other users who log in to the\ncomputer. If a user without administrative rights installs an application in\ntheir own portion of the system, the User Flash Player Trust directory lets\nthe installer register the application as trusted for that user."}),"\n",(0,t.jsx)(n.p,{children:"As a developer distributing a locally run SWF file by way of an installer\napplication, you can have the installer application add a configuration file\nto the User Flash Player Trust directory, granting full privileges to the file\nthat you are distributing. Even in this situation, the User Flash Player Trust\ndirectory file is considered a user control, because a user action\n(installation) initiates it."}),"\n",(0,t.jsxs)(n.p,{children:["There is also a Global Flash Player Trust directory, used by the\nadministrative user or installers to register an application for all users of\na computer (see ",(0,t.jsx)(n.a,{href:"#administrator-controls",children:"Administrator controls"}),")."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"website-controls-policy-files",children:"Website controls (policy files)"}),"\n",(0,t.jsxs)(n.p,{children:["To make data from your web server available to SWF files from other domains, you\ncan create a policy file on your server. A ",(0,t.jsx)(n.em,{children:"policy file"})," is an XML file placed\nin a specific location on your server."]}),"\n",(0,t.jsx)(n.p,{children:"Policy files affect access to a number of assets, including the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Data in bitmaps, sounds, and videos"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Loading XML and text files"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Importing SWF files from other security domains into the security domain of\nthe loading SWF file"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Access to socket and XML socket connections"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"ActionScript objects instantiate two different kinds of server connections:\ndocument-based server connections and socket connections. ActionScript objects\nlike Loader, Sound, URLLoader, and URLStream instantiate document-based server\nconnections, and these objects load a file from a URL. ActionScript Socket and\nXMLSocket objects make socket connections, which operate with streaming data,\nnot loaded documents."}),"\n",(0,t.jsx)(n.p,{children:"Because Flash Player supports two kinds of server connections, there are two\ntypes of policy files\u2014URL policy files and socket policy files."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Document-based connections require ",(0,t.jsx)(n.em,{children:"URL policy files"}),". These files let the\nserver indicate that its data and documents are available to SWF files served\nfrom certain domains or from all domains."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Socket connections require ",(0,t.jsx)(n.em,{children:"socket policy files,"})," which enable networking\ndirectly at the lower TCP socket level, using the Socket and XMLSocket\nclasses."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Flash Player requires policy files to be transmitted using the same protocol\nthat the attempted connection wants to use. For example, when you place a policy\nfile on your HTTP server, SWF files from other domains are allowed to load data\nfrom it as an HTTP server. However, if you don't provide a socket policy file at\nthe same server, you are forbidding SWF files from other domains to connect to\nthe server at the socket level. In other words, the means by which a policy file\nis retrieved must match the means of connecting."}),"\n",(0,t.jsxs)(n.p,{children:['Policy file usage and syntax are discussed briefly in the rest of this section,\nas they apply to SWF files published for Flash Player 10. (Policy file\nimplementation is slightly different in earlier versions of Flash Player, as\nsuccessive releases have strengthened Flash Player security.) For more detailed\ninformation on policy files, see the Flash Player Developer Center topic "Policy\nFile Changes in Flash Player 9" at\n',(0,t.jsx)(n.a,{href:"https://web.archive.org/web/20150422111248/http://www.adobe.com/devnet/flashplayer/security.html",children:"www.adobe.com/go/devnet_security_en"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Code executing in the AIR application sandbox does not require a policy file to\naccess data from a URL or socket. Code in an AIR application executing in a\nnon-application sandbox does require a policy file."}),"\n",(0,t.jsx)(n.h3,{id:"master-policy-files",children:"Master policy files"}),"\n",(0,t.jsxs)(n.p,{children:["By default, Flash Player (and AIR content that is not in the AIR application\nsandbox) first looks for a URL policy file named ",(0,t.jsx)(n.code,{children:"crossdomain.xml"})," in the root\ndirectory of the server, and looks for a socket policy file on port 843. A file\nin either of these locations is called the ",(0,t.jsx)(n.em,{children:"master policy file"}),". (In the case of\nsocket connections, Flash Player also looks for a socket policy file on the same\nport as the main connection. However, a policy file found on that port is not\nconsidered a master policy file.)"]}),"\n",(0,t.jsxs)(n.p,{children:["In addition to specifying access permissions, the master policy file can also\ncontain a ",(0,t.jsx)(n.em,{children:"meta-policy"}),' statement. A meta-policy specifies which locations can\ncontain policy files. The default meta-policy for URL policy files is\n"master-only," which means that /crossdomain.xml is the only policy file allowed\non the server. The default meta-policy for socket policy files is "all," which\nmeans that any socket on the host can serve a socket policy file.']}),"\n",(0,t.jsxs)(n.p,{children:['Note: In Flash Player 9 and earlier, the default meta-policy for URL policy\nfiles was "all," which means that any directory can contain a policy file. If\nyou have deployed applications that load policy files from locations other than\nthe default /crossdomain.xml file, and those applications might now be running\nin Flash Player 10, make sure you (or the server administrator) modify the\nmaster policy file to allow additional policy files. For information on how to\nspecify different a different meta-policy, see the Flash Player Developer Center\ntopic "Policy File Changes in Flash Player 9" at\n',(0,t.jsx)(n.a,{href:"https://web.archive.org/web/20150422111248/http://www.adobe.com/devnet/flashplayer/security.html",children:"www.adobe.com/go/devnet_security_en"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["A SWF file can check for a different policy filename or a different directory\nlocation by calling the ",(0,t.jsx)(n.code,{children:"Security.loadPolicyFile()"})," method. However, if the\nmaster policy file doesn't specify that the target location can serve policy\nfiles, the call to ",(0,t.jsx)(n.code,{children:"loadPolicyFile()"})," has no effect, even if there is a policy\nfile at that location. Call ",(0,t.jsx)(n.code,{children:"loadPolicyFile()"})," before attempting any network\noperations that require the policy file. Flash Player automatically queues\nnetworking requests behind their corresponding policy file attempts. So, for\nexample, it is acceptable to call ",(0,t.jsx)(n.code,{children:"Security.loadPolicyFile()"})," immediately before\ninitiating a networking operation."]}),"\n",(0,t.jsxs)(n.p,{children:["When checking for a master policy file, Flash Player waits three seconds for a\nserver response. If a response isn't received, Flash Player assumes that no\nmaster policy file exists. However, there is no default timeout value for calls\nto ",(0,t.jsx)(n.code,{children:"loadPolicyFile()"})," ; Flash Player assumes that the file being called exists,\nand waits as long as necessary to load it. Therefore, if you want to make sure\nthat a master policy file is loaded, use ",(0,t.jsx)(n.code,{children:"loadPolicyFile()"})," to call it\nexplicitly."]}),"\n",(0,t.jsxs)(n.p,{children:["Even though the method is named ",(0,t.jsx)(n.code,{children:"Security.loadPolicyFile()"}),", a policy file isn't\nloaded until a network call that requires a policy file is issued. Calls to\n",(0,t.jsx)(n.code,{children:"loadPolicyFile()"})," simply tell Flash Player where to look for policy files when\nthey are needed."]}),"\n",(0,t.jsx)(n.p,{children:"You can't receive notification of when a policy file request is initiated or\ncompleted, and there is no reason to do so. Flash Player performs policy checks\nasynchronously, and automatically waits to initiate connections until after the\npolicy file checks have succeeded."}),"\n",(0,t.jsxs)(n.p,{children:["The following sections contain information that applies only to URL policy\nfiles. For more information on socket policy files, see\n",(0,t.jsx)(n.a,{href:"/docs/development/security/loading-data#connecting-to-sockets",children:"Connecting to sockets"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"url-policy-file-scope",children:"URL policy file scope"}),"\n",(0,t.jsx)(n.p,{children:"A URL policy file applies only to the directory from which it is loaded and to\nits child directories. A policy file in the root directory applies to the whole\nserver; a policy file loaded from an arbitrary subdirectory applies only to that\ndirectory and its subdirectories."}),"\n",(0,t.jsxs)(n.p,{children:["A policy file affects access only to the particular server on which it resides.\nFor example, a policy file located at ",(0,t.jsx)(n.code,{children:"https://www.adobe.com:8080/crossdomain.xml"}),"\napplies only to data- loading calls made to ",(0,t.jsx)(n.a,{href:"http://www.adobe.com",children:"www.adobe.com"})," over HTTPS at\nport 8080."]}),"\n",(0,t.jsx)(n.h3,{id:"specifying-access-permissions-in-a-url-policy-file",children:"Specifying access permissions in a URL policy file"}),"\n",(0,t.jsxs)(n.p,{children:["A policy file contains a single ",(0,t.jsx)(n.code,{children:"<cross-domain-policy>"})," tag, which in turn\ncontains zero or more ",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," tags. Each ",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," tag\ncontains an attribute, ",(0,t.jsx)(n.code,{children:"domain"}),", which specifies either an exact IP address, an\nexact domain, or a wildcard domain (any domain). Wildcard domains are indicated\nin one of two ways:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["By a single asterisk (",(0,t.jsx)(n.code,{children:"*"}),"), which matches all domains and all IP addresses"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"By an asterisk followed by a suffix, which matches only those domains that end\nwith the specified suffix"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Suffixes must begin with a dot. However, wildcard domains with suffixes can\nmatch domains that consist of only the suffix without the leading dot. For\nexample, ",(0,t.jsx)(n.code,{children:"xyz.com"})," is considered to be part of ",(0,t.jsx)(n.code,{children:"*.xyz.com"}),". Wildcards are not\nallowed in IP domain specifications."]}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows a URL policy file that permits access to SWF files\nthat originate from ",(0,t.jsx)(n.code,{children:"*.example.com"}),", ",(0,t.jsx)(n.code,{children:"www.friendOfExample.com"})," and ",(0,t.jsx)(n.code,{children:"192.0.34.166"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<?xml version="1.0"?>\n<cross-domain-policy>\n\t<allow-access-from domain="*.example.com" />\n\t<allow-access-from domain="www.friendOfExample.com" />\n\t<allow-access-from domain="192.0.34.166" />\n</cross-domain-policy>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If you specify an IP address, access is granted only to SWF files loaded from\nthat IP address using IP syntax (for example,\n",(0,t.jsx)(n.code,{children:"http://65.57.83.12/flashmovie.swf"}),"). Access isn't granted to SWF files using\ndomain-name syntax. Flash Player does not perform DNS resolution."]}),"\n",(0,t.jsx)(n.p,{children:"You can permit access to documents originating from any domain, as shown in the\nfollowing example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<?xml version="1.0"?>\n\x3c!-- http://www.foo.com/crossdomain.xml --\x3e\n<cross-domain-policy>\n\t<allow-access-from domain="*" />\n</cross-domain-policy>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," tag also has the optional ",(0,t.jsx)(n.code,{children:"secure"})," attribute, which\ndefaults to ",(0,t.jsx)(n.code,{children:"true"}),". If your policy file is on an HTTPS server and you want to\nallow SWF files on a non-HTTPS server to load data from the HTTPS server, you\ncan set the attribute to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Setting the ",(0,t.jsx)(n.code,{children:"secure"})," attribute to ",(0,t.jsx)(n.code,{children:"false"})," could compromise the security offered\nby HTTPS. In particular, setting this attribute to ",(0,t.jsx)(n.code,{children:"false"})," opens secure content\nto snooping and spoofing attacks. Adobe strongly recommends that you not set the\n",(0,t.jsx)(n.code,{children:"secure"})," attribute to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If data to be loaded is on an HTTPS server, but the SWF file loading it is on an\nHTTP server, Adobe recommends that you move the loading SWF file to an HTTPS\nserver. Doing so lets you keep all copies of your secure data under the\nprotection of HTTPS. However, if you decide that you must keep the loading SWF\nfile on an HTTP server, add the ",(0,t.jsx)(n.code,{children:'secure="false"'})," attribute to the\n",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," tag, as shown in the following code:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<allow-access-from domain="www.example.com" secure="false" />\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Another element you can use to permit access is the\n",(0,t.jsx)(n.code,{children:"allow-http-request-headers-from"})," tag. This element grants a client hosting\ncontent from another permission domain to send user-defined headers to your\ndomain. While the ",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," tag grants other domains permission to\npull data from your domain, the ",(0,t.jsx)(n.code,{children:"allow-http-request-headers-from"})," tag grants\nother domains permission to push data to your domain, in the form of headers. In\nthe following example, any domain is permitted to send the SOAPAction header to\nthe current domain:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<cross-domain-policy>\n\t<allow-http-request-headers-from domain="*" headers="SOAPAction"/>\n</cross-domain-policy>\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If the ",(0,t.jsx)(n.code,{children:"allow-http-request-headers-from"})," statement is in the master policy file,\nit applies to all directories on the host. Otherwise, it applies only to the\ndirectory and subdirectories of the policy file that contains the statement."]}),"\n",(0,t.jsx)(n.h3,{id:"preloading-policy-files",children:"Preloading policy files"}),"\n",(0,t.jsx)(n.p,{children:"Loading data from a server or connecting to a socket is an asynchronous\noperation. Flash Player simply waits for the policy file to finish downloading\nbefore it begins the main operation. However, extracting pixel data from images\nor extracting sample data from sounds is a synchronous operation. The policy\nfile must load before you can extract data. When you load the media, specify\nthat it check for a policy file:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When using the ",(0,t.jsx)(n.code,{children:"Loader.load()"})," method, set the ",(0,t.jsx)(n.code,{children:"checkPolicyFile"})," property of\nthe ",(0,t.jsx)(n.code,{children:"context"})," parameter, which is a LoaderContext object."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When embedding an image in a text field using the ",(0,t.jsx)(n.code,{children:"<img>"})," tag, set the\n",(0,t.jsx)(n.code,{children:"checkPolicyFile"})," attribute of the ",(0,t.jsx)(n.code,{children:"<img>"})," tag to ",(0,t.jsx)(n.code,{children:'"true"'}),", as in the\nfollowing:"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<img checkPolicyFile = "true" src = "example.jpg">\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When using the ",(0,t.jsx)(n.code,{children:"Sound.load()"})," method, set the ",(0,t.jsx)(n.code,{children:"checkPolicyFile"})," property of\nthe ",(0,t.jsx)(n.code,{children:"context"})," parameter, which is a SoundLoaderContext object."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["When using the NetStream class, set the ",(0,t.jsx)(n.code,{children:"checkPolicyFile"})," property of the\nNetStream object."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When you set one of these parameters, Flash Player first checks for any policy\nfiles that it already has downloaded for that domain. Then it looks for the\npolicy file in the default location on the server, checking both for\n",(0,t.jsx)(n.code,{children:"<allow-access-from>"})," statements and for the presence of a meta-policy. Finally,\nit considers any pending calls to the ",(0,t.jsx)(n.code,{children:"Security.loadPolicyFile()"})," method to see\nif they are in scope."]}),"\n",(0,t.jsx)(n.h2,{id:"author-developer-controls",children:"Author (developer) controls"}),"\n",(0,t.jsxs)(n.p,{children:["The main ActionScript API used to grant security privileges is the\n",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method, which grant privileges to SWF files in the\ndomains that you specify. In the following example, a SWF file grants access to\nSWF files served from the ",(0,t.jsx)(n.a,{href:"http://www.example.com",children:"www.example.com"})," domain:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Security.allowDomain("www.example.com")\n'})}),"\n",(0,t.jsx)(n.p,{children:"This method grants permissions for the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Cross-scripting between SWF files (see\n",(0,t.jsx)(n.a,{href:"/docs/development/security/cross-scripting",children:"Cross-scripting"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Display list access (see\n",(0,t.jsx)(n.a,{href:"/docs/development/security/cross-scripting#traversing-the-display-list",children:"Traversing the display list"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Event detection (see ",(0,t.jsx)(n.a,{href:"/docs/development/security/cross-scripting#event-security",children:"Event security"}),")"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Full access to properties and methods of the Stage object (see\n",(0,t.jsx)(n.a,{href:"/docs/development/security/cross-scripting#stage-security",children:"Stage security"}),")"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The primary purpose of calling the ",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method is to grant\npermission for SWF files in an outside domain to script the SWF file calling the\n",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method. For more information, see\n",(0,t.jsx)(n.a,{href:"/docs/development/security/cross-scripting",children:"Cross-scripting"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Specifying an IP address as a parameter to the ",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method\ndoes not permit access by all parties that originate at the specified IP\naddress. Instead, it permits access only by a party that contains the specified\nIP address as its URL, rather than a domain name that maps to that IP address.\nFor example, if the domain name ",(0,t.jsx)(n.a,{href:"http://www.example.com",children:"www.example.com"})," maps to the IP address\n192.0.34.166, a call to ",(0,t.jsx)(n.code,{children:'Security.allowDomain("192.0.34.166")'})," does not grant\naccess to ",(0,t.jsx)(n.a,{href:"http://www.example.com",children:"www.example.com"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["You can pass the ",(0,t.jsx)(n.code,{children:'"*"'})," wildcard to the ",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method to allow\naccess from all domains. Because it grants permission for SWF files from ",(0,t.jsx)(n.em,{children:"all"}),"\ndomains to script the calling SWF file, use the ",(0,t.jsx)(n.code,{children:'"*"'})," wildcard with care."]}),"\n",(0,t.jsxs)(n.p,{children:["ActionScript includes a second permission API, called\n",(0,t.jsx)(n.code,{children:"Security.allowInsecureDomain()"}),". This method does the same thing as the\n",(0,t.jsx)(n.code,{children:"Security.allowDomain()"})," method, except that, when called from a SWF file served\nby a secure HTTPS connection, it additionally permits access to the calling SWF\nfile by other SWF files that are served from an insecure protocol, such as HTTP.\nHowever, it is not a good security practice to allow scripting between files\nfrom a secure protocol (HTTPS) and those from insecure protocols (such as HTTP);\ndoing so can open secure content to snooping and spoofing attacks. Here is how\nsuch attacks can work: since the ",(0,t.jsx)(n.code,{children:"Security.allowInsecureDomain()"})," method allows\naccess to your secure HTTPS data by SWF files served over HTTP connections, an\nattacker interposed between your HTTP server and your users could replace your\nHTTP SWF file with one of their own, which can then access your HTTPS data."]}),"\n",(0,t.jsxs)(n.p,{children:["Important: Code executing in the AIR application sandbox is not permitted to\ncall either the ",(0,t.jsx)(n.code,{children:"allowDomain()"})," or ",(0,t.jsx)(n.code,{children:"allowInsecureDomain()"})," methods of the\nSecurity class."]}),"\n",(0,t.jsxs)(n.p,{children:["Another important security-related method is the ",(0,t.jsx)(n.code,{children:"Security.loadPolicyFile()"}),"\nmethod, which causes Flash Player to check for a policy file at a nonstandard\nlocation. For more information, see\n",(0,t.jsx)(n.a,{href:"#website-controls-policy-files",children:"Website controls (policy files)"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);