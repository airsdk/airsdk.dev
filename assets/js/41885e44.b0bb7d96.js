"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[34820],{23029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"development/internationalizing-applications/internationalizing-applications/sorting-and-comparing-strings","title":"Sorting and comparing strings","description":"Collation is the process of arranging things in their proper order. Collation","source":"@site/docs/development/internationalizing-applications/internationalizing-applications/sorting-and-comparing-strings.md","sourceDirName":"development/internationalizing-applications/internationalizing-applications","slug":"/development/internationalizing-applications/internationalizing-applications/sorting-and-comparing-strings","permalink":"/docs/development/internationalizing-applications/internationalizing-applications/sorting-and-comparing-strings","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/internationalizing-applications/internationalizing-applications/sorting-and-comparing-strings.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"mainSidebar","previous":{"title":"Formatting dates and times","permalink":"/docs/development/internationalizing-applications/internationalizing-applications/formatting-dates-and-times"},"next":{"title":"Case conversion","permalink":"/docs/development/internationalizing-applications/internationalizing-applications/case-conversion"}}');var o=n(74848),a=n(28453);const s={sidebar_position:7},i="Sorting and comparing strings",c={},l=[{value:"Using the Collator class",id:"using-the-collator-class",level:2},{value:"Customizing the behavior of the Collator class",id:"customizing-the-behavior-of-the-collator-class",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"sorting-and-comparing-strings",children:"Sorting and comparing strings"})}),"\n",(0,o.jsx)(t.p,{children:"Collation is the process of arranging things in their proper order. Collation\nrules vary significantly by locale. The rules also differ if you are sorting a\nlist or matching similar items, such as in a text search algorithm."}),"\n",(0,o.jsx)(t.p,{children:"When sorting, small differences such as upper and lowercase letters or diacritic\nmarks such as accents, are often significant. For example, the letter \xf6 (o with\na diaeresis) is considered mostly equivalent to the plain letter o in French or\nEnglish. The same letter, however, follows the letter z in Swedish. Also, in\nFrench and some other languages, the last accent difference in a word determines\nits order in a sorted list."}),"\n",(0,o.jsx)(t.p,{children:'When searching, you often want to ignore differences in case or diacritics, to\nincrease the chance of finding relevant matches. For example, a search for the\ncharacters "cote" in a French document conceivably returns matches for "cote",\n"c\xf4te", and "cot\xe9".'}),"\n",(0,o.jsx)(t.h2,{id:"using-the-collator-class",children:"Using the Collator class"}),"\n",(0,o.jsx)(t.p,{children:"The main methods of the Collator class are the compare() method, used primarily\nfor sorting, and the equals() method, used for matching values."}),"\n",(0,o.jsx)(t.p,{children:"The following example shows the different behavior of the compare() and equals()\nmethods."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'var words:Array = new  Array("cot\xe9", "c\xf4te");\n\nvar sorter:Collator = new Collator("fr-FR", CollatorMode.SORTING);\nwords.sort(sorter.compare);\ntrace(words); // c\xf4te,cot\xe9\n\nvar matcher:Collator = new Collator("fr-FR", CollatorMode.MATCHING);\nif (matcher.equals(words[0], words[1]))\n{\n\ttrace(words[0] + " = " + words[1]); // c\xf4te = cot\xe9\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"The example first creates a Collator object in SORTING mode for the\nFrench-France locale. Then it sorts two words that differ only by diacritical\nmarks. This shows that the SORTING comparison distinguishes between accented and\nnon-accented characters."}),"\n",(0,o.jsx)(t.p,{children:"The sorting is performed by passing a reference to the Collator object's sort()\nmethod as a parameter to the Array.sort() method. This technique is one of the\nmost efficient ways of using a Collator object to control sort order."}),"\n",(0,o.jsx)(t.p,{children:"The example then creates a Collator object in MATCHING mode. When that Collator\nobject compares the two words, it treats them as equal. That shows that the\nMATCHING comparison values accented and non-accented characters the same."}),"\n",(0,o.jsx)(t.h2,{id:"customizing-the-behavior-of-the-collator-class",children:"Customizing the behavior of the Collator class"}),"\n",(0,o.jsx)(t.p,{children:"By default, the Collator class uses string comparison rules obtained from the\noperating system based on the locale and the user's system preferences. You can\ncustomize the behavior of the compare() and equals() methods by explicitly\nsetting various properties. The following table lists the properties and the\neffect they have upon comparisons:"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Collator Property"}),(0,o.jsx)(t.th,{children:"Effect"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"numericComparison"}),(0,o.jsx)(t.td,{children:"Controls whether digit characters are treated as numbers or as text."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"ignoreCase"}),(0,o.jsx)(t.td,{children:"Controls whether uppercase and lowercase differences are ignored."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"ignoreCharacterWidth"}),(0,o.jsx)(t.td,{children:"Controls whether full-width and half-width forms of some Chinese and Japanese characters are evaluated as equal."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"ignoreDiacritics"}),(0,o.jsx)(t.td,{children:"Controls whether strings that use the same base characters but different accents or other diacritic marks are evaluated as equal."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"ignoreKanaType"}),(0,o.jsx)(t.td,{children:"Controls whether strings that differ only by the type of kana character being used are treated as equal."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"ignoreSymbols"}),(0,o.jsx)(t.td,{children:"Controls whether symbol characters such as spaces, currency symbols, math symbols, and others are ignored."})]})]})]}),"\n",(0,o.jsx)(t.p,{children:"The following code shows that setting the ignoreDiacritics property to true\nchanges the sort order of a list of French words:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'var words:Array = new  Array("COTE", "cot\xe9", "c\xf4te", "Cot\xe9","cote");\nvar sorter:Collator = new Collator("fr-CA", CollatorMode.SORTING);\nwords.sort(sorter.compare);\ntrace(words); // cote,COTE,c\xf4te,cot\xe9,Cot\xe9\n\nsorter.ignoreDiacritics = true;\nwords.sort(sorter.compare);\ntrace(words); // c\xf4te,cot\xe9,cote,Cot\xe9,COTE\n'})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);