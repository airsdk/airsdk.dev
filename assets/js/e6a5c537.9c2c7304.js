"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4334],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(96540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}},75614:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"development/security/loading-content","title":"Loading content","description":"Flash Player and AIR content can load many types of other content, including the","source":"@site/docs/development/security/loading-content.md","sourceDirName":"development/security","slug":"/development/security/loading-content","permalink":"/docs/development/security/loading-content","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/security/loading-content.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"mainSidebar","previous":{"title":"Full-screen interactive mode security","permalink":"/docs/development/security/full-screen-interactive-mode-security"},"next":{"title":"Cross-scripting","permalink":"/docs/development/security/cross-scripting"}}');var o=i(74848),a=i(28453);const s={sidebar_position:7},d="Loading content",r={},l=[{value:"Loading SWF files and images with the Loader class",id:"loading-swf-files-and-images-with-the-loader-class",level:2},{value:"Loading sound and videos",id:"loading-sound-and-videos",level:2},{value:"Loading SWF files and images using the &lt;img&gt; tag in a text field",id:"loading-swf-files-and-images-using-the-img-tag-in-a-text-field",level:2},{value:"Adobe AIR",id:"adobe-air",level:4},{value:"Content delivered using RTMP servers",id:"content-delivered-using-rtmp-servers",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"loading-content",children:"Loading content"})}),"\n",(0,o.jsx)(n.p,{children:"Flash Player and AIR content can load many types of other content, including the\nfollowing:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"SWF files"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Images"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Sound"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Video"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"HTML files (AIR only)"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"JavaScript (AIR only)"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"loading-swf-files-and-images-with-the-loader-class",children:"Loading SWF files and images with the Loader class"}),"\n",(0,o.jsx)(n.p,{children:"You use the Loader class to load SWF files and images (JPG, GIF, or PNG files).\nAny SWF file, other than one in the local-with-filesystem sandbox, can load SWF\nfiles and images from any network domain. Only SWF files in local sandboxes can\nload SWF files and images from the local file system. However, files in the\nlocal-with-networking sandbox can only load local SWF files that are in the\nlocal-trusted or local-with-networking sandbox. SWF files in the\nlocal-with-networking sandbox load local content other than SWF files (such as\nimages), however they cannot access data in the loaded content."}),"\n",(0,o.jsx)(n.p,{children:"When loading a SWF file from a non-trusted source (such as a domain other than\nthat of the Loader object's root SWF file), you may want to define a mask for\nthe Loader object, to prevent the loaded content (which is a child of the Loader\nobject) from drawing to portions of the Stage outside of that mask, as in the\nfollowing code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'import flash.display.*;\nimport flash.net.URLRequest;\nvar rect:Shape = new Shape();\nrect.graphics.beginFill(0xFFFFFF);\nrect.graphics.drawRect(0, 0, 100, 100);\naddChild(rect);\nvar ldr:Loader = new Loader();\nldr.mask = rect;\nvar url:String = "http://www.unknown.example.com/content.swf";\nvar urlReq:URLRequest = new URLRequest(url);\nldr.load(urlReq);\naddChild(ldr);\n'})}),"\n",(0,o.jsxs)(n.p,{children:["When you call the ",(0,o.jsx)(n.code,{children:"load()"})," method of the Loader object, you can specify a\n",(0,o.jsx)(n.code,{children:"context"})," parameter, which is a LoaderContext object. The LoaderContext class\nincludes three properties that let you define the context of how the loaded\ncontent can be used:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"checkPolicyFile"}),": Use this property only when loading an image file (not a\nSWF file). Specify this for an image file from a domain other than that of the\nfile containing the Loader object. If you set this property to ",(0,o.jsx)(n.code,{children:"true"}),", the\nLoader checks the origin server for a URL policy file (see\n",(0,o.jsx)(n.a,{href:"/docs/development/security/permission-controls#website-controls-policy-files",children:"Website controls (policy files)"}),").\nIf the server grants permission to the Loader domain, ActionScript from SWF\nfiles in the Loader domain can access data in the loaded image. In other\nwords, you can use the ",(0,o.jsx)(n.code,{children:"Loader.content"})," property to obtain a reference to the\nBitmap object that represents the loaded image, or the ",(0,o.jsx)(n.code,{children:"BitmapData.draw()"})," or\n",(0,o.jsx)(n.code,{children:"BitmapData.drawWithQuality()"})," methods to access pixels from the loaded image.\nThe ",(0,o.jsx)(n.code,{children:"drawWithQuality"})," method is available in Flash Player 11.3 and higher; AIR\n3.3 and higher."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"securityDomain"}),": Use this property only when loading a SWF file (not an\nimage). Specify this for a SWF file from a domain other than that of the file\ncontaining the Loader object. Only two values are currently supported for the\n",(0,o.jsx)(n.code,{children:"securityDomain"})," property: ",(0,o.jsx)(n.code,{children:"null"})," (the default) and\n",(0,o.jsx)(n.code,{children:"SecurityDomain.currentDomain"}),". If you specify ",(0,o.jsx)(n.code,{children:"SecurityDomain.currentDomain"}),",\nthis requests that the loaded SWF file be ",(0,o.jsx)(n.em,{children:"imported"})," to the sandbox of the\nloading SWF file, meaning that it operates as though it had been loaded from\nthe loading SWF file's own server. This is only permitted if a URL policy file\nis found on the loaded SWF file's server, allowing access by the loading SWF\nfile's domain. If the required policy file is found, the loader and loadee can\nfreely script each other once the load begins, since they are in the same\nsandbox. Note that sandbox importing can mostly be replaced by performing an\nordinary load and then having the loaded SWF file call the\n",(0,o.jsx)(n.code,{children:"Security.allowDomain()"})," method. This latter method may be easier to use,\nsince the loaded SWF file will then be in its own natural sandbox, and thus\nable to access resources on its own actual server."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"applicationDomain"}),": Use this property only when loading a SWF file written in\nActionScript 3.0 (not an image or a SWF file written in ActionScript 1.0 or\n2.0). When loading the file, you can specify that the file be placed into a\nparticular application domain, rather than the default of being placed in a\nnew application domain that is a child of the loading SWF file's application\ndomain. Note that application domains are subunits of security domains, and\nthus you can specify a target application domain only if the SWF file that you\nare loading is from your own security domain, either because it is from your\nown server, or because you have successfully imported it into your security\ndomain using the ",(0,o.jsx)(n.code,{children:"securityDomain"})," property. If you specify an application\ndomain but the loaded SWF file is part of a different security domain, the\ndomain you specify in ",(0,o.jsx)(n.code,{children:"applicationDomain"})," is ignored. For more information,\nsee\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/working-with-application-domains",children:"Working with application domains"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For details, see\n",(0,o.jsx)(n.a,{href:"/docs/development/display/display-programming/loading-display-content-dynamically#specifying-loading-context",children:"Specifying loading context"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["An important property of a Loader object is the ",(0,o.jsx)(n.code,{children:"contentLoaderInfo"})," property,\nwhich is a LoaderInfo object. Unlike most other objects, a LoaderInfo object is\nshared between the loading SWF file and the loaded content, and it is always\naccessible to both parties. When the loaded content is a SWF file, it can access\nthe LoaderInfo object through the ",(0,o.jsx)(n.code,{children:"DisplayObject.loaderInfo"})," property.\nLoaderInfo objects include information such as load progress, the URLs of loader\nand loadee, the trust relationship between loader and loadee, and other\ninformation. For more information, see\n",(0,o.jsx)(n.a,{href:"/docs/development/display/display-programming/loading-display-content-dynamically#monitoring-loading-progress",children:"Monitoring loading progress"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"loading-sound-and-videos",children:"Loading sound and videos"}),"\n",(0,o.jsxs)(n.p,{children:["Any content, except content in the local-with-filesystem sandbox, is allowed to\nload sound and video from network origins, using the ",(0,o.jsx)(n.code,{children:"Sound.load()"}),",\n",(0,o.jsx)(n.code,{children:"NetConnection.connect()"}),", and ",(0,o.jsx)(n.code,{children:"NetStream.play()"})," methods."]}),"\n",(0,o.jsx)(n.p,{children:"Only content in the local-with-filesystem and AIR application sandboxes can load\nmedia from the local file system. Only content in the local-with-filesystem\nsandbox, the AIR application sandbox, or the local-trusted sandbox can access\ndata in these loaded files."}),"\n",(0,o.jsxs)(n.p,{children:["There are other restrictions on accessing data from loaded media. For details,\nsee ",(0,o.jsx)(n.a,{href:"/docs/development/security/accessing-loaded-media-as-data",children:"Accessing loaded media as data"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"loading-swf-files-and-images-using-the-img-tag-in-a-text-field",children:"Loading SWF files and images using the <img> tag in a text field"}),"\n",(0,o.jsxs)(n.p,{children:["You can load SWF files and bitmaps into a text field by using the ",(0,o.jsx)(n.code,{children:"<img>"})," tag,\nas in the following code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"<img src = 'filename.jpg' id = 'instanceName' >\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can access content loaded this way by using the ",(0,o.jsx)(n.code,{children:"getImageReference()"})," method\nof the TextField instance, as in the following code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var loadedObject:DisplayObject = myTextField.getImageReference('instanceName');\n"})}),"\n",(0,o.jsx)(n.p,{children:"Note, however, that SWF files and images loaded in this way are put in the\nsandbox that corresponds to their origin."}),"\n",(0,o.jsxs)(n.p,{children:["When you load an image file using an ",(0,o.jsx)(n.code,{children:"<img>"})," tag in a text field, access to the\ndata in the image may be permitted by a URL policy file. You can check for a\npolicy file by adding a ",(0,o.jsx)(n.code,{children:"checkPolicyFile"})," attribute to the ",(0,o.jsx)(n.code,{children:"<img>"})," tag, as in\nthe following code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"<img src = 'filename.jpg' checkPolicyFile = 'true' id = 'instanceName' >\n"})}),"\n",(0,o.jsxs)(n.p,{children:["When you load a SWF using an ",(0,o.jsx)(n.code,{children:"<img>"})," tag in a text field, you can permit access\nto that SWF file's data through a call to the ",(0,o.jsx)(n.code,{children:"Security.allowDomain()"})," method."]}),"\n",(0,o.jsxs)(n.p,{children:["When you use an ",(0,o.jsx)(n.code,{children:"<img>"})," tag in a text field to load an external file (as opposed\nto using a Bitmap class embedded within your SWF), a Loader object is\nautomatically created as a child of the TextField object, and the external file\nis loaded into that Loader just as if you had used a Loader object in\nActionScript to load the file. In this case, the ",(0,o.jsx)(n.code,{children:"getImageReference()"})," method\nreturns the Loader that was automatically created. No security check is needed\nto access this Loader object because it is in the same security sandbox as the\ncalling code."]}),"\n",(0,o.jsxs)(n.p,{children:["However, when you refer to the ",(0,o.jsx)(n.code,{children:"content"})," property of the Loader object to access\nthe loaded media, security rules apply. If the content is an image, you need to\nimplement a URL policy file, and if the content is a SWF file, you need to have\nthe code in the SWF file call the ",(0,o.jsx)(n.code,{children:"allowDomain()"})," method."]}),"\n",(0,o.jsx)(n.h4,{id:"adobe-air",children:"Adobe AIR"}),"\n",(0,o.jsxs)(n.p,{children:["In the application sandbox, <img> tags in a text field are ignored to prevent\nphishing attacks. In addition, code running in the application sandbox is not\npermitted to call the Security ",(0,o.jsx)(n.code,{children:"allowDomain()"})," method."]}),"\n",(0,o.jsx)(n.h2,{id:"content-delivered-using-rtmp-servers",children:"Content delivered using RTMP servers"}),"\n",(0,o.jsxs)(n.p,{children:["Flash Media Server uses the Real-Time Media Protocol (RTMP) to serve data,\naudio, and video. You can load this media by using the ",(0,o.jsx)(n.code,{children:"connect()"})," method of the\nNetConnection class, passing an RTMP URL as the parameter. Flash Media Server\ncan restrict connections and prevent content from downloading, based on the\ndomain of the requesting file. For details, see the Flash Media Server\ndocumentation online at\n",(0,o.jsx)(n.a,{href:"https://web.archive.org/web/20150702070954/http://www.adobe.com/support/documentation/en/flashmediaserver/",children:"www.adobe.com/go/learn_fms_docs_en"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To use the ",(0,o.jsx)(n.code,{children:"BitmapData.draw()"}),", ",(0,o.jsx)(n.code,{children:"BitmapData.drawWithQuality()"}),", and\n",(0,o.jsx)(n.code,{children:"SoundMixer.computeSpectrum()"})," methods to extract run-time graphics and sound\ndata from RTMP streams, you must allow access on the server. Use the Server-Side\nActionScript ",(0,o.jsx)(n.code,{children:"Client.videoSampleAccess"})," and ",(0,o.jsx)(n.code,{children:"Client.audioSampleAccess"}),"\nproperties to allow access to specific directories on Flash Media Server. For\nmore information, see the\n",(0,o.jsx)(n.a,{href:"https://web.archive.org/web/20150702070954/http://www.adobe.com/support/documentation/en/flashmediaserver/",children:"Server-Side ActionScript Language Reference"}),".\n(The ",(0,o.jsx)(n.code,{children:"drawWithQuality"})," method is available in Flash Player 11.3 and higher; AIR\n3.3 and higher.)"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);