"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[11199],{5542:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database","title":"Retrieving data from a database","description":"Retrieving data from a database involves two steps. First, you execute a SQL","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/retrieving-data-from-a-database.md","tags":[],"version":"current","sidebarPosition":7.4,"frontMatter":{"sidebar_position":7.4},"sidebar":"mainSidebar","previous":{"title":"Using parameters in statements","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-parameters-in-statements"},"next":{"title":"Inserting data","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/inserting-data"}}');var s=n(74848),r=n(28453);const i={sidebar_position:7.4},o="Retrieving data from a database",c={},l=[{value:"Executing a SELECT statement",id:"executing-a-select-statement",level:2},{value:"Accessing SELECT statement result data",id:"accessing-select-statement-result-data",level:2},{value:"Defining the data type of SELECT result data",id:"defining-the-data-type-of-select-result-data",level:2},{value:"Retrieving SELECT results in parts",id:"retrieving-select-results-in-parts",level:2}];function d(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"retrieving-data-from-a-database",children:"Retrieving data from a database"})}),"\n",(0,s.jsxs)(e.p,{children:["Retrieving data from a database involves two steps. First, you execute a SQL\n",(0,s.jsx)(e.code,{children:"SELECT"})," statement, describing the set of data you want from the database. Next,\nyou access the retrieved data and display or manipulate it as needed by your\napplication."]}),"\n",(0,s.jsx)(e.h2,{id:"executing-a-select-statement",children:"Executing a SELECT statement"}),"\n",(0,s.jsxs)(e.p,{children:["To retrieve existing data from a database, you use a\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\ninstance. Assign the appropriate SQL ",(0,s.jsx)(e.code,{children:"SELECT"})," statement to the instance's ",(0,s.jsx)(e.code,{children:"text"}),"\nproperty, then call its ",(0,s.jsx)(e.code,{children:"execute()"})," method."]}),"\n",(0,s.jsxs)(e.p,{children:["For details on the syntax of the ",(0,s.jsx)(e.code,{children:"SELECT"})," statement, see\n",(0,s.jsx)(e.a,{href:"/docs/development/appendixes/sql-support-in-local-databases/",children:"SQL support in local databases"}),"."]}),"\n",(0,s.jsxs)(e.p,{children:["The following example demonstrates executing a ",(0,s.jsx)(e.code,{children:"SELECT"}),' statement to retrieve\ndata from a table named "products," using asynchronous execution mode:']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'var selectStmt:SQLStatement = new SQLStatement();\n\n// A SQLConnection named "conn" has been created previously\nselectStmt.sqlConnection = conn;\n\nselectStmt.text = "SELECT itemId, itemName, price FROM products";\n\nselectStmt.addEventListener(SQLEvent.RESULT, resultHandler);\nselectStmt.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\nselectStmt.execute();\n\nfunction resultHandler(event:SQLEvent):void\n{\n\tvar result:SQLResult = selectStmt.getResult();\n\n\tvar numResults:int = result.data.length;\n\tfor (var i:int = 0; i < numResults; i++)\n\t{\n\t\tvar row:Object = result.data[i];\n\t\tvar output:String = "itemId: " + row.itemId;\n\t\toutput += "; itemName: " + row.itemName;\n\t\toutput += "; price: " + row.price;\n\t\ttrace(output);\n\t}\n}\n\nfunction errorHandler(event:SQLErrorEvent):void\n{\n\t// Information about the error is available in the\n\t// event.error property, which is an instance of\n\t// the SQLError class.\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.errors.SQLError;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar selectStmt:SQLStatement = new SQLStatement();\n\n\t\t\t\t// A SQLConnection named "conn" has been created previously\n\t\t\t\tselectStmt.sqlConnection = conn;\n\n\t\t\t\tselectStmt.text = "SELECT itemId, itemName, price FROM products";\n\n\t\t\t\tselectStmt.addEventListener(SQLEvent.RESULT, resultHandler);\n\t\t\t\tselectStmt.addEventListener(SQLErrorEvent.ERROR, errorHandler);\n\n\t\t\t\tselectStmt.execute();\n\t\t\t}\n\n\t\t\tprivate function resultHandler(event:SQLEvent):void\n\t\t\t{\n\t\t\t\tvar result:SQLResult = selectStmt.getResult();\n\n\t\t\t\tvar numResults:int = result.data.length;\n\t\t\t\tfor (var i:int = 0; i < numResults; i++)\n\t\t\t\t{\n\t\t\t\t\tvar row:Object = result.data[i];\n\t\t\t\t\tvar output:String = "itemId: " + row.itemId;\n\t\t\t\t\toutput += "; itemName: " + row.itemName;\n\t\t\t\t\toutput += "; price: " + row.price;\n\t\t\t\t\ttrace(output);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate function errorHandler(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\t// Information about the error is available in the\n\t\t\t\t// event.error property, which is an instance of\n\t\t\t\t// the SQLError class.\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The following example demonstrates executing a ",(0,s.jsx)(e.code,{children:"SELECT"}),' statement to retrieve\ndata from a table named "products," using synchronous execution mode:']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'var selectStmt:SQLStatement = new SQLStatement();\n\n// A SQLConnection named "conn" has been created previously\nselectStmt.sqlConnection = conn;\n\nselectStmt.text = "SELECT itemId, itemName, price FROM products";\n\ntry\n{\n\tselectStmt.execute();\n\n\tvar result:SQLResult = selectStmt.getResult();\n\n\tvar numResults:int = result.data.length;\n\tfor (var i:int = 0; i < numResults; i++)\n\t{\n\t\tvar row:Object = result.data[i];\n\t\tvar output:String = "itemId: " + row.itemId;\n\t\toutput += "; itemName: " + row.itemName;\n\t\toutput += "; price: " + row.price;\n\t\ttrace(output);\n\t}\n}\ncatch (error:SQLError)\n{\n\t// Information about the error is available in the\n\t// error variable, which is an instance of\n\t// the SQLError class.\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.errors.SQLError;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\tvar selectStmt:SQLStatement = new SQLStatement();\n\n\t\t\t\t// A SQLConnection named "conn" has been created previously\n\t\t\t\tselectStmt.sqlConnection = conn;\n\n\t\t\t\tselectStmt.text = "SELECT itemId, itemName, price FROM products";\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tselectStmt.execute();\n\n\t\t\t\t\tvar result:SQLResult = selectStmt.getResult();\n\n\t\t\t\t\tvar numResults:int = result.data.length;\n\t\t\t\t\tfor (var i:int = 0; i < numResults; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar row:Object = result.data[i];\n\t\t\t\t\t\tvar output:String = "itemId: " + row.itemId;\n\t\t\t\t\t\toutput += "; itemName: " + row.itemName;\n\t\t\t\t\t\toutput += "; price: " + row.price;\n\t\t\t\t\t\ttrace(output);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\t// Information about the error is available in the\n\t\t\t\t\t// error variable, which is an instance of\n\t\t\t\t\t// the SQLError class.\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["In asynchronous execution mode, when the statement finishes executing, the\nSQLStatement instance dispatches a ",(0,s.jsx)(e.code,{children:"result"})," event ( ",(0,s.jsx)(e.code,{children:"SQLEvent.RESULT"}),")\nindicating that the statement was run successfully. Alternatively, if a\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/Responder.html",children:"Responder"}),"\nobject is passed as an argument to the ",(0,s.jsx)(e.code,{children:"execute()"})," method, the Responder\nobject's result handler function is called. In synchronous execution mode,\nexecution pauses until the ",(0,s.jsx)(e.code,{children:"execute()"})," operation completes, then continues on\nthe next line of code."]}),"\n",(0,s.jsx)(e.h2,{id:"accessing-select-statement-result-data",children:"Accessing SELECT statement result data"}),"\n",(0,s.jsxs)(e.p,{children:["Once the ",(0,s.jsx)(e.code,{children:"SELECT"})," statement has finished executing, the next step is to access\nthe data that was retrieved. You retrieve the result data from executing a\n",(0,s.jsx)(e.code,{children:"SELECT"})," statement by calling the SQLStatement object's ",(0,s.jsx)(e.code,{children:"getResult()"})," method:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"var result:SQLResult = selectStatement.getResult();\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"getResult()"})," method returns a\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLResult.html",children:"SQLResult"}),"\nobject. The SQLResult object's ",(0,s.jsx)(e.code,{children:"data"})," property is an Array containing the\nresults of the ",(0,s.jsx)(e.code,{children:"SELECT"})," statement:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"var numResults:int = result.data.length;\nfor (var i:int = 0; i < numResults; i++)\n{\n\t// row is an Object representing one row of result data\n\tvar row:Object = result.data[i];\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["Each row of data in the ",(0,s.jsx)(e.code,{children:"SELECT"})," result set becomes an Object instance contained\nin the ",(0,s.jsx)(e.code,{children:"data"})," Array. That object has properties whose names match the result\nset's column names. The properties contain the values from the result set's\ncolumns. For example, suppose a ",(0,s.jsx)(e.code,{children:"SELECT"}),' statement specifies a result set with\nthree columns named "itemId," "itemName," and "price." For each row in the\nresult set, an Object instance is created with properties named ',(0,s.jsx)(e.code,{children:"itemId"}),",\n",(0,s.jsx)(e.code,{children:"itemName"}),", and ",(0,s.jsx)(e.code,{children:"price"}),". Those properties contain the values from their\nrespective columns."]}),"\n",(0,s.jsxs)(e.p,{children:["The following code listing defines a SQLStatement instance whose text is a\n",(0,s.jsx)(e.code,{children:"SELECT"})," statement. The statement retrieves rows containing the ",(0,s.jsx)(e.code,{children:"firstName"})," and\n",(0,s.jsx)(e.code,{children:"lastName"})," column values of all the rows of a table named ",(0,s.jsx)(e.code,{children:"employees"}),". This\nexample uses asynchronous execution mode. When the execution completes, the\n",(0,s.jsx)(e.code,{children:"selectResult()"})," method is called, and the resulting rows of data are accessed\nusing ",(0,s.jsx)(e.code,{children:"SQLStatement.getResult()"})," and displayed using the ",(0,s.jsx)(e.code,{children:"trace()"})," method. Note\nthat this listing assumes there is a SQLConnection instance named ",(0,s.jsx)(e.code,{children:"conn"}),' that\nhas already been instantiated and is already connected to the database. It also\nassumes that the "employees" table has already been created and populated with\ndata.']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLResult;\nimport flash.data.SQLStatement;\nimport flash.events.SQLErrorEvent;\nimport flash.events.SQLEvent;\n\n// ... create and open the SQLConnection instance named conn ...\n\n// create the SQL statement\nvar selectStmt:SQLStatement = new SQLStatement();\nselectStmt.sqlConnection = conn;\n\n// define the SQL text\nvar sql:String =\n\t"SELECT firstName, lastName " +\n\t"FROM employees";\nselectStmt.text = sql;\n\n// register listeners for the result and error events\nselectStmt.addEventListener(SQLEvent.RESULT, selectResult);\nselectStmt.addEventListener(SQLErrorEvent.ERROR, selectError);\n\n// execute the statement\nselectStmt.execute();\n\nfunction selectResult(event:SQLEvent):void\n{\n\t// access the result data\n\tvar result:SQLResult = selectStmt.getResult();\n\n\tvar numRows:int = result.data.length;\n\tfor (var i:int = 0; i < numRows; i++)\n\t{\n\t\tvar output:String = "";\n\t\tfor (var columnName:String in result.data[i])\n\t\t{\n\t\t\toutput += columnName + ": " + result.data[i][columnName] + "; ";\n\t\t}\n\t\ttrace("row[" + i.toString() + "]\\t", output);\n\t}\n}\n\nfunction selectError(event:SQLErrorEvent):void\n{\n\ttrace("Error message:", event.error.message);\n\ttrace("Details:", event.error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.events.SQLErrorEvent;\n\t\t\timport flash.events.SQLEvent;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\t// create the SQL statement\n\t\t\t\tvar selectStmt:SQLStatement = new SQLStatement();\n\t\t\t\tselectStmt.sqlConnection = conn;\n\n\t\t\t\t// define the SQL text\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"SELECT firstName, lastName " +\n\t\t\t\t\t"FROM employees";\n\t\t\t\tselectStmt.text = sql;\n\n\t\t\t\t// register listeners for the result and error events\n\t\t\t\tselectStmt.addEventListener(SQLEvent.RESULT, selectResult);\n\t\t\t\tselectStmt.addEventListener(SQLErrorEvent.ERROR, selectError);\n\n\t\t\t\t// execute the statement\n\t\t\t\tselectStmt.execute();\n\t\t\t}\n\n\t\t\tprivate function selectResult(event:SQLEvent):void\n\t\t\t{\n\t\t\t\t// access the result data\n\t\t\t\tvar result:SQLResult = selectStmt.getResult();\n\n\t\t\t\tvar numRows:int = result.data.length;\n\t\t\t\tfor (var i:int = 0; i < numRows; i++)\n\t\t\t\t{\n\t\t\t\t\tvar output:String = "";\n\t\t\t\t\tfor (var columnName:String in result.data[i])\n\t\t\t\t\t{\n\t\t\t\t\t\toutput += columnName + ": " + result.data[i][columnName] + "; ";\n\t\t\t\t\t}\n\t\t\t\t\ttrace("row[" + i.toString() + "]\\t", output);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate function selectError(event:SQLErrorEvent):void\n\t\t\t{\n\t\t\t\ttrace("Error message:", event.error.message);\n\t\t\t\ttrace("Details:", event.error.details);\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The following code listing demonstrates the same techniques as the preceding\none, but uses synchronous execution mode. The example defines a\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\ninstance whose text is a ",(0,s.jsx)(e.code,{children:"SELECT"})," statement. The statement retrieves rows\ncontaining the ",(0,s.jsx)(e.code,{children:"firstName"})," and ",(0,s.jsx)(e.code,{children:"lastName"})," column values of all the rows of a\ntable named ",(0,s.jsx)(e.code,{children:"employees"}),". The resulting rows of data are accessed using\n",(0,s.jsx)(e.code,{children:"SQLStatement.getResult()"})," and displayed using the ",(0,s.jsx)(e.code,{children:"trace()"})," method. Note that\nthis listing assumes there is a SQLConnection instance named ",(0,s.jsx)(e.code,{children:"conn"}),' that has\nalready been instantiated and is already connected to the database. It also\nassumes that the "employees" table has already been created and populated with\ndata.']}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'import flash.data.SQLConnection;\nimport flash.data.SQLResult;\nimport flash.data.SQLStatement;\nimport flash.errors.SQLError;\n\n// ... create and open the SQLConnection instance named conn ...\n\n// create the SQL statement\nvar selectStmt:SQLStatement = new SQLStatement();\nselectStmt.sqlConnection = conn;\n\n// define the SQL text\nvar sql:String =\n\t"SELECT firstName, lastName " +\n\t"FROM employees";\nselectStmt.text = sql;\n\ntry\n{\n\t// execute the statement\n\tselectStmt.execute();\n\n\t// access the result data\n\tvar result:SQLResult = selectStmt.getResult();\n\n\tvar numRows:int = result.data.length;\n\tfor (var i:int = 0; i < numRows; i++)\n\t{\n\t\tvar output:String = "";\n\t\tfor (var columnName:String in result.data[i])\n\t\t{\n\t\t\toutput += columnName + ": " + result.data[i][columnName] + "; ";\n\t\t}\n\t\ttrace("row[" + i.toString() + "]\\t", output);\n\t}\n}\ncatch (error:SQLError)\n{\n\ttrace("Error message:", error.message);\n\ttrace("Details:", error.details);\n}\n\n<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" creationComplete="init()">\n\t<mx:Script>\n\t\t<![CDATA[\n\t\t\timport flash.data.SQLConnection;\n\t\t\timport flash.data.SQLResult;\n\t\t\timport flash.data.SQLStatement;\n\t\t\timport flash.errors.SQLError;\n\n\t\t\tprivate function init():void\n\t\t\t{\n\t\t\t\t// ... create and open the SQLConnection instance named conn ...\n\n\t\t\t\t// create the SQL statement\n\t\t\t\tvar selectStmt:SQLStatement = new SQLStatement();\n\t\t\t\tselectStmt.sqlConnection = conn;\n\n\t\t\t\t// define the SQL text\n\t\t\t\tvar sql:String =\n\t\t\t\t\t"SELECT firstName, lastName " +\n\t\t\t\t\t"FROM employees";\n\t\t\t\tselectStmt.text = sql;\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t// execute the statement\n\t\t\t\t\tselectStmt.execute();\n\n\t\t\t\t\t// access the result data\n\t\t\t\t\tvar result:SQLResult = selectStmt.getResult();\n\n\t\t\t\t\tvar numRows:int = result.data.length;\n\t\t\t\t\tfor (var i:int = 0; i < numRows; i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar output:String = "";\n\t\t\t\t\t\tfor (var columnName:String in result.data[i])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toutput += columnName + ": ";\n\t\t\t\t\t\t\toutput += result.data[i][columnName] + "; ";\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttrace("row[" + i.toString() + "]\\t", output);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (error:SQLError)\n\t\t\t\t{\n\t\t\t\t\ttrace("Error message:", error.message);\n\t\t\t\t\ttrace("Details:", error.details);\n\t\t\t\t}\n\t\t\t}\n\t\t]]>\n\t</mx:Script>\n</mx:WindowedApplication>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"defining-the-data-type-of-select-result-data",children:"Defining the data type of SELECT result data"}),"\n",(0,s.jsxs)(e.p,{children:["By default, each row returned by a ",(0,s.jsx)(e.code,{children:"SELECT"})," statement is created as an Object\ninstance with properties named for the result set's column names and with the\nvalue of each column as the value of its associated property. However, before\nexecuting a SQL ",(0,s.jsx)(e.code,{children:"SELECT"})," statement, you can set the ",(0,s.jsx)(e.code,{children:"itemClass"})," property of the\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\ninstance to a class. By setting the ",(0,s.jsx)(e.code,{children:"itemClass"})," property, each row returned by\nthe ",(0,s.jsx)(e.code,{children:"SELECT"})," statement is created as an instance of the designated class. The\nruntime assigns result column values to property values by matching the column\nnames in the ",(0,s.jsx)(e.code,{children:"SELECT"})," result set to the names of the properties in the\n",(0,s.jsx)(e.code,{children:"itemClass"})," class."]}),"\n",(0,s.jsxs)(e.p,{children:["Any class assigned as an ",(0,s.jsx)(e.code,{children:"itemClass"})," property value must have a constructor that\ndoes not require any parameters. In addition, the class must have a single\nproperty for each column returned by the ",(0,s.jsx)(e.code,{children:"SELECT"})," statement. It is considered an\nerror if a column in the ",(0,s.jsx)(e.code,{children:"SELECT"})," list does not have a matching property name in\nthe ",(0,s.jsx)(e.code,{children:"itemClass"})," class."]}),"\n",(0,s.jsx)(e.h2,{id:"retrieving-select-results-in-parts",children:"Retrieving SELECT results in parts"}),"\n",(0,s.jsxs)(e.p,{children:["By default, a ",(0,s.jsx)(e.code,{children:"SELECT"})," statement execution retrieves all the rows of the result\nset at one time. Once the statement completes, you usually process the retrieved\ndata in some way, such as creating objects or displaying the data on the screen.\nIf the statement returns a large number of rows, processing all the data at once\ncan be demanding for the computer, which in turn will cause the user interface\nto not redraw itself."]}),"\n",(0,s.jsx)(e.p,{children:"You can improve the perceived performance of your application by instructing the\nruntime to return a specific number of result rows at a time. Doing so causes\nthe initial result data to return more quickly. It also allows you to divide the\nresult rows into sets, so that the user interface is updated after each set of\nrows is processed. Note that it's only practical to use this technique in\nasynchronous execution mode."}),"\n",(0,s.jsxs)(e.p,{children:["To retrieve ",(0,s.jsx)(e.code,{children:"SELECT"})," results in parts, specify a value for the\n",(0,s.jsx)(e.code,{children:"SQLStatement.execute()"})," method's first parameter (the ",(0,s.jsx)(e.code,{children:"prefetch"})," parameter).\nThe ",(0,s.jsx)(e.code,{children:"prefetch"})," parameter indicates the number of rows to retrieve the first time\nthe statement executes. When you call a\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLStatement.html",children:"SQLStatement"}),"\ninstance's ",(0,s.jsx)(e.code,{children:"execute()"})," method, specify a ",(0,s.jsx)(e.code,{children:"prefetch"})," parameter value and only\nthat many rows are retrieved:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'var stmt:SQLStatement = new SQLStatement();\nstmt.sqlConnection = conn;\n\nstmt.text = "SELECT ...";\n\nstmt.addEventListener(SQLEvent.RESULT, selectResult);\n\nstmt.execute(20); // only the first 20 rows (or fewer) are returned\n'})}),"\n",(0,s.jsxs)(e.p,{children:["The statement dispatches the ",(0,s.jsx)(e.code,{children:"result"})," event, indicating that the first set of\nresult rows is available. The resulting\n",(0,s.jsx)(e.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLResult.html",children:"SQLResult"}),"\ninstance's ",(0,s.jsx)(e.code,{children:"data"})," property contains the rows of data, and its ",(0,s.jsx)(e.code,{children:"complete"}),"\nproperty indicates whether there are additional result rows to retrieve. To\nretrieve additional result rows, call the SQLStatement instance's ",(0,s.jsx)(e.code,{children:"next()"}),"\nmethod. Like the ",(0,s.jsx)(e.code,{children:"execute()"})," method, the ",(0,s.jsx)(e.code,{children:"next()"})," method's first parameter is\nused to indicate how many rows to retrieve the next time the result event is\ndispatched."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"function selectResult(event:SQLEvent):void\n{\n\tvar result:SQLResult = stmt.getResult();\n\tif (result.data != null)\n\t{\n\t\t// ... loop through the rows or perform other processing ...\n\n\t\tif (!result.complete)\n\t\t{\n\t\t\tstmt.next(20); // retrieve the next 20 rows\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstmt.removeEventListener(SQLEvent.RESULT, selectResult);\n\t\t}\n\t}\n}\n"})}),"\n",(0,s.jsxs)(e.p,{children:["The SQLStatement dispatches a ",(0,s.jsx)(e.code,{children:"result"})," event each time the ",(0,s.jsx)(e.code,{children:"next()"})," method\nreturns a subsequent set of result rows. Consequently, the same listener\nfunction can be used to continue processing results (from ",(0,s.jsx)(e.code,{children:"next()"})," calls) until\nall the rows are retrieved."]}),"\n",(0,s.jsxs)(e.p,{children:["For more information, see the descriptions for the ",(0,s.jsx)(e.code,{children:"SQLStatement.execute()"}),"\nmethod (the ",(0,s.jsx)(e.code,{children:"prefetch"})," parameter description) and the ",(0,s.jsx)(e.code,{children:"SQLStatement.next()"}),"\nmethod."]})]})}function m(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(d,{...t})}):d(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>i,x:()=>o});var a=n(96540);const s={},r=a.createContext(s);function i(t){const e=a.useContext(r);return a.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function o(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:i(t.components),a.createElement(r.Provider,{value:e},t.children)}}}]);