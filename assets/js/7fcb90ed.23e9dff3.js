"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[20011],{11353:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests","title":"XML-RPC web service requests","description":"An XML-RPC web service takes its call parameters as an XML document rather than","source":"@site/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests.md","sourceDirName":"development/networking-and-communication/http-communications/web-service-requests","slug":"/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests","permalink":"/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/http-communications/web-service-requests/xml-rpc-web-service-requests.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"REST-style web service requests","permalink":"/docs/development/networking-and-communication/http-communications/web-service-requests/rest-style-web-service-requests"},"next":{"title":"SOAP web service requests","permalink":"/docs/development/networking-and-communication/http-communications/web-service-requests/soap-web-service-requests"}}');var s=n(74848),a=n(28453);const o={sidebar_position:2},i="XML-RPC web service requests",m={},d=[];function c(t){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"xml-rpc-web-service-requests",children:"XML-RPC web service requests"})}),"\n",(0,s.jsxs)(e.p,{children:["An XML-RPC web service takes its call parameters as an XML document rather than\nas a set of URL variables. To conduct a transaction with an XML-RPC web service,\ncreate a properly formatted XML message and send it to the web service using the\nHTTP ",(0,s.jsx)(e.code,{children:"POST"})," method. In addition, you should set the ",(0,s.jsx)(e.code,{children:"Content-Type"})," header for\nthe request so that the server treats the request data as XML."]}),"\n",(0,s.jsx)(e.p,{children:"The following example illustrates how to use the same web service call shown in\nthe REST example, but this time as an XML-RPC service:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'import flash.events.Event;\nimport flash.events.ErrorEvent;\nimport flash.events.IOErrorEvent;\nimport flash.events.SecurityErrorEvent;\nimport flash.net.URLLoader;\nimport flash.net.URLRequest;\nimport flash.net.URLRequestMethod;\nimport flash.net.URLVariables;\npublic function xmlRPCRequest():void\n{\n\t//Create the XML-RPC document\n\tvar xmlRPC:XML = <methodCall>\n\t\t\t\t\t\t\t\t\t<methodName></methodName>\n\t\t\t\t\t\t\t\t\t<params>\n\t\t\t\t\t\t\t\t\t\t<param>\n\t\t\t\t\t\t\t\t\t\t\t<value>\n\t\t\t\t\t\t\t\t\t\t\t\t<struct/>\n\t\t\t\t\t\t\t\t\t\t\t</value>\n\t\t\t\t\t\t\t\t\t\t</param>\n\t\t\t\t\t\t\t\t\t</params>\n\t\t\t\t\t\t\t\t</methodCall>;\n\n\txmlRPC.methodName = "test.echo";\n\n\t//Add the method parameters\n\tvar parameters:Object = new Object();\n\tparameters.api_key = "123456ABC";\n\tparameters.message = "Able was I, ere I saw Elba.";\n\n\tfor( var propertyName:String in parameters )\n\t{\n\t\txmlRPC..struct.member[xmlRPC..struct.member.length + 1] =\n\t\t\t<member>\n\t\t\t\t<name>{propertyName}</name>\n\t\t\t\t<value>\n\t\t\t\t\t<string>{parameters[propertyName]}</string>\n\t\t\t\t</value>\n\t\t\t</member>;\n\t}\n\n\t//Create the HTTP request object\n\tvar request:URLRequest = new URLRequest( "http://service.example.com/xml-rpc/" );\n\trequest.method = URLRequestMethod.POST;\n\trequest.cacheResponse = false;\n\trequest.requestHeaders.push(new URLRequestHeader("Content-Type", "application/xml"));\n\trequest.data = xmlRPC;\n\n\t//Initiate the request\n\trequestor = new URLLoader();\n\trequestor.dataFormat = URLLoaderDataFormat.TEXT;\n\trequestor.addEventListener( Event.COMPLETE, xmlRPCRequestComplete );\n\trequestor.addEventListener( IOErrorEvent.IO_ERROR, xmlRPCRequestError );\n\trequestor.addEventListener( SecurityErrorEvent.SECURITY_ERROR, xmlRPCRequestError );\n\trequestor.load( request );\n}\n\nprivate function xmlRPCRequestComplete( event:Event ):void\n{\n\ttrace( XML(event.target.data).toXMLString() );\n}\n\nprivate function xmlRPCRequestError( error:ErrorEvent ):void\n{\n\ttrace( "An error occurred: " + error );\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"WebKit in AIR doesn't support E4X syntax, so the method used to create the XML\ndocument in the previous example does not work in JavaScript code. Instead, you\nmust use the DOM methods to create the XML document or create the document as a\nstring and use the JavaScript DOMParser class to convert the string to XML."}),"\n",(0,s.jsx)(e.p,{children:"The following example uses DOM methods to create an XML-RPC message and an\nXMLHttpRequest to conduct the web service transaction:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:'<html>\n<head>\n\t<title>XML-RPC web service request</title>\n\t<script type="text/javascript">\n\n\t\tfunction makeRequest()\n\t\t{\n\t\t\tvar requestDisplay = document.getElementById( "request" );\n\t\t\tvar resultDisplay  = document.getElementById( "result" );\n\n\t\t\tvar request = {};\n\t\t\trequest.URL = "http://services.example.com/xmlrpc/";\n\t\t\trequest.method = "test.echo";\n\t\t\trequest.HTTPmethod = "POST";\n\t\t\trequest.parameters = {};\n\t\t\trequest.parameters.api_key = "123456ABC";\n\t\t\trequest.parameters.message = "Able was I ere I saw Elba.";\n\t\t\tvar requestMessage = formatXMLRPC( request );\n\n\t\t\txmlhttp = new XMLHttpRequest();\n\t\t\txmlhttp.open( request.HTTPmethod, request.URL, true);\n\t\t\txmlhttp.onreadystatechange = function() {\n\t\t\t\tif (xmlhttp.readyState == 4) {\n\t\t\t\t\tresultDisplay.innerText = xmlhttp.responseText;\n\t\t\t\t}\n\t\t\t}\n\t\t\txmlhttp.send( requestMessage );\n\n\t\t\trequestDisplay.innerText = xmlToString( requestMessage.documentElement );\n\t\t}\n\n\t\t//Formats a request as XML-RPC document\n\t\tfunction formatXMLRPC( request )\n\t\t{\n\t\t\tvar xmldoc = document.implementation.createDocument( "", "", null );\n\t\t\tvar root = xmldoc.createElement( "methodCall" );\n\t\t\txmldoc.appendChild( root );\n\t\t\tvar methodName = xmldoc.createElement( "methodName" );\n\t\t\tvar methodString = xmldoc.createTextNode( request.method );\n\t\t\tmethodName.appendChild( methodString );\n\n\t\t\troot.appendChild( methodName );\n\n\t\t\tvar params = xmldoc.createElement( "params" );\n\t\t\troot.appendChild( params );\n\n\t\t\tvar param = xmldoc.createElement( "param" );\n\t\t\tparams.appendChild( param );\n\t\t\tvar value = xmldoc.createElement( "value" );\n\t\t\tparam.appendChild( value );\n\t\t\tvar struct = xmldoc.createElement( "struct" );\n\t\t\tvalue.appendChild( struct );\n\n\t\t\tfor( var property in request.parameters )\n\t\t\t{\n\t\t\t\tvar member = xmldoc.createElement( "member" );\n\t\t\t\tstruct.appendChild( member );\n\n\t\t\t\tvar name = xmldoc.createElement( "name" );\n\t\t\t\tvar paramName = xmldoc.createTextNode( property );\n\t\t\t\tname.appendChild( paramName )\n\t\t\t\tmember.appendChild( name );\n\n\t\t\t\tvar value = xmldoc.createElement( "value" );\n\t\t\t\tvar type = xmldoc.createElement( "string" );\n\t\t\t\tvalue.appendChild( type );\n\t\t\t\tvar paramValue = xmldoc.createTextNode( request.parameters[property] );\n\t\t\t\ttype.appendChild( paramValue )\n\t\t\t\tmember.appendChild( value );\n\t\t\t}\n\t\t\treturn xmldoc;\n\t\t}\n\n\t\t//Returns a string representation of an XML node\n\t\tfunction xmlToString( rootNode, indent )\n\t\t{\n\t\t\tif( indent == null ) indent = "";\n\t\t\tvar result = indent + "<" + rootNode.tagName + ">\\n";\n\t\t\tfor( var i = 0; i < rootNode.childNodes.length; i++)\n\t\t\t{\n\t\t\t\tif(rootNode.childNodes.item( i ).nodeType == Node.TEXT_NODE )\n\t\t\t\t{\n\t\t\t\t\tresult += indent + "    " + rootNode.childNodes.item( i ).textContent + "\\n";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( rootNode.childElementCount > 0 )\n\t\t\t{\n\t\t\t\tresult += xmlToString( rootNode.firstElementChild, indent + "    " );\n\t\t\t}\n\t\t\tif( rootNode.nextElementSibling )\n\t\t\t{\n\t\t\t\tresult += indent + "</" + rootNode.tagName + ">\\n";\n\t\t\t\tresult += xmlToString( rootNode.nextElementSibling, indent );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tresult += indent +"</" + rootNode.tagName + ">\\n";\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t<\/script>\n</head>\n<body onload="makeRequest()">\n\t<h1>Request:</h1>\n\t<pre id="request"></pre>\n\t<h1>Result:</h1>\n\t<pre id="result"></pre>\n</body>\n</html>\n'})})]})}function l(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(c,{...t})}):c(t)}},28453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var r=n(96540);const s={},a=r.createContext(s);function o(t){const e=r.useContext(a);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:o(t.components),r.createElement(a.Provider,{value:e},t.children)}}}]);