"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[30956],{6410:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects","title":"Assembling and transforming XML objects","description":"Use the prependChild() method or the appendChild() method to add a property to the beginning or end of an XML object\u2019s list of properties, as the following example shows:","source":"@site/docs/development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects.md","sourceDirName":"development/core-actionscript-classes/working-with-xml","slug":"/development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects","permalink":"/docs/development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-xml/assembling-and-transforming-xml-objects.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Assembling and transforming XML objects","sidebar_position":7},"sidebar":"mainSidebar","previous":{"title":"Initializing XML variables","permalink":"/docs/development/core-actionscript-classes/working-with-xml/initialising-xml-variables"},"next":{"title":"Traversing XML structures","permalink":"/docs/development/core-actionscript-classes/working-with-xml/traversing-xml-structures"}}');var i=s(74848),r=s(28453);const o={title:"Assembling and transforming XML objects",sidebar_position:7},a=void 0,c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"prependChild()"})," method or the ",(0,i.jsx)(n.code,{children:"appendChild()"})," method to add a property to the beginning or end of an ",(0,i.jsx)(n.code,{children:"XML"})," object\u2019s list of properties, as the following example shows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-actionscript",children:"var x1:XML = <p>Line 1</p>\nvar x2:XML = <p>Line 2</p>\nvar x:XML = <body></body>\nx = x.appendChild(x1);\nx = x.appendChild(x2);\nx = x.prependChild(<p>Line 0</p>);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["// x == ",(0,i.jsxs)("body",{children:[(0,i.jsx)("p",{children:"Line 0"}),(0,i.jsx)("p",{children:"Line 1"}),(0,i.jsx)("p",{children:"Line 2"})]})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{})}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.code,{children:"insertChildBefore()"})," method or the ",(0,i.jsx)(n.code,{children:"insertChildAfter()"})," method to add a property before or after a specified property, as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-actionscript",children:"var x:XML =\n    <body>\n        <p>Paragraph 1</p>\n        <p>Paragraph 2</p>\n    </body>\n\nvar newNode:XML = <p>Paragraph 1.5</p>\nx = x.insertChildAfter(x.p[0], newNode)\nx = x.insertChildBefore(x.p[2], <p>Paragraph 1.75</p>)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["As the following example shows, you can also use curly brace operators ",(0,i.jsx)(n.code,{children:"{"})," and ",(0,i.jsx)(n.code,{children:"}"})," to pass data by reference (from other variables) when constructing XML objects:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-actionscript",children:'var ids:Array = [121, 122, 123];\nvar names:Array = [["Murphy","Pat"], ["Thibaut","Jean"], ["Smith","Vijay"]]\nvar x:XML = new XML("<employeeList></employeeList>");\n\nfor (var i:int = 0; i < 3; i++)\n{\n    var newnode:XML = new XML();\n    newnode =\n        <employee id={ids[i]}>\n            <last>{names[i][0]}</last>\n            <first>{names[i][1]}</first>\n        </employee>;\n\n    x = x.appendChild(newnode)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can assign properties and attributes to an XML object by using the = operator, as in the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-actionscript",children:'var x:XML =\n    <employee>\n        <lastname>Smith</lastname>\n    </employee>\nx.firstname = "Jean";\nx.@id = "239";\n'})}),"\n",(0,i.jsx)(n.p,{children:"This sets the XML object x to the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<employee id="239">\n<lastname>Smith</lastname>\n<firstname>Jean</firstname>\n</employee>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"+"})," and ",(0,i.jsx)(n.code,{children:"+="})," operators to concatenate XMLList objects:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-actionscript",children:"var x1:XML = <a>test1</a>\nvar x2:XML = <b>test2</b>\nvar xList:XMLList = x1 + x2;\nxList += <c>test3</c>\n"})}),"\n",(0,i.jsx)(n.p,{children:"This sets the XMLList object xList to the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:"<a>test1</a>\n<b>test2</b>\n<c>test3</c>\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);