"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[95344],{5475:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class","title":"DRM-related members and events of the NetStream class","description":"The NetStream class provides a one-way streaming connection between Flash Player","source":"@site/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class.md","sourceDirName":"development/rich-media-content/using-digital-rights-management","slug":"/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class","permalink":"/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/using-digital-rights-management/drm-related-members-and-events-of-the-netstream-class.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Understanding the protected content workflow","permalink":"/docs/development/rich-media-content/using-digital-rights-management/understanding-the-protected-content-workflow"},"next":{"title":"Using the DRMStatusEvent class","permalink":"/docs/development/rich-media-content/using-digital-rights-management/using-the-drmstatusevent-class"}}');var s=n(74848),r=n(28453);const i={sidebar_position:2},d="DRM-related members and events of the NetStream class",c={},o=[];function h(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"drm-related-members-and-events-of-the-netstream-class",children:"DRM-related members and events of the NetStream class"})}),"\n",(0,s.jsx)(t.p,{children:"The NetStream class provides a one-way streaming connection between Flash Player\nor an AIR application, and either Flash Media Server or the local file system.\n(The NetStream class also supports progressive download.) A NetStream object is\na channel within a NetConnection object. The NetStream class dispatches four\nDRM-related events:"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Event"})}),(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Description"})})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"drmAuthenticate"}),"\n",(0,s.jsx)("p",{children:"(AIR only)"})]}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"Defined in\nthe DRMAuthenticateEvent class. This event is dispatched when a\nNetStream object tries to play protected content that requires a user\ncredential for authentication before playback."}),"\n",(0,s.jsx)("p",{children:"The properties of this event include header, usernamePrompt,\npasswordPrompt, and urlPrompt properties that can be used in obtaining\nand setting the user's credentials. This event occurs repeatedly until\nthe NetStream object receives valid user credentials."})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"drmError"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"Defined in\nthe DRMErrorEvent class and dispatched when a NetStream object tries to\nplay protected content and encounters a DRM-related error. For example,\nDRM error event object is dispatched when the user authorization fails.\nThis error could occur because the user has not purchased the rights to\nview the content. It could also occur because the content provider does\nnot support the viewing application."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"drmStatus"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"Defined in\nthe DRMStatusEvent class. This event is dispatched when the protected\ncontent begins playing (when the user is authenticated and authorized to\nplay the content). The DRMStatusEvent object contains information\nrelated to the voucher. Voucher information includes whether the content\ncan be made available offline or when the voucher expires and the\ncontent can no longer be viewed."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"status"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:'Defined in\nevents.StatusEvent and only dispatched when the application attempts to\nplay protected content, by invoking the NetStream.play() method. The\nvalue of the status code property is "DRM.encryptedFLV".'})})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"The NetStream class includes the following DRM-specific methods, for use in AIR\nonly:"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Method"})}),(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Description"})})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"resetDRMVouchers()"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"Deletes all\nthe locally cached digital rights management (DRM) voucher data. The\napplication must download the vouchers again for the user to be able to\naccess the encrypted content."}),"\n",(0,s.jsx)("p",{children:"For example, the following code removes all vouchers from the\ncache:"}),"\n",(0,s.jsx)("p",{children:"NetStream.resetDRMVouchers();"})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"setDRMAuthenticationCredentials()"})}),(0,s.jsx)("td",{children:(0,s.jsxs)("p",{children:["Passes a set\nof authentication credentials, namely user name, password, and\nauthentication type, to the NetStream object for authentication. Valid\nauthentication types are ",(0,s.jsx)("samp",{children:'"drm"'})," and ",(0,s.jsx)("samp",{children:'"proxy"'}),".\nWith ",(0,s.jsx)("samp",{children:'"drm"'})," authentication type, the credentials provided\nare authenticated against Adobe Access. With ",(0,s.jsx)("samp",{children:'"proxy"'}),"\nauthentication type, the credentials authenticate against the proxy\nserver and must match the credentials required by the proxy server. For\nexample, an enterprise can require the application to authenticate\nagainst a proxy server before the user can access the Internet. The\nproxy option allows this type of authentication. Unless anonymous\nauthentication is used, after the proxy authentication, the user must\nstill authenticate against Adobe Access to obtain the voucher and play\nthe content. You can use ",(0,s.jsx)("samp",{children:"setDRMAuthenticationCredentials()"}),'\na second time, with " ',(0,s.jsx)("samp",{children:"drm"}),' " option, to authenticate against\nAdobe Access.']})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"preloadEmbeddedMetadata()"})}),(0,s.jsx)("td",{children:(0,s.jsxs)("p",{children:["Parses a\nlocal media file for embedded metadata. When DRM-related metadata is\nfound, AIR calls the ",(0,s.jsx)("samp",{children:"onDRMContentData()"})," callback\nfunction."]})})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["In addition, in AIR, a NetStream object calls the ",(0,s.jsx)(t.code,{children:"onDRMContentData()"})," and\n",(0,s.jsx)(t.code,{children:"onPlayStatus()"})," callback functions as a result of a call to the\n",(0,s.jsx)(t.code,{children:"preloadEmbeddedMetaData()"})," method. The ",(0,s.jsx)(t.code,{children:"onDRMContentData()"})," function is called\nwhen DRM metadata is encountered in a media file. The ",(0,s.jsx)(t.code,{children:"onPlayStatus()"})," function\nis called when the file has been parsed. The ",(0,s.jsx)(t.code,{children:"onDRMContentData()"})," and\n",(0,s.jsx)(t.code,{children:"onPlayStatus()"})," functions must be defined on the ",(0,s.jsx)(t.code,{children:"client"})," object assigned to\nthe NetStream instance. If you use the same NetStream object to preload vouchers\nand play content, wait for the ",(0,s.jsx)(t.code,{children:"onPlayStatus()"})," call generated by\n",(0,s.jsx)(t.code,{children:"preloadEmbeddedMetaData()"})," before starting playback."]}),"\n",(0,s.jsx)(t.p,{children:'In the following code for AIR, user name ("administrator"), password\n("password") and the "drm" authentication type are set for authenticating the\nuser. The setDRMAuthenticationCredentials() method must provide credentials that\nmatch credentials known and accepted by the content provider. These credentials\nare the same user credentials that permit the user to view the content. The code\nfor playing the video and making sure that a successful connection to the video\nstream has been made is not included here.'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"var connection:NetConnection = new NetConnection();\nconnection.connect(null);\n\nvar videoStream:NetStream = new NetStream(connection);\n\nvideoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE,\n"})}),"\n",(0,s.jsx)(t.p,{children:"drmAuthenticateEventHandler)"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void\n{\n\tvideoStream.setDRMAuthenticationCredentials("administrator", "password", "drm");\n}\n'})})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>d});var a=n(96540);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);