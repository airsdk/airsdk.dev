"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[27740],{28453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>a});var o=n(96540);const r={},i=o.createContext(r);function c(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),o.createElement(i.Provider,{value:t},e.children)}},95998:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>s});const o=JSON.parse('{"id":"development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag","title":"Touch and drag","description":"Two methods were added to","source":"@site/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag.md","sourceDirName":"development/user-interaction/touch-multitouch-and-gesture-input","slug":"/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-and-drag.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"Touch event handling","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-event-handling"},"next":{"title":"Gesture event handling","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/gesture-event-handling"}}');var r=n(74848),i=n(28453);const c={sidebar_position:4},a="Touch and drag",d={},s=[];function u(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"touch-and-drag",children:"Touch and drag"})}),"\n",(0,r.jsxs)(t.p,{children:["Two methods were added to\n",(0,r.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/Sprite.html",children:"the Sprite class"}),"\nto provide additional support for touch-enabled applications supporting\ntouch-point input: ",(0,r.jsx)(t.code,{children:"Sprite.startTouchDrag()"})," and ",(0,r.jsx)(t.code,{children:"Sprite.stopTouchDrag()"}),". These\nmethods behave the same as ",(0,r.jsx)(t.code,{children:"Sprite.startDrag()"})," and ",(0,r.jsx)(t.code,{children:"Sprite.stopDrag()"})," do for\nmouse events. However, notice the ",(0,r.jsx)(t.code,{children:"Sprite.startTouchDrag()"})," and\n",(0,r.jsx)(t.code,{children:"Sprite.stopTouchDrag()"})," methods both take ",(0,r.jsx)(t.code,{children:"touchPointID"})," values as parameters."]}),"\n",(0,r.jsxs)(t.p,{children:["The runtime assigns the ",(0,r.jsx)(t.code,{children:"touchPointID"})," value to the event object for a touch\nevent. Use this value to respond to a specific touch point in the case the\nenvironment supports multiple, simultaneous, touch points (even if it does not\nhandle gestures). For more information about the ",(0,r.jsx)(t.code,{children:"touchPointID"})," property, see\n",(0,r.jsx)(t.a,{href:"/docs/development/user-interaction/touch-multitouch-and-gesture-input/touch-event-handling#touch-point-id",children:"Touch Point ID"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The following code shows a simple start drag event handler and a stop drag event\nhandler for a touch event. The variable ",(0,r.jsx)(t.code,{children:"bg"})," is a display object that contains\n",(0,r.jsx)(t.code,{children:"mySprite"}),":"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'mySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);\nmySprite.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);\n\nfunction onTouchBegin(e:TouchEvent) {\n\te.target.startTouchDrag(e.touchPointID, false, bg.getRect(this));\n\ttrace("touch begin");\n}\n\nfunction onTouchEnd(e:TouchEvent) {\n\te.target.stopTouchDrag(e.touchPointID);\n\ttrace("touch end");\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"And the following shows a more advanced example combining dragging with touch\nevent phases:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Multitouch.inputMode = MultitouchInputMode.TOUCH_POINT;\nvar mySprite:Sprite = new Sprite();\n\nmySprite.graphics.beginFill(0x336699);\nmySprite.graphics.drawRect(0,0,40,40);\naddChild(mySprite);\n\nmySprite.addEventListener(TouchEvent.TOUCH_BEGIN, onTouchBegin);\nmySprite.addEventListener(TouchEvent.TOUCH_MOVE, onTouchMove);\nmySprite.addEventListener(TouchEvent.TOUCH_END, onTouchEnd);\n\nfunction onTouchBegin(evt:TouchEvent) {\n\tevt.target.startTouchDrag(evt.touchPointID);\n\tevt.target.scaleX *= 1.5;\n\tevt.target.scaleY *= 1.5;\n}\n\nfunction onTouchMove(evt:TouchEvent) {\n\tevt.target.alpha = 0.5;\n}\n\nfunction onTouchEnd(evt:TouchEvent) {\n\tevt.target.stopTouchDrag(evt.touchPointID);\n\tevt.target.width = 40;\n\tevt.target.height = 40;\n\tevt.target.alpha = 1;\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);