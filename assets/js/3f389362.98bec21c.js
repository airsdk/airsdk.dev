"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[94485],{12485:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"development/display/filtering-display-objects/drop-shadow-filter","title":"Drop shadow filter","description":"Drop shadows give the impression that there is a separate light source situated","source":"@site/docs/development/display/filtering-display-objects/drop-shadow-filter.md","sourceDirName":"development/display/filtering-display-objects","slug":"/development/display/filtering-display-objects/drop-shadow-filter","permalink":"/docs/development/display/filtering-display-objects/drop-shadow-filter","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/filtering-display-objects/drop-shadow-filter.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Displacement map filter","permalink":"/docs/development/display/filtering-display-objects/displacement-map-filter"},"next":{"title":"Example: Combining basic filters","permalink":"/docs/development/display/filtering-display-objects/example-combining-basic-filters"}}');var i=o(74848),n=o(28453);const r={},a="Drop shadow filter",d={},l=[];function p(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"drop-shadow-filter",children:"Drop shadow filter"})}),"\n",(0,i.jsx)(t.p,{children:"Drop shadows give the impression that there is a separate light source situated\nabove a target object. The position and intensity of this light source can be\nmodified to produce a variety of different drop shadow effects."}),"\n",(0,i.jsx)(t.p,{children:"The DropShadowFilter class uses an algorithm that is similar to the blur\nfilter's algorithm. The main difference is that the drop shadow filter has a few\nmore properties that you can modify to simulate different light-source\nattributes (such as alpha, color, offset and brightness)."}),"\n",(0,i.jsx)(t.p,{children:"The drop shadow filter also allows you to apply custom transformation options on\nthe style of the drop shadow, including inner or outer shadow and knockout (also\nknown as cutout) mode."}),"\n",(0,i.jsx)(t.p,{children:"The following code creates a square box sprite and applies a drop shadow filter\nto it:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"import flash.display.Sprite;\nimport flash.filters.DropShadowFilter;\n\n// Draw a box.\nvar boxShadow:Sprite = new Sprite();\nboxShadow.graphics.lineStyle(1);\nboxShadow.graphics.beginFill(0xFF3300);\nboxShadow.graphics.drawRect(0, 0, 100, 100);\nboxShadow.graphics.endFill();\naddChild(boxShadow);\n\n// Apply the drop shadow filter to the box.\nvar shadow:DropShadowFilter = new DropShadowFilter();\nshadow.distance = 10;\nshadow.angle = 25;\n\n// You can also set other properties, such as the shadow color,\n// alpha, amount of blur, strength, quality, and options for\n// inner shadows and knockout effects.\n\nboxShadow.filters = [shadow];\n"})})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>a});var s=o(96540);const i={},n=s.createContext(i);function r(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);