"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[15489],{28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>s});var r=n(96540);const a={},i=r.createContext(a);function d(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),r.createElement(i.Provider,{value:t},e.children)}},43227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"development/user-interaction/copy-and-paste/clipboard-data-formats","title":"Clipboard data formats","description":"Clipboard formats describe the data placed in a Clipboard object. Flash Player","source":"@site/docs/development/user-interaction/copy-and-paste/clipboard-data-formats.md","sourceDirName":"development/user-interaction/copy-and-paste","slug":"/development/user-interaction/copy-and-paste/clipboard-data-formats","permalink":"/docs/development/user-interaction/copy-and-paste/clipboard-data-formats","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/copy-and-paste/clipboard-data-formats.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"HTML copy and paste in AIR","permalink":"/docs/development/user-interaction/copy-and-paste/html-copy-and-paste-in-air"},"next":{"title":"Drag and drop in AIR","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/"}}');var a=n(74848),i=n(28453);const d={sidebar_position:4},s="Clipboard data formats",o={},l=[{value:"Standard data formats",id:"standard-data-formats",level:2},{value:"Custom data formats",id:"custom-data-formats",level:2},{value:"Transfer modes",id:"transfer-modes",level:3},{value:"Reading and writing custom data formats",id:"reading-and-writing-custom-data-formats",level:3},{value:"Deferred rendering",id:"deferred-rendering",level:2},{value:"Pasting text using a deferred rendering function",id:"pasting-text-using-a-deferred-rendering-function",level:3},{value:"Flash example",id:"flash-example",level:4},{value:"Flex example",id:"flex-example",level:4}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"clipboard-data-formats",children:"Clipboard data formats"})}),"\n",(0,a.jsx)(t.p,{children:"Clipboard formats describe the data placed in a Clipboard object. Flash Player\nor AIR automatically translates the standard data formats between ActionScript\ndata types and system clipboard formats. In addition, application objects can be\ntransferred within and between ActionScript-based applications using\napplication-defined formats."}),"\n",(0,a.jsx)(t.p,{children:"A Clipboard object can contain representations of the same information in\ndifferent formats. For example, a Clipboard object representing a Sprite could\ninclude a reference format for use within the same application, a serialized\nformat for use by another application running in Flash Player or AIR, a bitmap\nformat for use by an image editor, and a file list format, perhaps with deferred\nrendering to encode a PNG file, for copying or dragging a representation of the\nSprite to the file system."}),"\n",(0,a.jsx)(t.h2,{id:"standard-data-formats",children:"Standard data formats"}),"\n",(0,a.jsx)(t.p,{children:"The constants defining the standard format names are provided in the\nClipboardFormats class:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Constant"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"TEXT_FORMAT"}),(0,a.jsx)(t.td,{children:"Text-format data is translated to and from the ActionScript String class."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"HTML_FORMAT"}),(0,a.jsx)(t.td,{children:"Text with HTML markup."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"RICH_TEXT_FORMAT"}),(0,a.jsx)(t.td,{children:"Rich-text-format data is translated to and from the ActionScript ByteArray class. The RTF markup is not interpreted or translated in any way."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"BITMAP_FORMAT"}),(0,a.jsx)(t.td,{children:"(AIR only) Bitmap-format data is translated to and from the ActionScript BitmapData class."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"FILE_LIST_FORMAT"}),(0,a.jsx)(t.td,{children:"(AIR only) File-list-format data is translated to and from an array of ActionScript File objects."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"URL_FORMAT"}),(0,a.jsx)(t.td,{children:"(AIR only) URL-format data is translated to and from the ActionScript String class."})]})]})]}),"\n",(0,a.jsxs)(t.p,{children:["When copying and pasting data in response to a ",(0,a.jsx)(t.code,{children:"copy"}),", ",(0,a.jsx)(t.code,{children:"cut"}),", or ",(0,a.jsx)(t.code,{children:"paste"})," event\nin HTML content hosted in an AIR application, MIME types must be used instead of\nthe ClipboardFormat strings. The valid data MIME types are:"]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"MIME type"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Text"}),(0,a.jsx)(t.td,{children:'"text/plain"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"URL"}),(0,a.jsx)(t.td,{children:'"text/uri-list"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Bitmap"}),(0,a.jsx)(t.td,{children:'"image/x-vnd.adobe.air.bitmap"'})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"File list"}),(0,a.jsx)(t.td,{children:'"application/x-vnd.adobe.air.file-list"'})]})]})]}),"\n",(0,a.jsxs)(t.p,{children:["Note: Rich text format data is not available from the ",(0,a.jsx)(t.code,{children:"clipboardData"})," property\nof the event object dispatched as a result of a ",(0,a.jsx)(t.code,{children:"paste"})," event within HTML\ncontent."]}),"\n",(0,a.jsx)(t.h2,{id:"custom-data-formats",children:"Custom data formats"}),"\n",(0,a.jsx)(t.p,{children:"You can use application-defined custom formats to transfer objects as references\nor as serialized copies. References are valid only within the same application.\nSerialized objects can be transferred between applications, but can be used only\nwith objects that remain valid when serialized and deserialized. Objects can\nusually be serialized if their properties are either simple types or\nserializable objects."}),"\n",(0,a.jsxs)(t.p,{children:["To add a serialized object to a Clipboard object, set the ",(0,a.jsx)(t.em,{children:"serializable"}),"\nparameter to ",(0,a.jsx)(t.code,{children:"true"})," when calling the ",(0,a.jsx)(t.code,{children:"Clipboard.setData()"})," method. The format\nname can be one of the standard formats or an arbitrary string defined by your\napplication."]}),"\n",(0,a.jsx)(t.h3,{id:"transfer-modes",children:"Transfer modes"}),"\n",(0,a.jsx)(t.p,{children:"When an object is written to the clipboard using a custom data format, the\nobject data can be read from the clipboard either as a reference or as a\nserialized copy of the original object. There are four transfer modes that\ndetermine whether objects are transferred as references or as serialized copies:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Transfer mode"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"ClipboardTransferModes.ORIGINAL_ONLY"}),(0,a.jsx)(t.td,{children:"Only a reference is returned. If no reference is available, a null value is returned."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"ClipboardTransferModes.ORIGINAL_PREFFERED"}),(0,a.jsx)(t.td,{children:"A reference is returned, if available. Otherwise a serialized copy is returned."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"ClipboardTransferModes.CLONE_ONLY"}),(0,a.jsx)(t.td,{children:"Only a serialized copy is returned. If no serialized copy is available, a null value is returned."})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"ClipboardTransferModes.CLONE_PREFFERED"}),(0,a.jsx)(t.td,{children:"A serialized copy is returned, if available. Otherwise a reference is returned."})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"reading-and-writing-custom-data-formats",children:"Reading and writing custom data formats"}),"\n",(0,a.jsxs)(t.p,{children:["When writing an object to the clipboard, you can use any string that does not\nbegin with the reserved prefixes ",(0,a.jsx)(t.code,{children:"air:"})," or ",(0,a.jsx)(t.code,{children:"flash:"})," for the ",(0,a.jsx)(t.em,{children:"format"})," parameter.\nUse the same string as the format to read the object. The following examples\nillustrate how to read and write objects to the clipboard:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'public function createClipboardObject(object:Object):Clipboard{\n\tvar transfer:Clipboard = Clipboard.generalClipboard;\n\ttransfer.setData("object", object, true);\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["To extract a serialized object from the clipboard object (after a drop or paste\noperation), use the same format name and the ",(0,a.jsx)(t.code,{children:"CLONE_ONLY"})," or ",(0,a.jsx)(t.code,{children:"CLONE_PREFFERED"}),"\ntransfer modes."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'var transfer:Object = clipboard.getData("object", ClipboardTransferMode.CLONE_ONLY);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["A reference is always added to the Clipboard object. To extract the reference\nfrom the clipboard object (after a drop or paste operation), instead of the\nserialized copy, use the ",(0,a.jsx)(t.code,{children:"ORIGINAL_ONLY"})," or ",(0,a.jsx)(t.code,{children:"ORIGINAL_PREFFERED"})," transfer modes:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'var transferredObject:Object =\nclipboard.getData("object", ClipboardTransferMode.ORIGINAL_ONLY);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["References are valid only if the Clipboard object originates from the current\napplication. Use the ",(0,a.jsx)(t.code,{children:"ORIGINAL_PREFFERED"})," transfer mode to access the reference\nwhen it is available, and the serialized clone when the reference is not\navailable."]}),"\n",(0,a.jsx)(t.h2,{id:"deferred-rendering",children:"Deferred rendering"}),"\n",(0,a.jsx)(t.p,{children:"If creating a data format is computationally expensive, you can use deferred\nrendering by supplying a function that supplies the data on demand. The function\nis called only if a receiver of the drop or paste operation requests data in the\ndeferred format."}),"\n",(0,a.jsxs)(t.p,{children:["The rendering function is added to a Clipboard object using the\n",(0,a.jsx)(t.code,{children:"setDataHandler()"})," method. The function must return the data in the appropriate\nformat. For example, if you called\n",(0,a.jsx)(t.code,{children:"setDataHandler(ClipboardFormat.TEXT_FORMAT, writeText)"}),", then the ",(0,a.jsx)(t.code,{children:"writeText()"}),"\nfunction must return a string."]}),"\n",(0,a.jsxs)(t.p,{children:["If a data format of the same type is added to a Clipboard object with the\n",(0,a.jsx)(t.code,{children:"setData()"})," method, that data takes precedence over the deferred version (the\nrendering function is never called). The rendering function may or may not be\ncalled again if the same clipboard data is accessed a second time."]}),"\n",(0,a.jsx)(t.p,{children:"Note: On Mac OS X, deferred rendering works only with custom data formats. With\nstandard data formats, the rendering function is called immediately."}),"\n",(0,a.jsx)(t.h3,{id:"pasting-text-using-a-deferred-rendering-function",children:"Pasting text using a deferred rendering function"}),"\n",(0,a.jsx)(t.p,{children:"The following example illustrates how to implement a deferred rendering\nfunction."}),"\n",(0,a.jsxs)(t.p,{children:["When the user presses the Copy button, the application clears the system\nclipboard to ensure that no data is left over from previous clipboard\noperations. The ",(0,a.jsx)(t.code,{children:"setDataHandler()"})," method then sets the ",(0,a.jsx)(t.code,{children:"renderData()"})," function\nas the clipboard renderer."]}),"\n",(0,a.jsxs)(t.p,{children:["When the user selects the Paste command from the context menu of the destination\ntext field, the application accesses the clipboard and sets the destination\ntext. Since the text data format on the clipboard has been set with a function\nrather than a string, the clipboard calls the ",(0,a.jsx)(t.code,{children:"renderData()"})," function. The\n",(0,a.jsx)(t.code,{children:"renderData()"})," function returns the text in the source text, which is then\nassigned to the destination text."]}),"\n",(0,a.jsx)(t.p,{children:"Notice that if you edit the source text before pressing the Paste button, the\nedit will be reflected in the pasted text, even when the edit occurs after the\ncopy button was pressed. This is because the rendering function doesn't copy the\nsource text until the paste button is pressed. (When using deferred rendering in\na real application, you might want to store or protect the source data in some\nway to prevent this problem.)"}),"\n",(0,a.jsx)(t.h4,{id:"flash-example",children:"Flash example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'package {\n\timport flash.desktop.Clipboard;\n\timport flash.desktop.ClipboardFormats;\n\timport flash.desktop.ClipboardTransferMode;\n\timport flash.display.Sprite;\n\timport flash.text.TextField;\n\timport flash.text.TextFormat;\n\timport flash.text.TextFieldType;\n\timport flash.events.MouseEvent;\n\timport flash.events.Event;\n\tpublic class DeferredRenderingExample extends Sprite\n\t{\n\t\tprivate var sourceTextField:TextField;\n\t\tprivate var destination:TextField;\n\t\tprivate var copyText:TextField;\n\t\tpublic function DeferredRenderingExample():void\n\t\t{\n\t\t\tsourceTextField = createTextField(10, 10, 380, 90);\n\t\t\tsourceTextField.text = "Neque porro quisquam est qui dolorem "\n\t\t\t\t+ "ipsum quia dolor sit amet, consectetur, adipisci velit.";\n\n\t\t\tcopyText = createTextField(10, 110, 35, 20);\n\t\t\tcopyText.htmlText = "<a href=\'#\'>Copy</a>";\n\t\t\tcopyText.addEventListener(MouseEvent.CLICK, onCopy);\n\n\t\t\tdestination = createTextField(10, 145, 380, 90);\n\t\t\tdestination.addEventListener(Event.PASTE, onPaste);\n\t\t}\n\t\tprivate function createTextField(x:Number, y:Number, width:Number,\n\t\t\t\t\t\theight:Number):TextField\n\t\t{\n\t\t\tvar newTxt:TextField = new TextField();\n\t\t\tnewTxt.x = x;\n\t\t\tnewTxt.y = y;\n\t\t\tnewTxt.height = height;\n\t\t\tnewTxt.width = width;\n\t\t\tnewTxt.border = true;\n\t\t\tnewTxt.multiline = true;\n\t\t\tnewTxt.wordWrap = true;\n\t\t\tnewTxt.type = TextFieldType.INPUT;\n\t\t\taddChild(newTxt);\n\t\t\treturn newTxt;\n\t\t}\n\t\tpublic function onCopy(event:MouseEvent):void\n\t\t{\n\t\t\tClipboard.generalClipboard.clear();\n\t\t\tClipboard.generalClipboard.setDataHandler(ClipboardFormats.TEXT_FORMAT,\n\t\t\t\t\t\t\trenderData);\n\t\t}\n\t\tpublic function onPaste(event:Event):void\n\t\t{\n\t\t\tsourceTextField.text =\n\t\t\tClipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT).toString;\n\t\t}\n\t\tpublic function renderData():String\n\t\t{\n\t\t\ttrace("Rendering data");\n\t\t\tvar sourceStr:String = sourceTextField.text;\n\t\t\tif (sourceTextField.selectionEndIndex >\n\t\t\t\t\tsourceTextField.selectionBeginIndex)\n\t\t\t{\n\t\t\t\treturn sourceStr.substring(sourceTextField.selectionBeginIndex,\n\t\t\t\t\t\t\t\t\tsourceTextField.selectionEndIndex);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn sourceStr;\n\t\t\t}\n\t\t}\n\t}\n}\n'})}),"\n",(0,a.jsx)(t.h4,{id:"flex-example",children:"Flex example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:'<mx:Application xmlns:mx="https://www.adobe.com/2006/mxml" layout="absolute" width="326" height="330" applicationComplete="init()">\n\t<mx:Script>\n\t<![CDATA[\n\timport flash.desktop.Clipboard;\n\timport flash.desktop.ClipboardFormats;\n\n\tpublic function init():void\n\t{\n\t\tdestination.addEventListener("paste", doPaste);\n\t}\n\n\tpublic function doCopy():void\n\t{\n\t\tClipboard.generalClipboard.clear();\n\t\tClipboard.generalClipboard.setDataHandler(ClipboardFormats.TEXT_FORMAT, renderData);\n\t}\n\tpublic function doPaste(event:Event):void\n\t{\n\t\tdestination.text = Clipboard.generalClipboard.getData(ClipboardFormats.TEXT_FORMAT).toString;\n\t}\n\n\tpublic function renderData():String{\n\t\ttrace("Rendering data");\n\t\treturn source.text;\n\t}\n\t]]>\n\t</mx:Script>\n\t<mx:Label x="10" y="10" text="Source"/>\n\t<mx:TextArea id="source" x="10" y="36" width="300" height="100">\n\t\t<mx:text>Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit.</mx:text>\n\t</mx:TextArea>\n\t<mx:Label x="10" y="181" text="Destination"/>\n\t<mx:TextArea id="destination"  x="12" y="207" width="300" height="100"/>\n\t<mx:Button click="doCopy();" x="91" y="156" label="Copy"/>\n</mx:Application>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);