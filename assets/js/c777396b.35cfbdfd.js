"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[3863],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},71816:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status","title":"Responding to error events and status","description":"One of the most noticeable improvements to error handling in ActionScript 3.0 is","source":"@site/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status.md","sourceDirName":"development/core-actionscript-classes/handling-errors","slug":"/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status","permalink":"/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"mainSidebar","previous":{"title":"Creating custom error classes","permalink":"/docs/development/core-actionscript-classes/handling-errors/creating-custom-error-classes"},"next":{"title":"Comparing the Error classes","permalink":"/docs/development/core-actionscript-classes/handling-errors/comparing-the-error-classes"}}');var o=r(74848),s=r(28453);const i={sidebar_position:7},a="Responding to error events and status",c={},d=[{value:"Working with error events",id:"working-with-error-events",level:2},{value:"Working with status change events",id:"working-with-status-change-events",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"responding-to-error-events-and-status",children:"Responding to error events and status"})}),"\n",(0,o.jsxs)(n.p,{children:["One of the most noticeable improvements to error handling in ActionScript 3.0 is\nthe support for error event handling for responding to asynchronous errors while\nan application is running. (For a definition of asynchronous errors, see\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/handling-errors/types-of-errors",children:"Types of errors"}),".)"]}),"\n",(0,o.jsxs)(n.p,{children:["You can create event listeners and event handlers to respond to the error\nevents. Many classes dispatch error events the same way they dispatch other\nevents. For example, an instance of the XMLSocket class normally dispatches\nthree types of events: ",(0,o.jsx)(n.code,{children:"Event.CLOSE"}),", ",(0,o.jsx)(n.code,{children:"Event.CONNECT"}),", and ",(0,o.jsx)(n.code,{children:"DataEvent.DATA"}),".\nHowever, when a problem occurs, the XMLSocket class can dispatch the\n",(0,o.jsx)(n.code,{children:"IOErrorEvent.IOError"})," or the ",(0,o.jsx)(n.code,{children:"SecurityErrorEvent.SECURITY_ERROR"}),". For more\ninformation about event listeners and event handlers, see\n",(0,o.jsx)(n.a,{href:"/docs/development/core-actionscript-classes/handling-events/",children:"Handling events"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Error events fit into one of two categories:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Error events that extend the ErrorEvent class"}),"\n",(0,o.jsx)(n.p,{children:"The flash.events.ErrorEvent class contains the properties and methods for\nmanaging errors related to networking and communication operations in a\nrunning application. The AsyncErrorEvent, IOErrorEvent, and SecurityErrorEvent\nclasses extend the ErrorEvent class. If you're using the debugger version of a\nFlash runtime, a dialog box informs you at run-time of any error events\nwithout listener functions that the player encounters."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Status-based error events"}),"\n",(0,o.jsxs)(n.p,{children:["The status-based error events are related to the ",(0,o.jsx)(n.code,{children:"netStatus"})," and ",(0,o.jsx)(n.code,{children:"status"}),"\nproperties of the networking and communication classes. If a Flash runtime\nencounters a problem when reading or writing data, the value of the\n",(0,o.jsx)(n.code,{children:"netStatus.info.level"})," or ",(0,o.jsx)(n.code,{children:"status.level"})," properties (depending on the class\nobject you're using) is set to the value ",(0,o.jsx)(n.code,{children:'"error"'}),". You respond to this error\nby checking if the ",(0,o.jsx)(n.code,{children:"level"})," property contains the value ",(0,o.jsx)(n.code,{children:'"error"'})," in your event\nhandler function."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"working-with-error-events",children:"Working with error events"}),"\n",(0,o.jsx)(n.p,{children:"The ErrorEvent class and its subclasses contain error types for handling errors\ndispatched by Flash runtimes as they try to read or write data."}),"\n",(0,o.jsxs)(n.p,{children:["The following example uses both a ",(0,o.jsx)(n.code,{children:"try..catch"}),' statement and error event\nhandlers to display any errors detected while trying to read a local file. You\ncan add more sophisticated handling code to provide a user with options or\notherwise handle the error automatically in the places indicated by the comment\n"your error-handling code here":']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'package\n{\n    import flash.display.Sprite;\n    import flash.errors.IOError;\n    import flash.events.IOErrorEvent;\n    import flash.events.TextEvent;\n    import flash.media.Sound;\n    import flash.media.SoundChannel;\n    import flash.net.URLRequest;\n    import flash.text.TextField;\n    import flash.text.TextFieldAutoSize;\n\n    public class LinkEventExample extends Sprite\n    {\n        private var myMP3:Sound;\n        public function LinkEventExample()\n        {\n            myMP3 = new Sound();\n            var list:TextField = new TextField();\n            list.autoSize = TextFieldAutoSize.LEFT;\n            list.multiline = true;\n            list.htmlText = "<a href=\\"event:track1.mp3\\">Track 1</a><br>";\n            list.htmlText += "<a href=\\"event:track2.mp3\\">Track 2</a><br>";\n            addEventListener(TextEvent.LINK, linkHandler);\n            addChild(list);\n        }\n\n        private function playMP3(mp3:String):void\n        {\n            try\n            {\n                myMP3.load(new URLRequest(mp3));\n                myMP3.play();\n            }\n            catch (err:Error)\n            {\n                trace(err.message);\n                // your error-handling code here\n            }\n            myMP3.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);\n        }\n\n        private function linkHandler(linkEvent:TextEvent):void\n        {\n            playMP3(linkEvent.text);\n            // your error-handling code here\n        }\n\n        private function errorHandler(errorEvent:IOErrorEvent):void\n        {\n            trace(errorEvent.text);\n            // your error-handling code here\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"working-with-status-change-events",children:"Working with status change events"}),"\n",(0,o.jsxs)(n.p,{children:["Flash runtimes dynamically change the value of the ",(0,o.jsx)(n.code,{children:"netStatus.info.level"})," or\n",(0,o.jsx)(n.code,{children:"status.level"})," properties for the classes that support the ",(0,o.jsx)(n.code,{children:"level"})," property\nwhile an application is running. The classes that have the\n",(0,o.jsx)(n.code,{children:"netStatus.info.level"})," property are NetConnection, NetStream, and SharedObject.\nThe classes that have the ",(0,o.jsx)(n.code,{children:"status.level"})," property are HTTPStatusEvent, Camera,\nMicrophone, and LocalConnection. You can write a handler function to respond to\nthe change in ",(0,o.jsx)(n.code,{children:"level"})," value and track communication errors."]}),"\n",(0,o.jsxs)(n.p,{children:["The following example uses a ",(0,o.jsx)(n.code,{children:"netStatusHandler()"})," function to test the value of\nthe ",(0,o.jsx)(n.code,{children:"level"})," property. If the ",(0,o.jsx)(n.code,{children:"level"}),' property indicates that an error has been\nencountered, the code traces the message "Video stream failed".']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'package\n{\n    import flash.display.Sprite;\n    import flash.events.NetStatusEvent;\n    import flash.events.SecurityErrorEvent;\n    import flash.media.Video;\n    import flash.net.NetConnection;\n    import flash.net.NetStream;\n\n    public class VideoExample extends Sprite\n    {\n        private var videoUrl:String = "Video.flv";\n        private var connection:NetConnection;\n        private var stream:NetStream;\n\n        public function VideoExample()\n        {\n            connection = new NetConnection();\n            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);\n            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);\n            connection.connect(null);\n        }\n\n        private function netStatusHandler(event:NetStatusEvent):void\n        {\n            if (event.info.level == "error")\n            {\n                trace("Video stream failed")\n            }\n            else\n            {\n                connectStream();\n            }\n        }\n\n        private function securityErrorHandler(event:SecurityErrorEvent):void\n        {\n            trace("securityErrorHandler: " + event);\n        }\n\n        private function connectStream():void\n        {\n            var stream:NetStream = new NetStream(connection);\n            var video:Video = new Video();\n            video.attachNetStream(stream);\n            stream.play(videoUrl);\n            addChild(video);\n        }\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);