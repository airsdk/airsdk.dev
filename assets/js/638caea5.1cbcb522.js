"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[11269],{10253:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/core-actionscript-classes/handling-errors/creating-custom-error-classes","title":"Creating custom error classes","description":"You can extend one of the standard Error classes to create your own specialized","source":"@site/docs/development/core-actionscript-classes/handling-errors/creating-custom-error-classes.md","sourceDirName":"development/core-actionscript-classes/handling-errors","slug":"/development/core-actionscript-classes/handling-errors/creating-custom-error-classes","permalink":"/docs/development/core-actionscript-classes/handling-errors/creating-custom-error-classes","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/handling-errors/creating-custom-error-classes.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"Handling synchronous errors in an application","permalink":"/docs/development/core-actionscript-classes/handling-errors/handling-synchronous-errors-in-an-application"},"next":{"title":"Responding to error events and status","permalink":"/docs/development/core-actionscript-classes/handling-errors/responding-to-error-events-and-status"}}');var o=n(74848),t=n(28453);const a={sidebar_position:6},c="Creating custom error classes",i={},d=[];function l(e){const r={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"creating-custom-error-classes",children:"Creating custom error classes"})}),"\n",(0,o.jsx)(r.p,{children:"You can extend one of the standard Error classes to create your own specialized\nerror classes in ActionScript. There are a number of reasons to create your own\nerror classes:"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"To identify specific errors or groups of errors that are unique to your\napplication."}),"\n",(0,o.jsxs)(r.p,{children:["For example, take different actions for errors thrown by your own code, in\naddition to those errors trapped by a Flash runtime. You can create a subclass\nof the Error class to track the new error data type in ",(0,o.jsx)(r.code,{children:"try..catch"})," blocks."]}),"\n"]}),"\n",(0,o.jsxs)(r.li,{children:["\n",(0,o.jsx)(r.p,{children:"To provide unique error display capabilities for errors generated by your\napplication."}),"\n",(0,o.jsxs)(r.p,{children:["For example, you can create a new ",(0,o.jsx)(r.code,{children:"toString()"})," method that formats your error\nmessages in a certain way. You can also define a ",(0,o.jsx)(r.code,{children:"lookupErrorString()"})," method\nthat takes an error code and retrieves the proper message based on the user's\nlanguage preference."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"A specialized error class must extend the core ActionScript Error class. Here is\nan example of a specialized AppError class that extends the Error class:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:"public class AppError extends Error\n{\n    public function AppError(message:String, errorID:int)\n    {\n        super(message, errorID);\n    }\n}\n"})}),"\n",(0,o.jsx)(r.p,{children:"The following shows an example of using AppError in your project:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'try\n{\n    throw new AppError("Encountered Custom AppError", 29);\n}\ncatch (error:AppError)\n{\n    trace(error.errorID + ": " + error.message)\n}\n'})}),"\n",(0,o.jsxs)(r.p,{children:["Note: If you want to override the ",(0,o.jsx)(r.code,{children:"Error.toString()"})," method in your subclass,\ngive it one ",(0,o.jsx)(r.code,{children:"..."})," (rest) parameter. The ECMAScript language specification on\nwhich ActionScript 3.0 is based defines the ",(0,o.jsx)(r.code,{children:"Error.toString()"})," method that way,\nand ActionScript 3.0 defines it the same way for backward compatibility.\nTherefore, when you override the ",(0,o.jsx)(r.code,{children:"Error.toString()"})," method, match the parameters\nexactly. You do not want to pass any parameters to your ",(0,o.jsx)(r.code,{children:"toString()"})," method at\nruntime, because those parameters are ignored."]})]})}function p(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var s=n(96540);const o={},t=s.createContext(o);function a(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);