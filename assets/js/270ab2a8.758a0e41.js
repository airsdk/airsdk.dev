"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[80976],{28453:(e,s,a)=>{a.d(s,{R:()=>i,x:()=>o});var t=a(96540);const r={},n=t.createContext(r);function i(e){const s=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(n.Provider,{value:s},e.children)}},72365:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"development/core-actionscript-classes/working-with-arrays/multidimensional-arrays","title":"Multidimensional arrays","description":"Multidimensional arrays contain other arrays as elements. For example, consider","source":"@site/docs/development/core-actionscript-classes/working-with-arrays/multidimensional-arrays.md","sourceDirName":"development/core-actionscript-classes/working-with-arrays","slug":"/development/core-actionscript-classes/working-with-arrays/multidimensional-arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/multidimensional-arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-arrays/multidimensional-arrays.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"Associative arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/associative-arrays"},"next":{"title":"Cloning arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/cloning-arrays"}}');var r=a(74848),n=a(28453);const i={sidebar_position:4},o="Multidimensional arrays",d={},c=[{value:"Two indexed arrays",id:"two-indexed-arrays",level:2},{value:"Associative array with an indexed array",id:"associative-array-with-an-indexed-array",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"multidimensional-arrays",children:"Multidimensional arrays"})}),"\n",(0,r.jsx)(s.p,{children:"Multidimensional arrays contain other arrays as elements. For example, consider\na list of tasks that is stored as an indexed array of strings:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'var tasks:Array = ["wash dishes", "take out trash"];\n'})}),"\n",(0,r.jsxs)(s.p,{children:["If you want to store a separate list of tasks for each day of the week, you can\ncreate a multidimensional array with one element for each day of the week. Each\nelement contains an indexed array, similar to the ",(0,r.jsx)(s.code,{children:"tasks"})," array, that stores the\nlist of tasks. You can use any combination of indexed or associative arrays in\nmultidimensional arrays. The examples in the following sections use either two\nindexed arrays or an associative array of indexed arrays. You might want to try\nthe other combinations as exercises."]}),"\n",(0,r.jsx)(s.h2,{id:"two-indexed-arrays",children:"Two indexed arrays"}),"\n",(0,r.jsx)(s.p,{children:"When you use two indexed arrays, you can visualize the result as a table or\nspreadsheet. The elements of the first array represent the rows of the table,\nwhile the elements of the second array represent the columns."}),"\n",(0,r.jsxs)(s.p,{children:["For example, the following multidimensional array uses two indexed arrays to\ntrack task lists for each day of the week. The first array, ",(0,r.jsx)(s.code,{children:"masterTaskList"}),", is\ncreated using the Array class constructor. Each element of the array represents\na day of the week, with index 0 representing Monday, and index 6 representing\nSunday. These elements can be thought of as the rows in the table. You can\ncreate each day's task list by assigning an array literal to each of the seven\nelements that you create in the ",(0,r.jsx)(s.code,{children:"masterTaskList"})," array. The array literals\nrepresent the columns in the table."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'var masterTaskList:Array = new Array();\nmasterTaskList[0] = ["wash dishes", "take out trash"];\nmasterTaskList[1] = ["wash dishes", "pay bills"];\nmasterTaskList[2] = ["wash dishes", "dentist", "wash dog"];\nmasterTaskList[3] = ["wash dishes"];\nmasterTaskList[4] = ["wash dishes", "clean house"];\nmasterTaskList[5] = ["wash dishes", "wash car", "pay rent"];\nmasterTaskList[6] = ["mow lawn", "fix chair"];\n'})}),"\n",(0,r.jsxs)(s.p,{children:["You can access individual items on any of the task lists using the array access\n(",(0,r.jsx)(s.code,{children:"[]"}),") operator. The first set of brackets represents the day of the week, and\nthe second set of brackets represents the task list for that day. For example,\nto retrieve the second task from Wednesday's list, first use index 2 for\nWednesday, and then use index 1 for the second task in the list."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"trace(masterTaskList[2][1]); // output: dentist\n"})}),"\n",(0,r.jsx)(s.p,{children:"To retrieve the first task from Sunday's list, use index 6 for Sunday and index\n0 for the first task on the list."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"trace(masterTaskList[6][0]); // output: mow lawn\n"})}),"\n",(0,r.jsx)(s.h2,{id:"associative-array-with-an-indexed-array",children:"Associative array with an indexed array"}),"\n",(0,r.jsx)(s.p,{children:"To make the individual arrays easier to access, you can use an associative array\nfor the days of the week and an indexed array for the task lists. Using an\nassociative array allows you to use dot syntax when referring to a particular\nday of the week, but at the cost of extra run-time processing to access each\nelement of the associative array. The following example uses an associative\narray as the basis of a task list, with a key and value pair for each day of the\nweek:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:'var masterTaskList:Object = new Object();\nmasterTaskList["Monday"] = ["wash dishes", "take out trash"];\nmasterTaskList["Tuesday"] = ["wash dishes", "pay bills"];\nmasterTaskList["Wednesday"] = ["wash dishes", "dentist", "wash dog"];\nmasterTaskList["Thursday"] = ["wash dishes"];\nmasterTaskList["Friday"] = ["wash dishes", "clean house"];\nmasterTaskList["Saturday"] = ["wash dishes", "wash car", "pay rent"];\nmasterTaskList["Sunday"] = ["mow lawn", "fix chair"];\n'})}),"\n",(0,r.jsx)(s.p,{children:"Dot syntax makes the code more readable by making it possible to avoid multiple\nsets of brackets."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"trace(masterTaskList.Wednesday[1]); // output: dentist\ntrace(masterTaskList.Sunday[0]);// output: mow lawn\n"})}),"\n",(0,r.jsxs)(s.p,{children:["You can iterate through the task list using a ",(0,r.jsx)(s.code,{children:"for..in"})," loop, but you must use\nthe array access (",(0,r.jsx)(s.code,{children:"[]"}),") operator instead of dot syntax to access the value\nassociated with each key. Because ",(0,r.jsx)(s.code,{children:"masterTaskList"})," is an associative array, the\nelements are not necessarily retrieved in the order that you may expect, as the\nfollowing example shows:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"for (var day:String in masterTaskList)\n{\n"})}),"\n",(0,r.jsx)(s.p,{children:'trace(day + ": " + masterTaskList[day])'}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"}\n/* output:\nSunday: mow lawn,fix chair\nWednesday: wash dishes,dentist,wash dog\nFriday: wash dishes,clean house\nThursday: wash dishes\nMonday: wash dishes,take out trash\nSaturday: wash dishes,wash car,pay rent\nTuesday: wash dishes,pay bills\n"})}),"\n",(0,r.jsx)(s.p,{children:"*/"})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);