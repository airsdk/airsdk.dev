"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[29062],{11320:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"development/networking-and-communication/http-communications/loading-external-data","title":"Loading external data","description":"ActionScript 3.0 includes mechanisms for loading data from external sources.","source":"@site/docs/development/networking-and-communication/http-communications/loading-external-data.md","sourceDirName":"development/networking-and-communication/http-communications","slug":"/development/networking-and-communication/http-communications/loading-external-data","permalink":"/docs/development/networking-and-communication/http-communications/loading-external-data","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/networking-and-communication/http-communications/loading-external-data.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"HTTP communications","permalink":"/docs/development/networking-and-communication/http-communications/"},"next":{"title":"Web service requests","permalink":"/docs/development/networking-and-communication/http-communications/web-service-requests/"}}');var s=n(74848),r=n(28453);const o={sidebar_position:1},i="Loading external data",d={},c=[{value:"Using the URLRequest class",id:"using-the-urlrequest-class",level:2},{value:"URLRequest properties",id:"urlrequest-properties",level:3},{value:"Setting URLRequest defaults (AIR only)",id:"setting-urlrequest-defaults-air-only",level:3},{value:"URI schemes",id:"uri-schemes",level:3},{value:"http: and https:",id:"http-and-https",level:4},{value:"file:",id:"file",level:4},{value:"app:",id:"app",level:4},{value:"app-storage:",id:"app-storage",level:4},{value:"mailto:",id:"mailto",level:4},{value:"Setting URL variables",id:"setting-url-variables",level:3},{value:"Using the URLLoader class",id:"using-the-urlloader-class",level:2},{value:"Using the URLStream class",id:"using-the-urlstream-class",level:2},{value:"The httpResponseStatus event (AIR)",id:"the-httpresponsestatus-event-air",level:4},{value:"Loading data from external documents",id:"loading-data-from-external-documents",level:2},{value:"Communicating with external scripts",id:"communicating-with-external-scripts",level:2}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"loading-external-data",children:"Loading external data"})}),"\n",(0,s.jsx)(t.p,{children:"ActionScript 3.0 includes mechanisms for loading data from external sources.\nThose sources can provide static content such as text files, or dynamic content\ngenerated by a web script. The data can be formatted in various ways, and\nActionScript provides functionality for decoding and accessing the data. You can\nalso send data to the external server as part of the process of retrieving data."}),"\n",(0,s.jsx)(t.h2,{id:"using-the-urlrequest-class",children:"Using the URLRequest class"}),"\n",(0,s.jsx)(t.p,{children:"Many APIs that load external data use the URLRequest class to define the\nproperties of necessary network request."}),"\n",(0,s.jsx)(t.h3,{id:"urlrequest-properties",children:"URLRequest properties"}),"\n",(0,s.jsx)(t.p,{children:"You can set the following properties of a URLRequest object in any security\nsandbox:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"contentType"}),(0,s.jsxs)(t.td,{children:["The MIME content type of any data sent with the URL request. If no contentType is set, values are sent as ",(0,s.jsx)(t.code,{children:"application/x-www-form-urlencoded"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"data"}),(0,s.jsx)(t.td,{children:"An object containing data to be transmitted with the URL request."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"digest"}),(0,s.jsx)(t.td,{children:"A string that uniquely identifies the signed Adobe platform component to be stored to (or retrieved from) the Adobe\xae Flash\xae Player cache."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"method"}),(0,s.jsxs)(t.td,{children:["The HTTP request method, such as a GET or POST. (Content running in the AIR application security domain can specify strings other than ",(0,s.jsx)(t.code,{children:'"GET"'})," or ",(0,s.jsx)(t.code,{children:'"POST"'})," as the ",(0,s.jsx)(t.code,{children:"method"})," property. Any HTTP verb is allowed and ",(0,s.jsx)(t.code,{children:'"GET"'})," is the default method. See ",(0,s.jsx)(t.a,{href:"/docs/development/security/air-security/",children:"AIR security"}),".)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"requestHeaders"}),(0,s.jsx)(t.td,{children:"The array of HTTP request headers to be appended to the HTTP request. Note that permission to set some headers is restricted in Flash Player as well as in AIR content running outside the application security sandbox."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"url"}),(0,s.jsx)(t.td,{children:"Specifies the URL to be requested."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["In AIR, you can set additional properties of the URLRequest class, which are\nonly available to AIR content running in the application security sandbox.\nContent in the application sandbox can also define URLs using new URL schemes\n(in addition to standard schemes like ",(0,s.jsx)(t.code,{children:"file"})," and ",(0,s.jsx)(t.code,{children:"http"}),")."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"followRedirects"}),(0,s.jsxs)(t.td,{children:["Specifies whether redirects are to be followed ( ",(0,s.jsx)(t.code,{children:"true"}),", the default value) or not ( ",(0,s.jsx)(t.code,{children:"false"}),"). This is only supported in the AIR application sandbox."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"manageCookies"}),(0,s.jsxs)(t.td,{children:["Specifies whether the HTTP protocol stack should manage cookies ( ",(0,s.jsx)(t.code,{children:"true"}),", the default value) or not ( ",(0,s.jsx)(t.code,{children:"false"}),") for this request. Setting this property is only supported in the AIR application sandbox."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"authenticate"}),(0,s.jsxs)(t.td,{children:["Specifies whether authentication requests should be handled ( ",(0,s.jsx)(t.code,{children:"true"}),") for this request. Setting this property is only supported in the AIR application sandbox. The default is to authenticate requests\u2014which may cause an authentication dialog box to be displayed if the server requires credentials. You can also set the user name and password using the URLRequestDefaults class\u2014see ",(0,s.jsx)(t.a,{href:"#setting-urlrequest-defaults-air-only",children:"Setting URLRequest defaults (AIR only)"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"cacheResponse"}),(0,s.jsxs)(t.td,{children:["Specifies whether response data should be cached for this request. Setting this property is only supported in the AIR application sandbox. The default is to cache the response ( ",(0,s.jsx)(t.code,{children:"true"}),")."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"useCache"}),(0,s.jsxs)(t.td,{children:["Specifies whether the local cache should be consulted before this URLRequest fetches data. Setting this property is only supported in the AIR application sandbox. The default ( ",(0,s.jsx)(t.code,{children:"true"}),") is to use the local cached version, if available."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"userAgent"}),(0,s.jsx)(t.td,{children:"Specifies the user-agent string to be used in the HTTP request."})]})]})]}),"\n",(0,s.jsxs)(t.p,{children:["Note: The HTMLLoader class has related properties for settings pertaining to\ncontent loaded by an HTMLLoader object. For details, see\n",(0,s.jsx)(t.a,{href:"/docs/development/html-content-in-air/programming-html-and-javascript-in-air/about-the-htmlloader-class",children:"About the HTMLLoader class"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"setting-urlrequest-defaults-air-only",children:"Setting URLRequest defaults (AIR only)"}),"\n",(0,s.jsxs)(t.p,{children:["The URLRequestDefaults class lets you define application-specific default\nsettings for URLRequest objects. For example, the following code sets the\ndefault values for the ",(0,s.jsx)(t.code,{children:"manageCookies"})," and ",(0,s.jsx)(t.code,{children:"useCache"})," properties. All new\nURLRequest objects will use the specified values for these properties instead of\nthe normal defaults:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"URLRequestDefaults.manageCookies = false;\nURLRequestDefaults.useCache = false;\n"})}),"\n",(0,s.jsx)(t.p,{children:"Note: The URLRequestDefaults class is defined for content running in Adobe AIR\nonly. It is not supported in Flash Player."}),"\n",(0,s.jsxs)(t.p,{children:["The URLRequestDefaults class includes a ",(0,s.jsx)(t.code,{children:"setLoginCredentialsForHost()"})," method\nthat lets you specify a default user name and password to use for a specific\nhost. The host, which is defined in the hostname parameter of the method, can be\na domain, such as ",(0,s.jsx)(t.code,{children:'"www.example.com"'}),", or a domain and a port number, such as\n",(0,s.jsx)(t.code,{children:'"www.example.com:80"'}),". Note that ",(0,s.jsx)(t.code,{children:'"example.com"'}),", ",(0,s.jsx)(t.code,{children:'"www.example.com"'}),", and\n",(0,s.jsx)(t.code,{children:'"sales.example.com"'})," are each considered unique hosts."]}),"\n",(0,s.jsxs)(t.p,{children:["These credentials are only used if the server requires them. If the user has\nalready authenticated (for example, by using the authentication dialog box),\nthen calling the ",(0,s.jsx)(t.code,{children:"setLoginCredentialsForHost()"})," method does not change the\nauthenticated user."]}),"\n",(0,s.jsxs)(t.p,{children:["The following code sets the default user name and password to use for requests\nsent to ",(0,s.jsx)(t.a,{href:"http://www.example.com",children:"www.example.com"}),":"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'URLRequestDefaults.setLoginCredentialsForHost("www.example.com", "Ada", "love1816$X");\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The URLRequestDefaults settings only apply to the current application domain,\nwith one exception. The credentials passed to the ",(0,s.jsx)(t.code,{children:"setLoginCredentialsForHost()"}),"\nmethod are used for requests made in any application domain within the AIR\napplication."]}),"\n",(0,s.jsxs)(t.p,{children:["For more information, see the\n",(0,s.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/net/URLRequestDefaults.html",children:"URLRequestDefaults"}),"\nclass listing in the\n",(0,s.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/index.html",children:"ActionScript 3.0 Reference for the Adobe Flash Platform"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"uri-schemes",children:"URI schemes"}),"\n",(0,s.jsx)(t.p,{children:"The standard URI schemes, such as the following, can be used in requests made\nfrom any security sandbox:"}),"\n",(0,s.jsx)(t.h4,{id:"http-and-https",children:"http: and https:"}),"\n",(0,s.jsx)(t.p,{children:"Use these for standard Internet URLs (in the same way that they are used in a\nweb browser)."}),"\n",(0,s.jsx)(t.h4,{id:"file",children:"file:"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"file:"})," to specify the URL of a file located on the local file system. For\nexample:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"file:///c:/AIR Test/test.txt\n"})}),"\n",(0,s.jsx)(t.p,{children:"In AIR, you can also use the following schemes when defining a URL for content\nrunning in the application security sandbox:"}),"\n",(0,s.jsx)(t.h4,{id:"app",children:"app:"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"app:"})," to specify a path relative to the root directory of the installed\napplication. For example, the following path points to a resources subdirectory\nof the directory of the installed application:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"app:/resources\n"})}),"\n",(0,s.jsx)(t.p,{children:"When an AIR application is launched using the AIR Debug Launcher (ADL), the\napplication directory is the directory that contains the application descriptor\nfile."}),"\n",(0,s.jsxs)(t.p,{children:["The URL (and ",(0,s.jsx)(t.code,{children:"url"})," property) for a File object created with\n",(0,s.jsx)(t.code,{children:"File.applicationDirectory"})," uses the ",(0,s.jsx)(t.code,{children:"app"})," URI scheme, as in the following:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var dir:File = File.applicationDirectory;\ndir = dir.resolvePath("assets");\ntrace(dir.url); // app:/assets\n'})}),"\n",(0,s.jsx)(t.h4,{id:"app-storage",children:"app-storage:"}),"\n",(0,s.jsxs)(t.p,{children:["Use ",(0,s.jsx)(t.code,{children:"app-storage:"})," to specify a path relative to the data storage directory of\nthe application. For each installed application (and user), AIR creates a unique\napplication storage directory, which is a useful place to store data specific to\nthat application. For example, the following path points to a prefs.xml file in\na settings subdirectory of the application store directory:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"app-storage:/settings/prefs.xml\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The URL (and ",(0,s.jsx)(t.code,{children:"url"})," property) for a File object created with\n",(0,s.jsx)(t.code,{children:"File.applicationStorageDirectory"})," uses the ",(0,s.jsx)(t.code,{children:"app-storage"})," URI scheme, as in the\nfollowing:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var prefsFile:File = File.applicationStorageDirectory;\nprefsFile = prefsFile.resolvePath("prefs.xml");\ntrace(dir.prefsFile); // app-storage:/prefs.xml\n'})}),"\n",(0,s.jsx)(t.h4,{id:"mailto",children:"mailto:"}),"\n",(0,s.jsxs)(t.p,{children:["You can use the mailto scheme in URLRequest objects passed to the\n",(0,s.jsx)(t.code,{children:"navigateToURL()"})," function. See\n",(0,s.jsx)(t.a,{href:"/docs/development/networking-and-communication/http-communications/opening-a-url-in-another-application",children:"Opening a URL in another application"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["You can use a URLRequest object that uses any of these URI schemes to define the\nURL request for a number of different objects, such as a FileStream or a Sound\nobject. You can also use these schemes in HTML content running in AIR; for\nexample, you can use them in the ",(0,s.jsx)(t.code,{children:"src"})," attribute of an ",(0,s.jsx)(t.code,{children:"img"})," tag."]}),"\n",(0,s.jsxs)(t.p,{children:["However, you can only use these AIR-specific URI schemes ( ",(0,s.jsx)(t.code,{children:"app:"})," and\n",(0,s.jsx)(t.code,{children:"app-storage:"}),") in content in the application security sandbox. For more\ninformation, see ",(0,s.jsx)(t.a,{href:"/docs/development/security/air-security/",children:"AIR security"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"setting-url-variables",children:"Setting URL variables"}),"\n",(0,s.jsx)(t.p,{children:"While you can add variables to the URL string directly, it can be easier to use\nthe URLVariables class to define any variables needed for a request."}),"\n",(0,s.jsx)(t.p,{children:"There are three ways in which you can add parameters to a URLVariables object:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Within the URLVariables constructor"}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["With the ",(0,s.jsx)(t.code,{children:"URLVariables.decode()"})," method"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"As dynamic properties of the URLVariables object itself"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"The following example illustrates all three methods and also how to assign the\nvariables to a URLRequest object:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var urlVar:URLVariables = new URLVariables( "one=1&two=2" );\nurlVar.decode("amp=" + encodeURIComponent( "&" ) );\nurlVar.three = 3;\nurlVar.amp2 = "&&";\ntrace(urlVar.toString()); //amp=%26&amp2=%26%26&one=1&two=2&three=3\n\nvar urlRequest:URLRequest = new URLRequest( "http://www.example.com/test.cfm" );\nurlRequest.data = urlVar;\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When you define variables within the URLVariables constructor or within the\n",(0,s.jsx)(t.code,{children:"URLVariables.decode()"})," method, make sure that you URL-encode the characters\nthat have a special meaning in a URI string. For example, when you use an\nampersand in a parameter name or value, you must encode the ampersand by\nchanging it from ",(0,s.jsx)(t.code,{children:"&"})," to ",(0,s.jsx)(t.code,{children:"%26"})," because the ampersand acts as a delimiter for\nparameters. The top-level ",(0,s.jsx)(t.code,{children:"encodeURIComponent()"})," function can be used for this\npurpose."]}),"\n",(0,s.jsx)(t.h2,{id:"using-the-urlloader-class",children:"Using the URLLoader class"}),"\n",(0,s.jsxs)(t.p,{children:["The URLLoader class let you send a request to a server and access the\ninformation returned. You can also use the URLLoader class to access files on\nthe local file system in contexts where local file access is permitted (such as\nthe Flash Player local-with-filesystem sandbox and the AIR application sandbox).\nThe URLLoader class downloads data from a URL as text, binary data, or\nURL-encoded variables. The URLLoader class dispatches events such as ",(0,s.jsx)(t.code,{children:"complete"}),",\n",(0,s.jsx)(t.code,{children:"httpStatus"}),", ",(0,s.jsx)(t.code,{children:"ioError"}),", ",(0,s.jsx)(t.code,{children:"open"}),", ",(0,s.jsx)(t.code,{children:"progress"}),", and ",(0,s.jsx)(t.code,{children:"securityError"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The ActionScript 3.0 event-handling model is significantly different than the\nActionScript 2.0 model, which used the ",(0,s.jsx)(t.code,{children:"LoadVars.onData"}),",\n",(0,s.jsx)(t.code,{children:"LoadVars.onHTTPStatus"}),", and ",(0,s.jsx)(t.code,{children:"LoadVars.onLoad"})," event handlers. For more\ninformation on handling events in ActionScript 3.0, see\n",(0,s.jsx)(t.a,{href:"/docs/development/core-actionscript-classes/handling-events/",children:"Handling events"})]}),"\n",(0,s.jsxs)(t.p,{children:["Downloaded data is not available until the download has completed. You can\nmonitor the progress of the download (bytes loaded and bytes total) by listening\nfor the ",(0,s.jsx)(t.code,{children:"progress"})," event to be dispatched. However, if a file loads quickly\nenough a ",(0,s.jsx)(t.code,{children:"progress"})," event might not be dispatched. When a file has successfully\ndownloaded, the ",(0,s.jsx)(t.code,{children:"complete"})," event is dispatched. By setting the URLLoader\n",(0,s.jsx)(t.code,{children:"dataFormat"})," property, you can receive the data as text, raw binary data, or as\na URLVariables object."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"URLLoader.load()"})," method (and optionally the URLLoader class's constructor)\ntakes a single parameter, ",(0,s.jsx)(t.code,{children:"request"}),", which is a URLRequest object. A URLRequest\nobject contains all of the information for a single HTTP request, such as the\ntarget URL, request method ( ",(0,s.jsx)(t.code,{children:"GET"})," or ",(0,s.jsx)(t.code,{children:"POST"}),"), additional header information,\nand the MIME type."]}),"\n",(0,s.jsx)(t.p,{children:"For example, to upload an XML packet to a server-side script, you could use the\nfollowing code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var secondsUTC:Number = new Date().time;\nvar dataXML:XML =\n\t<clock>\n\t\t<time>{secondsUTC}</time>\n\t</clock>;\nvar request:URLRequest = new URLRequest("http://www.yourdomain.com/time.cfm");\nrequest.contentType = "text/xml";\nrequest.data = dataXML.toXMLString();\nrequest.method = URLRequestMethod.POST;\nvar loader:URLLoader = new URLLoader();\nloader.load(request);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The previous snippet creates an XML document named ",(0,s.jsx)(t.code,{children:"dataXML"})," that contains the\nXML packet to be sent to the server. The example sets the URLRequest\n",(0,s.jsx)(t.code,{children:"contentType"})," property to ",(0,s.jsx)(t.code,{children:'"text/xml"'})," and assigns the XML document to the\nURLRequest ",(0,s.jsx)(t.code,{children:"data"})," property. Finally, the example creates a URLLoader object and\nsends the request to the remote script by using the ",(0,s.jsx)(t.code,{children:"load()"})," method."]}),"\n",(0,s.jsx)(t.h2,{id:"using-the-urlstream-class",children:"Using the URLStream class"}),"\n",(0,s.jsx)(t.p,{children:"The URLStream class provides access to the downloading data as the data arrives.\nThe URLStream class also lets you close a stream before it finishes downloading.\nThe downloaded data is available as raw binary data."}),"\n",(0,s.jsxs)(t.p,{children:["When reading data from a URLStream object, use the ",(0,s.jsx)(t.code,{children:"bytesAvailable"})," property to\ndetermine whether sufficient data is available before reading it. An EOFError\nexception is thrown if you attempt to read more data than is available."]}),"\n",(0,s.jsx)(t.h4,{id:"the-httpresponsestatus-event-air",children:"The httpResponseStatus event (AIR)"}),"\n",(0,s.jsxs)(t.p,{children:["In Adobe AIR, the URLStream class dispatches an ",(0,s.jsx)(t.code,{children:"httpResponseStatus"})," event in\naddition to the ",(0,s.jsx)(t.code,{children:"httpStatus"})," event. The ",(0,s.jsx)(t.code,{children:"httpResponseStatus"})," event is delivered\nbefore any response data. The ",(0,s.jsx)(t.code,{children:"httpResponseStatus"})," event (represented by the\nHTTPStatusEvent class) includes a ",(0,s.jsx)(t.code,{children:"responseURL"})," property, which is the URL that\nthe response was returned from, and a ",(0,s.jsx)(t.code,{children:"responseHeaders"})," property, which is an\narray of URLRequestHeader objects representing the response headers that the\nresponse returned."]}),"\n",(0,s.jsx)(t.h2,{id:"loading-data-from-external-documents",children:"Loading data from external documents"}),"\n",(0,s.jsx)(t.p,{children:'When you build dynamic applications, it can be useful to load data from external\nfiles or from server-side scripts. This lets you build dynamic applications\nwithout having to edit or recompile your application. For example, if you build\na "tip of the day" application, you can write a server-side script that\nretrieves a random tip from a database and saves it to a text file once a day.\nThen your application can load the contents of a static text file instead of\nquerying the database each time.'}),"\n",(0,s.jsx)(t.p,{children:"The following snippet creates a URLRequest and URLLoader object, which loads the\ncontents of an external text file, params.txt:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var request:URLRequest = new URLRequest("params.txt");\nvar loader:URLLoader = new URLLoader();\nloader.load(request);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["By default, if you do not define a request method, Flash Player and Adobe AIR\nload the content using the HTTP ",(0,s.jsx)(t.code,{children:"GET"})," method. To send the request using the\n",(0,s.jsx)(t.code,{children:"POST"})," method, set the ",(0,s.jsx)(t.code,{children:"request.method"})," property to ",(0,s.jsx)(t.code,{children:"POST"})," using the static\nconstant ",(0,s.jsx)(t.code,{children:"URLRequestMethod.POST"}),", as the following code shows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var request:URLRequest = new URLRequest("sendfeedback.cfm");\nrequest.method = URLRequestMethod.POST;\n'})}),"\n",(0,s.jsx)(t.p,{children:"The external document, params.txt, that is loaded at run time contains the\nfollowing data:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"monthNames=January,February,March,April,May,June,July,August,September,October,November,December&dayNames=Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The file contains two parameters, ",(0,s.jsx)(t.code,{children:"monthNames"})," and ",(0,s.jsx)(t.code,{children:"dayNames"}),". Each parameter\ncontains a comma-separated list that is parsed as strings. You can split this\nlist into an array using the ",(0,s.jsx)(t.code,{children:"String.split()"})," method."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.img,{src:n(81029).A+"",width:"17",height:"21"})," Avoid using reserved words or language constructs as\nvariable names in external data files, because doing so makes reading and\ndebugging your code more difficult."]}),"\n",(0,s.jsxs)(t.p,{children:["Once the data has loaded, the ",(0,s.jsx)(t.code,{children:"complete"})," event is dispatched, and the contents\nof the external document are available to use in the URLLoader's ",(0,s.jsx)(t.code,{children:"data"}),"\nproperty, as the following code shows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"function completeHandler(event)\n{\n\tvar loader2 = event.target;\n\tair.trace(loader2.data);\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"If the remote document contains name-value pairs, you can parse the data using\nthe URLVariables class by passing in the contents of the loaded file, as\nfollows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"private function completeHandler(event:Event):void\n{\n\tvar loader2:URLLoader = URLLoader(event.target);\n\tvar variables:URLVariables = new URLVariables(loader2.data);\n\ttrace(variables.dayNames);\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Each name-value pair from the external file is created as a property in the\nURLVariables object. Each property within the variables object in the previous\ncode sample is treated as a string. If the value of the name-value pair is a\nlist of items, you can convert the string into an array by calling the\n",(0,s.jsx)(t.code,{children:"String.split()"})," method, as follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var dayNameArray:Array = variables.dayNames.split(",");\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.img,{src:n(81029).A+"",width:"17",height:"21"})," If you are loading numeric data from external text\nfiles, convert the values into numeric values by using a top-level function,\nsuch as ",(0,s.jsx)(t.code,{children:"int()"}),", ",(0,s.jsx)(t.code,{children:"uint()"}),", or ",(0,s.jsx)(t.code,{children:"Number()"})," ",(0,s.jsx)(t.em,{children:"."})]}),"\n",(0,s.jsxs)(t.p,{children:["Instead of loading the contents of the remote file as a string and creating a\nnew URLVariables object, you could instead set the ",(0,s.jsx)(t.code,{children:"URLLoader.dataFormat"}),"\nproperty to one of the static properties found in the URLLoaderDataFormat class.\nThe three possible values for the ",(0,s.jsx)(t.code,{children:"URLLoader.dataFormat"})," property are as\nfollows:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"URLLoaderDataFormat.BINARY"})," \u2014The ",(0,s.jsx)(t.code,{children:"URLLoader.data"})," property will contain\nbinary data stored in a ByteArray object."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"URLLoaderDataFormat.TEXT"})," \u2014The ",(0,s.jsx)(t.code,{children:"URLLoader.data"})," property will contain text in\na String object."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"URLLoaderDataFormat.VARIABLES"})," \u2014The ",(0,s.jsx)(t.code,{children:"URLLoader.data"})," property will contain\nURL-encoded variables stored in a URLVariables object."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The following code demonstrates how setting the ",(0,s.jsx)(t.code,{children:"URLLoader.dataFormat"})," property\nto ",(0,s.jsx)(t.code,{children:"URLLoaderDataFormat.VARIABLES"})," allows you to automatically parse loaded data\ninto a URLVariables object:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'package\n{\n\timport flash.display.Sprite;\n\timport flash.events.*;\n\timport flash.net.URLLoader;\n\timport flash.net.URLLoaderDataFormat;\n\timport flash.net.URLRequest;\n\n\tpublic class URLLoaderDataFormatExample extends Sprite\n\t{\n\t\tpublic function URLLoaderDataFormatExample()\n\t\t{\n\t\t\tvar request:URLRequest = new URLRequest("http://www.[yourdomain].com/params.txt");\n\t\t\tvar variables:URLLoader = new URLLoader();\n\t\t\tvariables.dataFormat = URLLoaderDataFormat.VARIABLES;\n\t\t\tvariables.addEventListener(Event.COMPLETE, completeHandler);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvariables.load(request);\n\t\t\t}\n\t\t\tcatch (error:Error)\n\t\t\t{\n\t\t\t\ttrace("Unable to load URL: " + error);\n\t\t\t}\n\t\t}\n\t\tprivate function completeHandler(event:Event):void\n\t\t{\n\t\t\tvar loader:URLLoader = URLLoader(event.target);\n\t\t\ttrace(loader.data.dayNames);\n\t\t}\n\t}\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["Note: The default value for ",(0,s.jsx)(t.code,{children:"URLLoader.dataFormat"})," is\n",(0,s.jsx)(t.code,{children:"URLLoaderDataFormat.TEXT"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["As the following example shows, loading XML from an external file is the same as\nloading URLVariables. You can create a URLRequest instance and a URLLoader\ninstance and use them to download a remote XML document. When the file has\ncompletely downloaded, the ",(0,s.jsx)(t.code,{children:"Event.COMPLETE"})," event is dispatched and the contents\nof the external file are converted to an XML instance, which you can parse using\nXML methods and properties."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'package\n{\n\timport flash.display.Sprite;\n\timport flash.errors.*;\n\timport flash.events.*;\n\timport flash.net.URLLoader;\n\timport flash.net.URLRequest;\n\n\tpublic class ExternalDocs extends Sprite\n\t{\n\t\tpublic function ExternalDocs()\n\t\t{\n\t\t\tvar request:URLRequest = new URLRequest("http://www.[yourdomain].com/data.xml");\n\t\t\tvar loader:URLLoader = new URLLoader();\n\t\t\tloader.addEventListener(Event.COMPLETE, completeHandler);\n\t\t\ttry\n\t\t\t{\n\t\t\t\tloader.load(request);\n\t\t\t}\n\t\t\tcatch (error:ArgumentError)\n\t\t\t{\n\t\t\t\ttrace("An ArgumentError has occurred.");\n\t\t\t}\n\t\t\tcatch (error:SecurityError)\n\t\t\t{\n\t\t\t\ttrace("A SecurityError has occurred.");\n\t\t\t}\n\t\t}\n\t\tprivate function completeHandler(event:Event):void\n\t\t{\n\t\t\tvar dataXML:XML = XML(event.target.data);\n\t\t\ttrace(dataXML.toXMLString());\n\t\t}\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"communicating-with-external-scripts",children:"Communicating with external scripts"}),"\n",(0,s.jsx)(t.p,{children:"In addition to loading external data files, you can also use the URLVariables\nclass to send variables to a server-side script and process the server's\nresponse. This is useful, for example, if you are programming a game and want to\nsend the user's score to a server to calculate whether it should be added to the\nhigh scores list, or even send a user's login information to a server for\nvalidation. A server-side script can process the user name and password,\nvalidate it against a database, and return confirmation of whether the\nuser-supplied credentials are valid."}),"\n",(0,s.jsxs)(t.p,{children:["The following snippet creates a URLVariables object named ",(0,s.jsx)(t.code,{children:"variables,"})," which\ncreates a new variable called ",(0,s.jsx)(t.code,{children:"name"}),". Next, a URLRequest object is created that\nspecifies the URL of the server-side script to send the variables to. Then you\nset the ",(0,s.jsx)(t.code,{children:"method"})," property of the URLRequest object to send the variables as an\nHTTP ",(0,s.jsx)(t.code,{children:"POST"})," request. To add the URLVariables object to the URL request, you set\nthe ",(0,s.jsx)(t.code,{children:"data"})," property of the URLRequest object to the URLVariables object created\nearlier. Finally, the URLLoader instance is created and the ",(0,s.jsx)(t.code,{children:"URLLoader.load()"}),"\nmethod is invoked, which initiates the request."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var variables:URLVariables = new URLVariables("name=Franklin");\nvar request:URLRequest = new URLRequest();\nrequest.url = "http://www.[yourdomain].com/greeting.cfm";\nrequest.method = URLRequestMethod.POST;\nrequest.data = variables;\nvar loader:URLLoader = new URLLoader();\nloader.dataFormat = URLLoaderDataFormat.VARIABLES;\nloader.addEventListener(Event.COMPLETE, completeHandler);\ntry\n{\n\tloader.load(request);\n}\ncatch (error:Error)\n{\n\ttrace("Unable to load URL");\n}\n\nfunction completeHandler(event:Event):void\n{\n\ttrace(event.target.data.welcomeMessage);\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"The following code contains the contents of the Adobe ColdFusion\xae greeting.cfm\ndocument used in the previous example:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'<cfif NOT IsDefined("Form.name") OR Len(Trim(Form.Name)) EQ 0>\n\t<cfset Form.Name = "Stranger" />\n</cfif>\n<cfoutput>welcomeMessage=#UrlEncodedFormat("Welcome, " & Form.name)#\n</cfoutput>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var a=n(96540);const s={},r=a.createContext(s);function o(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(r.Provider,{value:t},e.children)}},81029:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/tip_help-3d4c326bf05518d713f5bf1c3f47bcde.png"}}]);