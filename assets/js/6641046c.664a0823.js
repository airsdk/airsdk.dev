"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[2895],{3629:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"development/core-actionscript-classes/working-with-strings/strings-example-ascii-art","title":"Strings example: ASCII art","description":"This ASCII Art example shows a number of features of working with the String","source":"@site/docs/development/core-actionscript-classes/working-with-strings/strings-example-ascii-art.md","sourceDirName":"development/core-actionscript-classes/working-with-strings","slug":"/development/core-actionscript-classes/working-with-strings/strings-example-ascii-art","permalink":"/docs/development/core-actionscript-classes/working-with-strings/strings-example-ascii-art","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-strings/strings-example-ascii-art.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"mainSidebar","previous":{"title":"Converting strings between uppercase and lowercase","permalink":"/docs/development/core-actionscript-classes/working-with-strings/converting-strings-between-uppercase-and-lowercase"},"next":{"title":"Working with arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/"}}');var a=i(74848),s=i(28453);const r={sidebar_position:10},o="Strings example: ASCII art",l={},c=[{value:"Extracting tab-delimited values",id:"extracting-tab-delimited-values",level:2},{value:"Using String methods to normalize image titles",id:"using-string-methods-to-normalize-image-titles",level:2},{value:"Generating the ASCII art text",id:"generating-the-ascii-art-text",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"strings-example-ascii-art",children:"Strings example: ASCII art"})}),"\n",(0,a.jsx)(t.p,{children:"This ASCII Art example shows a number of features of working with the String\nclass in ActionScript 3.0, including the following:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"split()"})," method of the String class is used to extract values from a\ncharacter-delimited string (image information in a tab-delimited text file)."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Several string-manipulation techniques, including ",(0,a.jsx)(t.code,{children:"split()"}),", concatenation,\nand extracting a portion of the string using ",(0,a.jsx)(t.code,{children:"substring()"})," and ",(0,a.jsx)(t.code,{children:"substr()"}),", are\nused to capitalize the first letter of each word in the image titles."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"getCharAt()"})," method is used to get a single character from a string (to\ndetermine the ASCII character corresponding to a grayscale bitmap value)."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"String concatenation is used to build up the ASCII art representation of an\nimage one character at a time."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["The term ",(0,a.jsx)(t.em,{children:"ASCII art"})," refers to a text representations of an image, in which a\ngrid of monospaced font characters, such as Courier New characters, plots the\nimage. The following image shows an example of ASCII art produced by the\napplication:"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"ASCII art - an image rendered with text characters",src:i(8277).A+"",width:"470",height:"306"})}),"\n",(0,a.jsx)(t.p,{children:"The ASCII art version of the graphic is shown on the right."}),"\n",(0,a.jsxs)(t.p,{children:["To get the application files for this sample, see\n",(0,a.jsx)(t.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,a.jsx)(t.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe ASCIIArt application files can be found in the folder Samples/AsciiArt. The\napplication consists of the following files:"]}),"\n",(0,a.jsxs)("table",{children:[(0,a.jsx)("thead",{children:(0,a.jsxs)("tr",{children:[(0,a.jsx)("th",{children:(0,a.jsx)("p",{children:"File"})}),(0,a.jsx)("th",{children:(0,a.jsx)("p",{children:"Description"})})]})}),(0,a.jsxs)("tbody",{children:[(0,a.jsxs)("tr",{children:[(0,a.jsxs)("td",{children:[(0,a.jsx)("p",{children:"AsciiArtApp.mxml"}),(0,a.jsx)("p",{children:"or"}),(0,a.jsx)("p",{children:"AsciiArtApp.fla"})]}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"The main application file in Flash (FLA) or Flex (MXML)"})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/asciiArt/AsciiArtBuilder.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:(0,a.jsx)(t.p,{children:"The class that provides the main functionality of the application,\nincluding extracting image metadata from a text file, loading the\nimages, and managing the image-to-text conversion process."})})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/asciiArt/BitmapToAsciiConverter.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:(0,a.jsxs)(t.p,{children:["A class that provides the\n",(0,a.jsx)("samp",{children:"parseBitmapData()"}),"\nmethod for converting image data into a String version."]})})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/asciiArt/Image.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"A class which represents a loaded bitmap image."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"com/example/programmingas3/asciiArt/ImageInfo.as"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:(0,a.jsx)(t.p,{children:"A class representing metadata for an ASCII art image (such as title,\nimage file URL, and so on)."})})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"image/"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"A folder containing images used by the application."})})]}),(0,a.jsxs)("tr",{children:[(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:"txt/ImageData.txt"})}),(0,a.jsx)("td",{children:(0,a.jsx)("p",{children:(0,a.jsx)(t.p,{children:"A tab-delimited text file, containing information on the images to be\nloaded by the application."})})})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"extracting-tab-delimited-values",children:"Extracting tab-delimited values"}),"\n",(0,a.jsx)(t.p,{children:"This example uses the common practice of storing application data separate from\nthe application itself; that way, if the data changes (for example, if another\nimage is added or an image's title changes), there is no need to recreate the\nSWF file. In this case, the image metadata, including the image title, the URL\nof the actual image file, and some values that are used to manipulate the image,\nare stored in a text file (the txt/ImageData.txt file in the project). The\ncontents of the text file are as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"FILENAME    TITLE    WHITE_THRESHHOLD    BLACK_THRESHHOLD\nFruitBasket.jpg    Pear, apple, orange, and banana    d8    10\nBanana.jpg    A picture of a banana    C8    20\nOrange.jpg    orange    FF    20\nApple.jpg    picture of an apple    6E    10\n"})}),"\n",(0,a.jsx)(t.p,{children:"The file uses a specific tab-delimited format. The first line (row) is a heading\nrow. The remaining lines contain the following data for each bitmap to be\nloaded:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"The filename of the bitmap."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"The display name of the bitmap."}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:"The white-threshold and black-threshold values for the bitmaps. These are hex\nvalues above which and below which a pixel is to be considered completely\nwhite or completely black."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:['As soon as the application starts, the AsciiArtBuilder class loads and parses\nthe contents of the text file in order to create the "stack" of images that it\nwill display, using the following code from the AsciiArtBuilder class\'s\n',(0,a.jsx)(t.code,{children:"parseImageInfo()"})," method:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:'var lines:Array = _imageInfoLoader.data.split("\\n");\nvar numLines:uint = lines.length;\nfor (var i:uint = 1; i < numLines; i++)\n{\n    var imageInfoRaw:String = lines[i];\n    ...\n    if (imageInfoRaw.length > 0)\n    {\n        // Create a new image info record and add it to the array of image info.\n        var imageInfo:ImageInfo = new ImageInfo();\n\n        // Split the current line into values (separated by tab (\\t)\n        // characters) and extract the individual properties:\n        var imageProperties:Array = imageInfoRaw.split("\\t");\n        imageInfo.fileName = imageProperties[0];\n        imageInfo.title = normalizeTitle(imageProperties[1]);\n        imageInfo.whiteThreshold = parseInt(imageProperties[2], 16);\n        imageInfo.blackThreshold = parseInt(imageProperties[3], 16);\n        result.push(imageInfo);\n    }\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The entire contents of the text file are contained in a single String instance,\nthe ",(0,a.jsx)(t.code,{children:"_imageInfoLoader.data"})," property. Using the ",(0,a.jsx)(t.code,{children:"split()"})," method with the\nnewline character ( ",(0,a.jsx)(t.code,{children:'"\\n"'})," ) as a parameter, the String instance is divided into\nan Array ( ",(0,a.jsx)(t.code,{children:"lines"})," ) whose elements are the individual lines of the text file.\nNext, the code uses a loop to work with each of the lines (except the first,\nbecause it contains only headers rather than actual content). Inside the loop,\nthe ",(0,a.jsx)(t.code,{children:"split()"})," method is used once again to divide the contents of the single\nline into a set of values (the Array object named ",(0,a.jsx)(t.code,{children:"imageProperties"})," ). The\nparameter used with the ",(0,a.jsx)(t.code,{children:"split()"})," method in this case is the tab ( ",(0,a.jsx)(t.code,{children:'"\\t"'})," )\ncharacter, because the values in each line are delineated by tab characters."]}),"\n",(0,a.jsx)(t.h2,{id:"using-string-methods-to-normalize-image-titles",children:"Using String methods to normalize image titles"}),"\n",(0,a.jsx)(t.p,{children:"One of the design decisions for this application is that all the image titles\nare displayed using a standard format, with the first letter of each word\ncapitalized (except for a few words that are commonly not capitalized in English\ntitles). Rather than assume that the text file contains properly formatted\ntitles, the application formats the titles while they're being extracted from\nthe text file."}),"\n",(0,a.jsx)(t.p,{children:"In the previous code listing, as part of extracting individual image metadata\nvalues, the following line of code is used:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:"imageInfo.title = normalizeTitle(imageProperties[1]);\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In that code, the image's title from the text file is passed through the\n",(0,a.jsx)(t.code,{children:"normalizeTitle()"})," method before it is stored in the ImageInfo object:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:'private function normalizeTitle(title:String):String\n{\n    var words:Array = title.split(" ");\n    var len:uint = words.length;\n    for (var i:uint; i < len; i++)\n    {\n        words[i] = capitalizeFirstLetter(words[i]);\n    }\n    return words.join(" ");\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This method uses the ",(0,a.jsx)(t.code,{children:"split()"})," method to divide the title into individual words\n(separated by the space character), passes each word through the\n",(0,a.jsx)(t.code,{children:"capitalizeFirstLetter()"})," method, and then uses the Array class's ",(0,a.jsx)(t.code,{children:"join()"}),"\nmethod to combine the words back into a single string again."]}),"\n",(0,a.jsxs)(t.p,{children:["As its name suggests, the ",(0,a.jsx)(t.code,{children:"capitalizeFirstLetter()"})," method actually does the\nwork of capitalizing the first letter of each word:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:'/**\n * Capitalizes the first letter of a single word, unless it\'s one of\n * a set of words that are normally not capitalized in English.\n */\nprivate function capitalizeFirstLetter(word:String):String\n{\n    switch (word)\n    {\n        case "and":\n        case "the":\n        case "in":\n        case "an":\n        case "or":\n        case "at":\n        case "of":\n        case "a":\n            // Don\'t do anything to these words.\n            break;\n        default:\n            // For any other word, capitalize the first character.\n            var firstLetter:String = word.substr(0, 1);\n            firstLetter = firstLetter.toUpperCase();\n            var otherLetters:String = word.substring(1);\n            word = firstLetter + otherLetters;\n    }\n    return word;\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["In English, the initial character of each word in a title is ",(0,a.jsx)(t.em,{children:"not"}),' capitalized\nif it is one of the following words: "and," "the," "in," "an," "or," "at," "of,"\nor "a." (This is a simplified version of the rules.) To execute this logic, the\ncode first uses a ',(0,a.jsx)(t.code,{children:"switch"})," statement to check if the word is one of the words\nthat should not be capitalized. If so, the code simply jumps out of the ",(0,a.jsx)(t.code,{children:"switch"}),"\nstatement. On the other hand, if the word should be capitalized, that is done in\nseveral steps, as follows:"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["The first letter of the word is extracted using ",(0,a.jsx)(t.code,{children:"substr(0, 1)"}),", which\nextracts a substring starting with the character at index 0 (the first\nletter in the string, as indicated by the first parameter ",(0,a.jsx)(t.code,{children:"0"})," ). The\nsubstring will be one character in length (indicated by the second parameter\n",(0,a.jsx)(t.code,{children:"1"})," )."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["That character is capitalized using the ",(0,a.jsx)(t.code,{children:"toUpperCase()"})," method."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["The remaining characters of the original word are extracted using\n",(0,a.jsx)(t.code,{children:"substring(1)"}),", which extracts a substring starting at index 1 (the second\nletter) through the end of the string (indicated by leaving off the second\nparameter of the ",(0,a.jsx)(t.code,{children:"substring()"})," method)."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["The final word is created by combining the newly capitalized first letter\nwith the remaining letters using string concatenation:\n",(0,a.jsx)(t.code,{children:"firstLetter + otherLetters"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"generating-the-ascii-art-text",children:"Generating the ASCII art text"}),"\n",(0,a.jsxs)(t.p,{children:["The BitmapToAsciiConverter class provides the functionality of converting a\nbitmap image to its ASCII text representation. This process is performed by the\n",(0,a.jsx)(t.code,{children:"parseBitmapData()"})," method, which is partially shown here:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:'var result:String = "";\n\n// Loop through the rows of pixels top to bottom:\nfor (var y:uint = 0; y < _data.height; y += verticalResolution)\n{\n    // Within each row, loop through pixels left to right:\n    for (var x:uint = 0; x < _data.width; x += horizontalResolution)\n    {\n        ...\n\n        // Convert the gray value in the 0-255 range to a value\n        // in the 0-64 range (since that\'s the number of "shades of\n        // gray" in the set of available characters):\n        index = Math.floor(grayVal / 4);\n        result += palette.charAt(index);\n    }\n    result += "\\n";\n}\nreturn result;\n'})}),"\n",(0,a.jsxs)(t.p,{children:["This code first defines a String instance named ",(0,a.jsx)(t.code,{children:"result"})," that will be used to\nbuild up the ASCII art version of the bitmap image. Next, it loops through\nindividual pixels of the source bitmap image. Using several color-manipulation\ntechniques (omitted here for brevity), it converts the red, green, and blue\ncolor values of an individual pixel to a single grayscale value (a number from 0\nto 255). The code then divides that value by 4 (as shown) to convert it to a\nvalue in the 0-63 scale, which is stored in the variable ",(0,a.jsx)(t.code,{children:"index"}),'. (The 0-63\nscale is used because the "palette" of available ASCII characters used by this\napplication contains 64 values.) The palette of characters is defined as a\nString instance in the BitmapToAsciiConverter class:']}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-actionscript",children:'// The characters are in order from darkest to lightest, so that their\n// position (index) in the string corresponds to a relative color value\n// (0 = black).\nprivate static const palette:String = "@#$%&8BMW*mwqpdbkhaoQ0OZXYUJCLtfjzxnuvcr[]{}1()|/?Il!i><+_~-;,. ";\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Since the ",(0,a.jsx)(t.code,{children:"index"})," variable defines which ASCII character in the palette\ncorresponds to the current pixel in the bitmap image, that character is\nretrieved from the ",(0,a.jsx)(t.code,{children:"palette"})," String using the ",(0,a.jsx)(t.code,{children:"charAt()"})," method. It is then\nappended to the ",(0,a.jsx)(t.code,{children:"result"})," String instance using the concatenation assignment\noperator ( ",(0,a.jsx)(t.code,{children:"+="})," ). In addition, at the end of each row of pixels, a newline\ncharacter is concatenated to the end of the ",(0,a.jsx)(t.code,{children:"result"}),' String, forcing the line to\nwrap to create a new row of character "pixels."']})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8277:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/st_ascii_art-703ddeb53d36d7522b4597f990aa76f4.png"},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(96540);const a={},s=n.createContext(a);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);