"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[58108],{28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>o});var t=a(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}},36505:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/core-actionscript-classes/working-with-arrays/basics-of-arrays","title":"Basics of arrays","description":"Often in programming you\'ll need to work with a set of items rather than a","source":"@site/docs/development/core-actionscript-classes/working-with-arrays/basics-of-arrays.md","sourceDirName":"development/core-actionscript-classes/working-with-arrays","slug":"/development/core-actionscript-classes/working-with-arrays/basics-of-arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/basics-of-arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-arrays/basics-of-arrays.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Working with arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/"},"next":{"title":"Indexed arrays","permalink":"/docs/development/core-actionscript-classes/working-with-arrays/indexed-arrays"}}');var s=a(74848),r=a(28453);const i={sidebar_position:1},o="Basics of arrays",c={},d=[{value:"Important concepts and terms",id:"important-concepts-and-terms",level:4}];function l(e){const n={br:"br",code:"code",em:"em",h1:"h1",h4:"h4",header:"header",p:"p",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"basics-of-arrays",children:"Basics of arrays"})}),"\n",(0,s.jsx)(n.p,{children:"Often in programming you'll need to work with a set of items rather than a\nsingle object. For example, in a music player application, you might want to\nhave a list of songs waiting to be played. You wouldn't want to have to create a\nseparate variable for each song on that list. It would be preferable to have all\nthe Song objects together in a bundle, and be able to work with them as a group."}),"\n",(0,s.jsxs)(n.p,{children:["An array is a programming element that acts as a container for a set of items,\nsuch as a list of songs. Most commonly all the items in an array are instances\nof the same class, but that is not a requirement in ActionScript. The individual\nitems in an array are known as the array's ",(0,s.jsx)(n.em,{children:"elements"}),". You can think of an array\nas a file drawer for variables. Variables can be added as elements in the array,\nwhich is like placing a folder into the file drawer. You can work with the array\nas a single variable (like carrying the whole drawer to a different location).\nYou can work with the variables as a group (like flipping through the folders\none by one searching for a piece of information). You can also access them\nindividually (like opening the drawer and selecting a single folder)."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, imagine you're creating a music player application where a user can\nselect multiple songs and add them to a playlist. In your ActionScript code, you\nhave a method named ",(0,s.jsx)(n.code,{children:"addSongsToPlaylist()"}),", which accepts a single array as a\nparameter. No matter how many songs you want to add to the list (a few, a lot,\nor even only one), you call the ",(0,s.jsx)(n.code,{children:"addSongsToPlaylist()"})," method only one time,\npassing it the array containing the Song objects. Inside the\n",(0,s.jsx)(n.code,{children:"addSongsToPlaylist()"})," method, you can use a loop to go through the array's\nelements (the songs) one by one and actually add them to the playlist."]}),"\n",(0,s.jsxs)(n.p,{children:["The most common type of ActionScript array is an ",(0,s.jsx)(n.em,{children:"indexed array"}),". In an indexed\narray each item is stored in a numbered slot (known as an ",(0,s.jsx)(n.em,{children:"index"}),"). Items are\naccessed using the number, like an address. Indexed arrays work well for most\nprogramming needs. The Array class is one common class that's used to represent\nan indexed array."]}),"\n",(0,s.jsx)(n.p,{children:"Often, an indexed array is used to store multiple items of the same type\n(objects that are instances of the same class). The Array class doesn't have any\nmeans for restricting the type of items it contains. The Vector class is a type\nof indexed array in which all the items in a single array are the same type.\nUsing a Vector instance instead of an Array instance can also provide\nperformance improvements and other benefits. The Vector class is available\nstarting with Flash Player 10 and Adobe AIR 1.5."}),"\n",(0,s.jsxs)(n.p,{children:["A special use of an indexed array is a ",(0,s.jsx)(n.em,{children:"multidimensional array"}),". A\nmultidimensional array is an indexed array whose elements are indexed arrays\n(which in turn contain other elements)."]}),"\n",(0,s.jsxs)(n.p,{children:["Another type of array is an ",(0,s.jsx)(n.em,{children:"associative array"}),", which uses a string ",(0,s.jsx)(n.em,{children:"key"}),"\ninstead of a numeric index to identify individual elements. Finally,\nActionScript 3.0 also includes the Dictionary class, which represents a\n",(0,s.jsx)(n.em,{children:"dictionary"}),". A dictionary is an array that allows you to use any type of object\nas a key to distinguish between elements."]}),"\n",(0,s.jsx)(n.h4,{id:"important-concepts-and-terms",children:"Important concepts and terms"}),"\n",(0,s.jsx)(n.p,{children:"The following reference list contains important terms that you will encounter\nwhen programming array and vector handling routines:"}),"\n",(0,s.jsxs)(n.p,{children:["Array",(0,s.jsx)(n.br,{}),"\n","An object that serves as a container to group multiple objects."]}),"\n",(0,s.jsxs)(n.p,{children:["Array access ([]) operator",(0,s.jsx)(n.br,{}),"\n","A pair of square brackets surrounding an index or key that uniquely identifies\nan array element. This syntax is used after an array variable name to specify a\nsingle element of the array rather than the entire array."]}),"\n",(0,s.jsxs)(n.p,{children:["Associative array",(0,s.jsx)(n.br,{}),"\n","An array that uses string keys to identify individual elements."]}),"\n",(0,s.jsxs)(n.p,{children:["Base type",(0,s.jsx)(n.br,{}),"\n","The data type of the objects that a Vector instance is allowed to store."]}),"\n",(0,s.jsxs)(n.p,{children:["Dictionary",(0,s.jsx)(n.br,{}),"\n","An array whose items consist of pairs of objects, known as the key and the\nvalue. The key is used instead of a numeric index to identify a single element."]}),"\n",(0,s.jsxs)(n.p,{children:["Element",(0,s.jsx)(n.br,{}),"\n","A single item in an array."]}),"\n",(0,s.jsxs)(n.p,{children:["Index",(0,s.jsx)(n.br,{}),"\n",'The numeric "address" used to identify a single element in an indexed array.']}),"\n",(0,s.jsxs)(n.p,{children:["Indexed array",(0,s.jsx)(n.br,{}),"\n","The standard type of array that stores each element in a numbered position, and\nuses the number (index) to identify individual elements."]}),"\n",(0,s.jsxs)(n.p,{children:["Key",(0,s.jsx)(n.br,{}),"\n","The string or object used to identify a single element in an associative array\nor a dictionary."]}),"\n",(0,s.jsxs)(n.p,{children:["Multidimensional array",(0,s.jsx)(n.br,{}),"\n","An array containing items that are arrays rather than single values."]}),"\n",(0,s.jsxs)(n.p,{children:["T",(0,s.jsx)(n.br,{}),"\n",'The standard convention that\'s used in this documentation to represent the base\ntype of a Vector instance, whatever that base type happens to be. The T\nconvention is used to represent a class name, as shown in the Type parameter\ndescription. ("T" stands for "type," as in "data type.").']}),"\n",(0,s.jsxs)(n.p,{children:["Type parameter",(0,s.jsx)(n.br,{}),"\n","The syntax that's used with the Vector class name to specify the Vector's base\ntype (the data type of the objects that it stores). The syntax consists of a\nperiod (",(0,s.jsx)(n.code,{children:"."}),"), then the data type name surrounded by angle brackets (",(0,s.jsx)(n.code,{children:"<>"}),"). Put\ntogether, it looks like this: ",(0,s.jsx)(n.code,{children:"Vector.<T>"}),". In this documentation, the class\nspecified in the type parameter is represented generically as ",(0,s.jsx)(n.code,{children:"T"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Vector",(0,s.jsx)(n.br,{}),"\n","A type of array whose elements are all instances of the same data type."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);