"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[58773],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var c=n(96540);const o={},i=c.createContext(o);function r(e){const t=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),c.createElement(i.Provider,{value:t},e.children)}},33728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>d});const c=JSON.parse('{"id":"development/html-content-in-air/programming-html-and-javascript-in-air/accessing-html-dom-and-javascript-objects-from-actionscript","title":"Accessing HTML DOM and JavaScript objects from ActionScript","description":"Once the HTMLLoader object dispatches the complete event, you can access all","source":"@site/docs/development/html-content-in-air/programming-html-and-javascript-in-air/accessing-html-dom-and-javascript-objects-from-actionscript.md","sourceDirName":"development/html-content-in-air/programming-html-and-javascript-in-air","slug":"/development/html-content-in-air/programming-html-and-javascript-in-air/accessing-html-dom-and-javascript-objects-from-actionscript","permalink":"/docs/development/html-content-in-air/programming-html-and-javascript-in-air/accessing-html-dom-and-javascript-objects-from-actionscript","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/html-content-in-air/programming-html-and-javascript-in-air/accessing-html-dom-and-javascript-objects-from-actionscript.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Accessing AIR API classes from JavaScript","permalink":"/docs/development/html-content-in-air/programming-html-and-javascript-in-air/accessing-air-api-classes-from-javascript"},"next":{"title":"Avoiding security-related JavaScript errors","permalink":"/docs/development/html-content-in-air/programming-html-and-javascript-in-air/avoiding-security-related-javascript-errors"}}');var o=n(74848),i=n(28453);const r={},a="Accessing HTML DOM and JavaScript objects from ActionScript",s={},d=[];function l(e){const t={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"accessing-html-dom-and-javascript-objects-from-actionscript",children:"Accessing HTML DOM and JavaScript objects from ActionScript"})}),"\n",(0,o.jsxs)(t.p,{children:["Once the HTMLLoader object dispatches the ",(0,o.jsx)(t.code,{children:"complete"})," event, you can access all\nthe objects in the HTML DOM (document object model) for the page. Accessible\nobjects include display elements (such as ",(0,o.jsx)(t.code,{children:"div"})," and ",(0,o.jsx)(t.code,{children:"p"})," objects in the page) as\nwell as JavaScript variables and functions. The ",(0,o.jsx)(t.code,{children:"complete"})," event corresponds to\nthe JavaScript page ",(0,o.jsx)(t.code,{children:"load"})," event. Before ",(0,o.jsx)(t.code,{children:"complete"})," is dispatched, DOM elements,\nvariables, and functions may not have been parsed or created. If possible, wait\nfor the ",(0,o.jsx)(t.code,{children:"complete"})," event before accessing the HTML DOM."]}),"\n",(0,o.jsx)(t.p,{children:"For example, consider the following HTML page:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'<html>\n\t<script>\n\t\tfoo = 333;\n\t\tfunction test() {\n\t\t\treturn "OK.";\n\t\t}\n\t<\/script>\n\t<body>\n\t\t<p id="p1">Hi.</p>\n\t</body>\n</html>\n'})}),"\n",(0,o.jsxs)(t.p,{children:["This simple HTML page defines a JavaScript variable named ",(0,o.jsx)(t.em,{children:"foo"})," and a JavaScript\nfunction named ",(0,o.jsx)(t.em,{children:"test()"}),". Both of these are properties of the global ",(0,o.jsx)(t.code,{children:"window"}),"\nobject of the page. Also, the ",(0,o.jsx)(t.code,{children:"window.document"})," object includes a named P\nelement (with the ID ",(0,o.jsx)(t.em,{children:"p1"})," ), which you can access using the ",(0,o.jsx)(t.code,{children:"getElementById()"}),"\nmethod. Once the page is loaded (when the HTMLLoader object dispatches the\n",(0,o.jsx)(t.code,{children:"complete"})," event), you can access each of these objects from ActionScript, as\nshown in the following ActionScript code:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'var html:HTMLLoader = new HTMLLoader();\nhtml.width = 300;\nhtml.height = 300;\nhtml.addEventListener(Event.COMPLETE, completeHandler);\nvar xhtml:XML =\n\t<html>\n\t\t<script>\n\t\t\tfoo = 333;\n\t\t\tfunction test() {\n\t\t\t\treturn "OK.";\n\t\t\t}\n\t\t<\/script>\n\t\t<body>\n\t\t\t<p id="p1">Hi.</p>\n\t\t</body>\n\t</html>;\nhtml.loadString(xhtml.toString());\n\nfunction completeHandler(e:Event):void {\n\ttrace(html.window.foo); // 333\n\ttrace(html.window.document.getElementById("p1").innerHTML); // Hi.\n\ttrace(html.window.test()); // OK.\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["To access the content of an HTML element, use the ",(0,o.jsx)(t.code,{children:"innerHTML"})," property. For\nexample, the previous code uses\n",(0,o.jsx)(t.code,{children:'html.window.document.getElementById("p1").innerHTML'})," to get the contents of the\nHTML element named ",(0,o.jsx)(t.em,{children:"p1"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["You can also set properties of the HTML page from ActionScript. For example, the\nfollowing example sets the contents of the ",(0,o.jsx)(t.code,{children:"p1"})," element and the value of the\n",(0,o.jsx)(t.code,{children:"foo"})," JavaScript variable on the page using a reference to the containing\nHTMLLoader object:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'html.window.document.getElementById("p1").innerHTML = "Goodbye";\nhtml.window.foo = 66;\n'})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);