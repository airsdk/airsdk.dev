"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[10197],{22724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/client-system-interaction/working-with-air-native-windows/managing-windows","title":"Managing windows","description":"You use the properties and methods of the NativeWindow class to manage the","source":"@site/docs/development/client-system-interaction/working-with-air-native-windows/managing-windows.md","sourceDirName":"development/client-system-interaction/working-with-air-native-windows","slug":"/development/client-system-interaction/working-with-air-native-windows/managing-windows","permalink":"/docs/development/client-system-interaction/working-with-air-native-windows/managing-windows","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/working-with-air-native-windows/managing-windows.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Creating windows","permalink":"/docs/development/client-system-interaction/working-with-air-native-windows/creating-windows"},"next":{"title":"Listening for window events","permalink":"/docs/development/client-system-interaction/working-with-air-native-windows/listening-for-window-events"}}');var o=t(74848),s=t(28453);const d={sidebar_position:3},a="Managing windows",r={},l=[{value:"Getting a NativeWindow instance",id:"getting-a-nativewindow-instance",level:2},{value:"Activating, showing, and hiding windows",id:"activating-showing-and-hiding-windows",level:2},{value:"Changing the window display order",id:"changing-the-window-display-order",level:2},{value:"Closing a window",id:"closing-a-window",level:2},{value:"Allowing cancellation of window operations",id:"allowing-cancellation-of-window-operations",level:2},{value:"Maximizing, minimizing, and restoring a window",id:"maximizing-minimizing-and-restoring-a-window",level:2},{value:"Example: Minimizing, maximizing, restoring and closing a window",id:"example-minimizing-maximizing-restoring-and-closing-a-window",level:2},{value:"Resizing and moving a window",id:"resizing-and-moving-a-window",level:2},{value:"Resizing a window",id:"resizing-a-window",level:4},{value:"Moving a window",id:"moving-a-window",level:4},{value:"Example: Resizing and moving windows",id:"example-resizing-and-moving-windows",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"managing-windows",children:"Managing windows"})}),"\n",(0,o.jsx)(n.p,{children:"You use the properties and methods of the NativeWindow class to manage the\nappearance, behavior, and life cycle of desktop windows."}),"\n",(0,o.jsxs)(n.p,{children:["Note: When using the Flex framework, it is generally better to manage window\nbehavior using the framework classes. Most of the NativeWindow properties and\nmethods can be accessed through the mx",":WindowedApplication"," and mx",":Window","\nclasses."]}),"\n",(0,o.jsx)(n.h2,{id:"getting-a-nativewindow-instance",children:"Getting a NativeWindow instance"}),"\n",(0,o.jsx)(n.p,{children:"To manipulate a window, you must first get the window instance. You can get a\nwindow instance from one of the following places:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The native window constructor used to create the window:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var win:NativeWindow = new NativeWindow(initOptions);\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"nativeWindow"})," property of the window stage:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var win:NativeWindow = stage.nativeWindow;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"stage"})," property of a display object in the window:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var win:NativeWindow = displayObject.stage.nativeWindow;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"target"})," property of a native window event dispatched by the window:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"private function onNativeWindowEvent(event:NativeWindowBoundsEvent):void\n{\n\tvar win:NativeWindow = event.target as NativeWindow;\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"nativeWindow"})," property of an HTML page displayed in the window:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var win:NativeWindow = htmlLoader.window.nativeWindow;\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"activeWindow"})," and ",(0,o.jsx)(n.code,{children:"openedWindows"})," properties of the NativeApplication\nobject:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"var nativeWin:NativeWindow = NativeApplication.nativeApplication.activeWindow;\nvar firstWindow:NativeWindow = NativeApplication.nativeApplication.openedWindows[0];\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"NativeApplication.nativeApplication.activeWindow"})," references the active\nwindow of an application (but returns ",(0,o.jsx)(n.code,{children:"null"})," if the active window is not a\nwindow of this AIR application). The\n",(0,o.jsx)(n.code,{children:"NativeApplication.nativeApplication.openedWindows"})," array contains all of the\nwindows in an AIR application that have not been closed."]}),"\n",(0,o.jsxs)(n.p,{children:["Because the Flex mx",":WindowedApplication",", and mx",":Window"," objects are display\nobjects, you can easily reference the application window in an MXML file using\nthe ",(0,o.jsx)(n.code,{children:"stage"})," property, as follows:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'<?xml version="1.0" encoding="utf-8"?>\n<mx:WindowedApplication xmlns:mx="https://www.adobe.com/2006/mxml" applicationComplete="init();">\n\t<mx:Script>\n\t<![CDATA[\n\t\timport flash.display.NativeWindow;\n\n\t\tpublic function init():void{\n\t\t\tvar appWindow:NativeWindow = this.stage.nativeWindow;\n\t\t\t//set window properties\n\t\t\tappWindow.visible = true;\n\t\t}\n\t]]>\n\t</mx:Script>\n</WindowedApplication\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note: Until the WindowedApplication or Window component is added to the window\nstage by the Flex framework, the component's ",(0,o.jsx)(n.code,{children:"stage"})," property is ",(0,o.jsx)(n.code,{children:"null"}),". This\nbehavior is consistent with that of the Flex Application component, but does\nmean that it is not possible to access the stage or the NativeWindow instance in\nlisteners for events that occur earlier in the initialization cycle of the\nWindowedApplication and Window components, such as ",(0,o.jsx)(n.code,{children:"creationComplete"}),". It is\nsafe to access the stage and NativeWindow instance when the\n",(0,o.jsx)(n.code,{children:"applicationComplete"})," event is dispatched."]}),"\n",(0,o.jsx)(n.h2,{id:"activating-showing-and-hiding-windows",children:"Activating, showing, and hiding windows"}),"\n",(0,o.jsxs)(n.p,{children:["To activate a window, call the NativeWindow ",(0,o.jsx)(n.code,{children:"activate()"})," method. Activating a\nwindow brings the window to the front, gives it keyboard and mouse focus, and,\nif necessary, makes it visible by restoring the window or setting the ",(0,o.jsx)(n.code,{children:"visible"}),"\nproperty to ",(0,o.jsx)(n.code,{children:"true"}),". Activating a window does not change the ordering of other\nwindows in the application. Calling the ",(0,o.jsx)(n.code,{children:"activate()"})," method causes the window to\ndispatch an ",(0,o.jsx)(n.code,{children:"activate"})," event."]}),"\n",(0,o.jsxs)(n.p,{children:["To show a hidden window without activating it, set the ",(0,o.jsx)(n.code,{children:"visible"})," property to\n",(0,o.jsx)(n.code,{children:"true"}),". This brings the window to the front, but will not assign the focus to\nthe window."]}),"\n",(0,o.jsxs)(n.p,{children:["To hide a window from view, set its ",(0,o.jsx)(n.code,{children:"visible"})," property to ",(0,o.jsx)(n.code,{children:"false"}),". Hiding a\nwindow suppresses the display of both the window, any related taskbar icons,\nand, on Mac OS X, the entry in the Windows menu."]}),"\n",(0,o.jsx)(n.p,{children:"When you change the visibility of a window, the visibility of any windows that\nwindow owns is also changed. For example, if you hide a window, all of its owned\nwindows are also hidden."}),"\n",(0,o.jsxs)(n.p,{children:["Note: On Mac OS X, it is not possible to completely hide a minimized window that\nhas an icon in the window portion of the dock. If the ",(0,o.jsx)(n.code,{children:"visible"})," property is set\nto ",(0,o.jsx)(n.code,{children:"false"})," on a minimized window, the dock icon for the window is still\ndisplayed. If the user clicks the icon, the window is restored to a visible\nstate and displayed."]}),"\n",(0,o.jsx)(n.h2,{id:"changing-the-window-display-order",children:"Changing the window display order"}),"\n",(0,o.jsx)(n.p,{children:"AIR provides several methods for directly changing the display order of windows.\nYou can move a window to the front of the display order or to the back; you can\nmove a window above another window or behind it. At the same time, the user can\nreorder windows by activating them."}),"\n",(0,o.jsxs)(n.p,{children:["You can keep a window in front of other windows by setting its ",(0,o.jsx)(n.code,{children:"alwaysInFront"}),"\nproperty to ",(0,o.jsx)(n.code,{children:"true"}),". If more than one window has this setting, then the display\norder of these windows is sorted among each other, but they are always sorted\nabove windows which have ",(0,o.jsx)(n.code,{children:"alwaysInFront"})," set to false."]}),"\n",(0,o.jsxs)(n.p,{children:["Windows in the top-most group are also displayed above windows in other\napplications, even when the AIR application is not active. Because this behavior\ncan be disruptive to a user, setting ",(0,o.jsx)(n.code,{children:"alwaysInFront"})," to ",(0,o.jsx)(n.code,{children:"true"})," should only be\ndone when necessary and appropriate. Examples of justified uses include:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Temporary pop-up windows for controls such as tool tips, pop-up lists, custom\nmenus, or combo boxes. Because these windows should close when they lose\nfocus, the annoyance of blocking a user from viewing another window can be\navoided."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Extremely urgent error messages and alerts. When an irrevocable change may\noccur if the user does not respond in a timely manner, it may be justified to\npush an alert window to the forefront. However, most errors and alerts can be\nhandled in the normal window display order."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Short-lived toast-style windows."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Note: AIR does not enforce proper use of the ",(0,o.jsx)(n.code,{children:"alwaysInFront"})," property. However,\nif your application disrupts a user's workflow, it is likely to be consigned to\nthat same user's trash can."]}),"\n",(0,o.jsxs)(n.p,{children:["If a window owns other windows, those windows are always ordered in front of it.\nIf you call ",(0,o.jsx)(n.code,{children:"orderToFront()"})," or set ",(0,o.jsx)(n.code,{children:"alwaysInFront"})," to ",(0,o.jsx)(n.code,{children:"true"})," on a window that\nowns other windows, then the owned windows are re-ordered along with the owner\nwindow in front of other windows, but the owned windows still display in front\nof the owner."]}),"\n",(0,o.jsxs)(n.p,{children:["Calling the window ordering methods on owned windows works normally among\nwindows owned by the same window, but can also change the ordering of the entire\ngroup of owned windows compared to windows outside that group. For example, if\nyou call ",(0,o.jsx)(n.code,{children:"orderToFront()"})," on an owned window, then both that window, its owner,\nand any other windows owned by the same owner are moved to the front of the\nwindow display order."]}),"\n",(0,o.jsx)(n.p,{children:"The NativeWindow class provides the following properties and methods for setting\nthe display order of a window relative to other windows:"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:(0,o.jsx)("p",{children:"Member"})}),(0,o.jsx)("th",{children:(0,o.jsx)("p",{children:"Description"})})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"alwaysInFront property"})}),(0,o.jsxs)("td",{children:[(0,o.jsx)("p",{children:(0,o.jsx)(n.p,{children:"Specifies whether the window is displayed in the top-most group of\nwindows."})}),(0,o.jsx)("p",{children:(0,o.jsxs)(n.p,{children:["In almost all cases, ",(0,o.jsx)("samp",{children:"false"})," is the best setting. Changing\nthe value from ",(0,o.jsx)("samp",{children:"false"})," to ",(0,o.jsx)("samp",{children:"true"})," brings the\nwindow to the front of all windows (but does not activate it).\nChanging the value from ",(0,o.jsx)("samp",{children:"true"})," to ",(0,o.jsx)("samp",{children:"false"})," orders\nthe window behind windows remaining in the top-most group, but still\nin front of other windows. Setting the property to its current value\nfor a window does not change the window display order."]})}),(0,o.jsx)("p",{children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)("samp",{children:"alwaysInFront"})," setting has no affect on windows owned\nby another window."]})})]})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"orderToFront()"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"Brings the window to the front."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"orderInFrontOf()"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"Brings the window directly in front of a particular window."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"orderToBack()"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"Sends the window behind other windows."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"orderBehind()"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"Sends the window directly behind a particular window."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"activate()"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:(0,o.jsx)(n.p,{children:"Brings the window to the front (along with making the window visible\nand assigning focus)."})})})]})]})]}),"\n",(0,o.jsxs)(n.p,{children:["Note: If a window is hidden ( ",(0,o.jsx)(n.code,{children:"visible"})," is ",(0,o.jsx)(n.code,{children:"false"}),") or minimized, then calling\nthe display order methods has no effect."]}),"\n",(0,o.jsx)(n.p,{children:"On the Linux operating system, different window managers enforce different rules\nregarding the window display order:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"On some window managers, utility windows are always displayed in front of\nnormal windows."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["On some window managers, a full screen window with ",(0,o.jsx)(n.code,{children:"alwaysInFront"})," set to\n",(0,o.jsx)(n.code,{children:"true"})," is always displayed in front of other windows that also have\n",(0,o.jsx)(n.code,{children:"alwaysInFront"})," set to ",(0,o.jsx)(n.code,{children:"true"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"closing-a-window",children:"Closing a window"}),"\n",(0,o.jsxs)(n.p,{children:["To close a window, use the ",(0,o.jsx)(n.code,{children:"NativeWindow.close()"})," method."]}),"\n",(0,o.jsxs)(n.p,{children:["Closing a window unloads the contents of the window, but if other objects have\nreferences to this content, the content objects will not be destroyed. The\n",(0,o.jsx)(n.code,{children:"NativeWindow.close()"})," method executes asynchronously, the application that is\ncontained in the window continues to run during the closing process. The close\nmethod dispatches a close event when the close operation is complete. The\nNativeWindow object is still technically valid, but accessing most properties\nand methods on a closed window generates an IllegalOperationError. You cannot\nreopen a closed window. Check the ",(0,o.jsx)(n.code,{children:"closed"})," property of a window to test whether\na window has been closed. To simply hide a window from view, set the\n",(0,o.jsx)(n.code,{children:"NativeWindow.visible"})," property to ",(0,o.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If the ",(0,o.jsx)(n.code,{children:"Nativeapplication.autoExit"})," property is ",(0,o.jsx)(n.code,{children:"true"}),", which is the default,\nthen the application exits when its last window closes."]}),"\n",(0,o.jsx)(n.p,{children:"Any windows that have an owner are closed when the owner is closed. The owned\nwindows do not dispatch a closing event and hence cannot prevent closure. A\nclose event is dispatched."}),"\n",(0,o.jsx)(n.h2,{id:"allowing-cancellation-of-window-operations",children:"Allowing cancellation of window operations"}),"\n",(0,o.jsxs)(n.p,{children:["When a window uses system chrome, user interaction with the window can be\ncanceled by listening for, and canceling the default behavior of the appropriate\nevents. For example, when a user clicks the system chrome close button, the\n",(0,o.jsx)(n.code,{children:"closing"})," event is dispatched. If any registered listener calls the\n",(0,o.jsx)(n.code,{children:"preventDefault()"})," method of the event, then the window does not close."]}),"\n",(0,o.jsxs)(n.p,{children:["When a window does not use system chrome, notification events for intended\nchanges are not automatically dispatched before the change is made. Hence, if\nyou call the methods for closing a window, changing the window state, or set any\nof the window bounds properties, the change cannot be canceled. To notify\ncomponents in your application before a window change is made, your application\nlogic can dispatch the relevant notification event using the ",(0,o.jsx)(n.code,{children:"dispatchEvent()"}),"\nmethod of the window."]}),"\n",(0,o.jsx)(n.p,{children:"For example, the following logic implements a cancelable event handler for a\nwindow close button:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"public function onCloseCommand(event:MouseEvent):void {\n\tvar closingEvent:Event = new Event(Event.CLOSING,true,true);\n\tdispatchEvent(closing);\n\tif(!closingEvent.isDefaultPrevented()) {\n\t\twin.close();\n\t}\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"dispatchEvent()"})," method returns ",(0,o.jsx)(n.code,{children:"false"})," if the event ",(0,o.jsx)(n.code,{children:"preventDefault()"}),"\nmethod is called by a listener. However, it can also return ",(0,o.jsx)(n.code,{children:"false"})," for other\nreasons, so it is better to explicitly use the ",(0,o.jsx)(n.code,{children:"isDefaultPrevented()"})," method to\ntest whether the change should be canceled."]}),"\n",(0,o.jsx)(n.h2,{id:"maximizing-minimizing-and-restoring-a-window",children:"Maximizing, minimizing, and restoring a window"}),"\n",(0,o.jsxs)(n.p,{children:["To maximize the window, use the NativeWindow ",(0,o.jsx)(n.code,{children:"maximize()"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"myWindow.maximize();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To minimize the window, use the NativeWindow ",(0,o.jsx)(n.code,{children:"minimize()"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"myWindow.minimize();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To restore the window (that is, return it to the size that it was before it was\neither minimized or maximized), use the NativeWindow ",(0,o.jsx)(n.code,{children:"restore()"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"myWindow.restore();\n"})}),"\n",(0,o.jsx)(n.p,{children:"A window that has an owner is minimized and restored when the owning window is\nminimized or restored. No events are dispatched by the owned window when it is\nminimized because its owner is minimized."}),"\n",(0,o.jsx)(n.p,{children:'Note: The behavior that results from maximizing an AIR window is different from\nthe Mac OS X standard behavior. Rather than toggling between an\napplication-defined "standard" size and the last size set by the user, AIR\nwindows toggle between the size last set by the application or user and the full\nusable area of the screen.'}),"\n",(0,o.jsx)(n.p,{children:"On the Linux operating system, different window managers enforce different rules\nregarding setting the window display state:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"On some window managers, utility windows cannot be maximized."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"If a maximum size is set for the window, then some windows do not allow a\nwindow to be maximized. Some other window managers set the display state to\nmaximized, but do not resize the window. In either of these cases, no display\nstate change event is dispatched."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Some window managers do not honor the window ",(0,o.jsx)(n.code,{children:"maximizable"})," or ",(0,o.jsx)(n.code,{children:"minimizable"}),"\nsettings."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Note: On Linux, window properties are changed asynchronously. If you change the\ndisplay state in one line of your program, and read the value in the next, the\nvalue read will still reflect the old setting. On all platforms, the\nNativeWindow object dispatches the ",(0,o.jsx)(n.code,{children:"displayStateChange"})," event when the display\nstate changes. If you need to take some action based on the new state of the\nwindow, always do so in a ",(0,o.jsx)(n.code,{children:"displayStateChange"})," event handler. See\n",(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/working-with-air-native-windows/listening-for-window-events",children:"Listening for window events"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"example-minimizing-maximizing-restoring-and-closing-a-window",children:"Example: Minimizing, maximizing, restoring and closing a window"}),"\n",(0,o.jsxs)(n.p,{children:["The following short MXML application demonstrates the Window ",(0,o.jsx)(n.code,{children:"maximize()"}),",\n",(0,o.jsx)(n.code,{children:"minimize()"}),", ",(0,o.jsx)(n.code,{children:"restore()"}),", and ",(0,o.jsx)(n.code,{children:"close()"})," methods:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'<?xml version="1.0" encoding="utf-8"?>\n\n<mx:WindowedApplication\n\txmlns:mx="https://www.adobe.com/2006/mxml"\n\tlayout="vertical">\n\n\n\t<mx:Script>\n\t<![CDATA[\n\t\tpublic function minimizeWindow():void\n\t\t{\n\t\t\tthis.stage.nativeWindow.minimize();\n\t\t}\n\n\t\tpublic function maximizeWindow():void\n\t\t{\n\t\t\tthis.stage.nativeWindow.maximize();\n\t\t}\n\n\t\tpublic function restoreWindow():void\n\t\t{\n\t\t\tthis.stage.nativeWindow.restore();\n\t\t}\n\n\t\tpublic function closeWindow():void\n\t\t{\n\t\t\tthis.stage.nativeWindow.close();\n\t\t}\n\t]]>\n\t</mx:Script>\n\n\t<mx:VBox>\n\t\t<mx:Button label="Minimize" click="minimizeWindow()"/>\n\t\t<mx:Button label="Restore" click="restoreWindow()"/>\n\t\t<mx:Button label="Maximize" click="maximizeWindow()"/>\n\t\t<mx:Button label="Close" click="closeWindow()"/>\n\t</mx:VBox>\n\n</mx:WindowedApplication>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The following ActionScript example for Flash creates four clickable text fields\nthat trigger the NativeWindow ",(0,o.jsx)(n.code,{children:"minimize()"}),", ",(0,o.jsx)(n.code,{children:"maximize()"}),", ",(0,o.jsx)(n.code,{children:"restore()"}),", and\n",(0,o.jsx)(n.code,{children:"close()"})," methods:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'package\n{\n\timport flash.display.Sprite;\n\timport flash.events.MouseEvent;\n\timport flash.text.TextField;\n\n\tpublic class MinimizeExample extends Sprite\n\t{\n\t\tpublic function MinimizeExample():void\n\t\t{\n\t\t\tvar minTextBtn:TextField = new TextField();\n\t\t\tminTextBtn.x = 10;\n\t\t\tminTextBtn.y = 10;\n\t\t\tminTextBtn.text = "Minimize";\n\t\t\tminTextBtn.background = true;\n\t\t\tminTextBtn.border = true;\n\t\t\tminTextBtn.selectable = false;\n\t\t\taddChild(minTextBtn);\n\t\t\tminTextBtn.addEventListener(MouseEvent.CLICK, onMinimize);\n\n\t\t\tvar maxTextBtn:TextField = new TextField();\n\t\t\tmaxTextBtn.x = 120;\n\t\t\tmaxTextBtn.y = 10;\n\t\t\tmaxTextBtn.text = "Maximize";\n\t\t\tmaxTextBtn.background = true;\n\t\t\tmaxTextBtn.border = true;\n\t\t\tmaxTextBtn.selectable = false;\n\t\t\taddChild(maxTextBtn);\n\t\t\tmaxTextBtn.addEventListener(MouseEvent.CLICK, onMaximize);\n\n\t\t\tvar restoreTextBtn:TextField = new TextField();\n\t\t\trestoreTextBtn.x = 230;\n\t\t\trestoreTextBtn.y = 10;\n\t\t\trestoreTextBtn.text = "Restore";\n\t\t\trestoreTextBtn.background = true;\n\t\t\trestoreTextBtn.border = true;\n\t\t\trestoreTextBtn.selectable = false;\n\t\t\taddChild(restoreTextBtn);\n\t\t\trestoreTextBtn.addEventListener(MouseEvent.CLICK, onRestore);\n\n\t\t\tvar closeTextBtn:TextField = new TextField();\n\t\t\tcloseTextBtn.x = 340;\n\t\t\tcloseTextBtn.y = 10;\n\t\t\tcloseTextBtn.text = "Close Window";\n\t\t\tcloseTextBtn.background = true;\n\t\t\tcloseTextBtn.border = true;\n\t\t\tcloseTextBtn.selectable = false;\n\t\t\taddChild(closeTextBtn);\n\t\t\tcloseTextBtn.addEventListener(MouseEvent.CLICK, onCloseWindow);\n\t\t}\n\t\tfunction onMinimize(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.minimize();\n\t\t}\n\t\tfunction onMaximize(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.maximize();\n\t\t}\n\t\tfunction onRestore(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.restore();\n\t\t}\n\t\tfunction onCloseWindow(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.close();\n\t\t}\n\t}\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"resizing-and-moving-a-window",children:"Resizing and moving a window"}),"\n",(0,o.jsx)(n.p,{children:"When a window uses system chrome, the chrome provides drag controls for resizing\nthe window and moving around the desktop. If a window does not use system chrome\nyou must add your own controls to allow the user to resize and move the window."}),"\n",(0,o.jsxs)(n.p,{children:["Note: To resize or move a window, you must first obtain a reference to the\nNativeWindow instance. For information about how to obtain a window reference,\nsee ",(0,o.jsx)(n.a,{href:"#getting-a-nativewindow-instance",children:"Getting a NativeWindow instance"}),"."]}),"\n",(0,o.jsx)(n.h4,{id:"resizing-a-window",children:"Resizing a window"}),"\n",(0,o.jsxs)(n.p,{children:["To allow a user to resize a window interactively, use the NativeWindow\n",(0,o.jsx)(n.code,{children:"startResize()"})," method. When this method is called from a ",(0,o.jsx)(n.code,{children:"mouseDown"})," event, the\nresizing operation is driven by the mouse and completes when the operating\nsystem receives a ",(0,o.jsx)(n.code,{children:"mouseUp"})," event. When calling ",(0,o.jsx)(n.code,{children:"startResize()"}),", you pass in an\nargument that specifies the edge or corner from which to resize the window."]}),"\n",(0,o.jsxs)(n.p,{children:["To set the window size programmatically, set the ",(0,o.jsx)(n.code,{children:"width"}),", ",(0,o.jsx)(n.code,{children:"height"}),", or ",(0,o.jsx)(n.code,{children:"bounds"}),"\nproperties of the window to the desired dimensions. When you set the bounds, the\nwindow size and position can all be changed at the same time. However, the order\nthat the changes occur is not guaranteed. Some Linux window managers do not\nallow windows to extend outside the bounds of the desktop screen. In these\ncases, the final window size may be limited because of the order in which the\nproperties are set, even though the net affect of the changes would otherwise\nhave resulted in a legal window. For example, if you change both the height and\ny position of a window near the bottom of the screen, then the full height\nchange might not occur when the height change is applied before the y position\nchange."]}),"\n",(0,o.jsxs)(n.p,{children:["Note: On Linux, window properties are changed asynchronously. If you resize a\nwindow in one line of your program, and read the dimensions in the next, they\nwill still reflect the old settings. On all platforms, the NativeWindow object\ndispatches the ",(0,o.jsx)(n.code,{children:"resize"})," event when the window resizes. If you need to take some\naction, such as laying out controls in the window, based on the new size or\nstate of the window, always do so in a ",(0,o.jsx)(n.code,{children:"resize"})," event handler. See\n",(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/working-with-air-native-windows/listening-for-window-events",children:"Listening for window events"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The scale mode of the stage determines how the window stage and its contents\nbehaves when a window is resized. Keep in mind that the stage scale modes are\ndesigned for situations, such as a web browser, where the application is not in\ncontrol of the size or aspect ratio of its display space. In general, you get\nthe best results by setting the stage ",(0,o.jsx)(n.code,{children:"scaleMode"})," property to\n",(0,o.jsx)(n.code,{children:"StageScaleMode.NO_SCALE"}),". If you want the contents of the window to scale, you\ncan still set the ",(0,o.jsx)(n.code,{children:"scaleX"})," and ",(0,o.jsx)(n.code,{children:"scaleY"})," parameters of the content in response to\nthe window bounds changes."]}),"\n",(0,o.jsx)(n.h4,{id:"moving-a-window",children:"Moving a window"}),"\n",(0,o.jsxs)(n.p,{children:["To move a window without resizing it, use the NativeWindow ",(0,o.jsx)(n.code,{children:"startMove()"})," method.\nLike the ",(0,o.jsx)(n.code,{children:"startResize()"})," method, when the ",(0,o.jsx)(n.code,{children:"startMove()"})," method is called from a\n",(0,o.jsx)(n.code,{children:"mouseDown"})," event, the move process is mouse-driven and completes when the\noperating system receives a ",(0,o.jsx)(n.code,{children:"mouseUp"})," event."]}),"\n",(0,o.jsxs)(n.p,{children:["For more information, see the\n",(0,o.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/NativeWindow.html#startResize()",children:(0,o.jsx)(n.code,{children:"startResize()"})}),"\nand\n",(0,o.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/display/NativeWindow.html#startMove()",children:(0,o.jsx)(n.code,{children:"startMove()"})}),"\nmethod listings in the\n",(0,o.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/index.html",children:"ActionScript 3.0 Reference for the Adobe Flash Platform"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To move a window programmatically, set the ",(0,o.jsx)(n.code,{children:"x"}),", ",(0,o.jsx)(n.code,{children:"y"}),", or ",(0,o.jsx)(n.code,{children:"bounds"})," properties of\nthe window to the desired position. When you set the bounds, the window size and\nposition can both be changed at the same time."]}),"\n",(0,o.jsxs)(n.p,{children:["Note: On Linux, window properties are changed asynchronously. If you move a\nwindow in one line of your program, and read the position in the next, the value\nread will still reflect the old setting. On all platforms, the NativeWindow\nobject dispatches the ",(0,o.jsx)(n.code,{children:"move"})," event when the position changes. If you need to\ntake some action based on the new position of the window, always do so in a\n",(0,o.jsx)(n.code,{children:"move"})," event handler. See\n",(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/working-with-air-native-windows/listening-for-window-events",children:"Listening for window events"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"example-resizing-and-moving-windows",children:"Example: Resizing and moving windows"}),"\n",(0,o.jsx)(n.p,{children:"The following example shows how to initiate resizing and moving operations on a\nwindow:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"package\n{\n\timport flash.display.Sprite;\n\timport flash.events.MouseEvent;\n\timport flash.display.NativeWindowResize;\n\n\tpublic class NativeWindowResizeExample extends Sprite\n\t{\n\t\tpublic function NativeWindowResizeExample():void\n\t\t{\n\t\t\t// Fills a background area.\n\t\t\tthis.graphics.beginFill(0xFFFFFF);\n\t\t\tthis.graphics.drawRect(0, 0, 400, 300);\n\t\t\tthis.graphics.endFill();\n\n\t\t\t// Creates a square area where a mouse down will start the resize.\n\t\t\tvar resizeHandle:Sprite =\n\t\t\t\tcreateSprite(0xCCCCCC, 20, this.width - 20, this.height - 20);\n\t\t\tresizeHandle.addEventListener(MouseEvent.MOUSE_DOWN, onStartResize);\n\n\t\t\t// Creates a square area where a mouse down will start the move.\n\t\t\tvar moveHandle:Sprite = createSprite(0xCCCCCC, 20, this.width - 20, 0);\n\t\t\tmoveHandle.addEventListener(MouseEvent.MOUSE_DOWN, onStartMove);\n\t\t}\n\n\t\tpublic function createSprite(color:int, size:int, x:int, y:int):Sprite\n\t\t{\n\t\t\tvar s:Sprite = new Sprite();\n\t\t\ts.graphics.beginFill(color);\n\t\t\ts.graphics.drawRect(0, 0, size, size);\n\t\t\ts.graphics.endFill();\n\t\t\ts.x = x;\n\t\t\ts.y = y;\n\t\t\tthis.addChild(s);\n\t\t\treturn s;\n\t\t}\n\n\t\tpublic function onStartResize(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.startResize(NativeWindowResize.BOTTOM_RIGHT);\n\t\t}\n\n\t\tpublic function onStartMove(event:MouseEvent):void\n\t\t{\n\t\t\tthis.stage.nativeWindow.startMove();\n\t\t}\n\t}\n}\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var i=t(96540);const o={},s=i.createContext(o);function d(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);