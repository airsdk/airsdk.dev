"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[75780],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var t=i(96540);const r={},d=t.createContext(r);function s(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(d.Provider,{value:n},e.children)}},29777:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"building/air-debug-launcher","title":"AIR Debug Launcher (adl)","description":"Use the AIR Debug Launcher (ADL) to run both SWF-based and HTML-based applications during development. Using ADL, you can run an application without first packaging and installing it. By default, ADL uses a runtime included with the SDK, which means you do not have to install the runtime separately to use ADL.","source":"@site/docs/building/air-debug-launcher.md","sourceDirName":"building","slug":"/building/air-debug-launcher","permalink":"/docs/building/air-debug-launcher","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/building/air-debug-launcher.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"AIR Debug Launcher (adl)","sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Configuration files","permalink":"/docs/building/actionscript-compilers/configuration-files"},"next":{"title":"About ADT","permalink":"/docs/building/air-developer-tool/"}}');var r=i(74848),d=i(28453);const s={title:"AIR Debug Launcher (adl)",sidebar_position:2},l=void 0,c={},o=[{value:"ADL usage",id:"adl-usage",level:2},{value:"<code>-runtime runtime-directory</code>",id:"-runtime-runtime-directory",level:3},{value:"<code>-pubid publisher-id</code>",id:"-pubid-publisher-id",level:3},{value:"<code>-nodebug</code>",id:"-nodebug",level:3},{value:"<code>-atlogin</code>",id:"-atlogin",level:3},{value:"<code>-profile profileName</code>",id:"-profile-profilename",level:3},{value:"<code>-screensize value</code>",id:"-screensize-value",level:3},{value:"<code>-extdir extension-directory</code>",id:"-extdir-extension-directory",level:3},{value:"<code>application.xml</code>",id:"applicationxml",level:3},{value:"<code>root-directory</code>",id:"root-directory",level:3},{value:"<code>-- arguments</code>",id:"---arguments",level:3},{value:"ADL Examples",id:"adl-examples",level:2},{value:"ADL exit and error codes",id:"adl-exit-and-error-codes",level:2}];function a(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Use the AIR Debug Launcher (ADL) to run both SWF-based and HTML-based applications during development. Using ADL, you can run an application without first packaging and installing it. By default, ADL uses a runtime included with the SDK, which means you do not have to install the runtime separately to use ADL."}),"\n",(0,r.jsx)(n.p,{children:"ADL prints trace statements and run-time errors to the standard output, but does not support breakpoints or other debugging features. You can use the Flash Debugger (or an integrated development environment such as Flash Builder) for complex debugging issues."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["If your ",(0,r.jsx)(n.code,{children:"trace()"})," statements do not display on the console, ensure that you have not specified ",(0,r.jsx)(n.code,{children:"ErrorReportingEnable"})," or ",(0,r.jsx)(n.code,{children:"TraceOutputFileEnable"})," in the ",(0,r.jsx)(n.code,{children:"mm.cfg"})," file."]})}),"\n",(0,r.jsx)(n.p,{children:"AIR supports debugging directly, so you do not need a debug version of the runtime. To conduct command-line debugging, you use the Flash Debugger and the AIR Debug Launcher (ADL)."}),"\n",(0,r.jsxs)(n.p,{children:["The Flash Debugger is distributed in the AIR SDK directory. The native versions, such as ",(0,r.jsx)(n.code,{children:"fdb.exe"})," on Windows, are in the ",(0,r.jsx)(n.code,{children:"bin"})," subdirectory. The Java version is in the ",(0,r.jsx)(n.code,{children:"lib"})," subdirectory. The AIR Debug Launcher, ",(0,r.jsx)(n.code,{children:"adl.exe"}),", is in the bin directory of your AIR SDK installation. (There is no separate Java version)."]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You cannot start an AIR application directly with ",(0,r.jsx)(n.code,{children:"fdb"}),", because ",(0,r.jsx)(n.code,{children:"fdb"})," attempts to launch it with Flash Player. Instead, let the AIR application connect to a running ",(0,r.jsx)(n.code,{children:"fdb"})," session."]})}),"\n",(0,r.jsx)(n.h2,{id:"adl-usage",children:"ADL usage"}),"\n",(0,r.jsx)(n.p,{children:"To run an application with ADL, use the following pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl application.xml\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Where ",(0,r.jsx)(n.code,{children:"application.xml"})," is the application descriptor file for the application."]}),"\n",(0,r.jsx)(n.p,{children:"The full syntax for the ADL is:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl     [-runtime runtime-directory]\n    [-pubid publisher-id]\n    [-nodebug]\n    [-atlogin]\n    [-profile profileName]\n    [-screensize value]\n    [-extdir extension-directory]\n    application.xml\n    [root-directory]\n    [-- arguments]\n"})}),"\n",(0,r.jsx)(n.p,{children:"(Items in brackets, [], are optional.)"}),"\n",(0,r.jsx)(n.h3,{id:"-runtime-runtime-directory",children:(0,r.jsx)(n.code,{children:"-runtime runtime-directory"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the directory containing the runtime to use. If not specified, the runtime directory in the same SDK as the ADL program is used. If you move ADL out of its SDK folder, specify the runtime directory. On Windows and Linux, specify the directory containing the Adobe AIR directory. On Mac OS X, specify the directory containing Adobe AIR.framework."}),"\n",(0,r.jsx)(n.h3,{id:"-pubid-publisher-id",children:(0,r.jsx)(n.code,{children:"-pubid publisher-id"})}),"\n",(0,r.jsx)(n.p,{children:"Assigns the specified value as the publisher ID of the AIR application for this run. Specifying a temporary publisher ID allows you to test features of an AIR application, such as communicating over a local connection, that use the publisher ID to help uniquely identify an application. As of AIR 1.5.3, you can also specify the publisher ID in the application descriptor file (and should not use this parameter)."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"As of AIR 1.5.3, a Publisher ID is no longer automatically computed and assigned to an AIR application. You can specify a publisher ID when creating an update to an existing AIR application, but new applications do not need and should not specify a publisher ID."})}),"\n",(0,r.jsx)(n.h3,{id:"-nodebug",children:(0,r.jsx)(n.code,{children:"-nodebug"})}),"\n",(0,r.jsx)(n.p,{children:"Turns off debugging support. If used, the application process cannot connect to the Flash debugger and dialogs for unhandled exceptions are suppressed. (However, trace statements still print to the console window.) Turning off debugging allows your application to run a little faster and also emulates the execution mode of an installed application more closely."}),"\n",(0,r.jsx)(n.h3,{id:"-atlogin",children:(0,r.jsx)(n.code,{children:"-atlogin"})}),"\n",(0,r.jsx)(n.p,{children:"Simulates launching the application at login. This flag allows you to test application logic that executes only when an application is set to launch when the user logs in. When -atlogin is used, the reason property of the InvokeEvent object dispatched to the application will be login instead of standard (unless the application is already running)."}),"\n",(0,r.jsx)(n.h3,{id:"-profile-profilename",children:(0,r.jsx)(n.code,{children:"-profile profileName"})}),"\n",(0,r.jsx)(n.p,{children:"ADL debugs the application using the specified profile. The profileName can be one of the following values:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"desktop"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"extendedDesktop"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"mobileDevice"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If the application descriptor includes a ",(0,r.jsx)(n.code,{children:"supportedProfiles"})," element, then the profile you specify with ",(0,r.jsx)(n.code,{children:"-profile"})," must be a member of the supported list. If the ",(0,r.jsx)(n.code,{children:"-profile"})," flag is not used, the first profile in the application descriptor is used as the active profile. If the application descriptor does not include the ",(0,r.jsx)(n.code,{children:"supportedProfiles"})," element and you do not use the ",(0,r.jsx)(n.code,{children:"-profile"})," flag, then the ",(0,r.jsx)(n.code,{children:"desktop"})," profile is used."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information, see ",(0,r.jsx)(n.a,{href:"application-descriptor-files/elements/application#supportedprofiles",children:"supportedProfiles"})," and ",(0,r.jsx)(n.a,{href:"device-profiles",children:"Device profiles"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"-screensize-value",children:(0,r.jsx)(n.code,{children:"-screensize value"})}),"\n",(0,r.jsxs)(n.p,{children:["The simulated screen size to use when running apps in the ",(0,r.jsx)(n.code,{children:"mobileDevice"})," profile on the desktop. Specify the screen size as a predefined screen type, or as the pixel dimensions of the normal width and height for portrait layout, plus the fullscreen width and height. To specify the value by type, use one of the following predefined screen types:"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"TODO: Need to confirm the following values are complete!"}),"\n"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Screen type"}),(0,r.jsx)(n.th,{children:"Normal width x height"}),(0,r.jsx)(n.th,{children:"Fullscreen width x height"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"480"}),(0,r.jsx)(n.td,{children:"720 x 480"}),(0,r.jsx)(n.td,{children:"720 x 480"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"720"}),(0,r.jsx)(n.td,{children:"1280 x 720"}),(0,r.jsx)(n.td,{children:"1280 x 720"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1080"}),(0,r.jsx)(n.td,{children:"1920 x 1080"}),(0,r.jsx)(n.td,{children:"1920 x 1080"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Droid"}),(0,r.jsx)(n.td,{children:"480 x 816"}),(0,r.jsx)(n.td,{children:"480 x 854"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FWQVGA"}),(0,r.jsx)(n.td,{children:"240 x 432"}),(0,r.jsx)(n.td,{children:"240 x 432"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"FWVGA"}),(0,r.jsx)(n.td,{children:"480 x 854"}),(0,r.jsx)(n.td,{children:"480 x 854"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"HVGA"}),(0,r.jsx)(n.td,{children:"320 x 480"}),(0,r.jsx)(n.td,{children:"320 x 480"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPad"}),(0,r.jsx)(n.td,{children:"768 x 1004"}),(0,r.jsx)(n.td,{children:"768 x 1024"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPadRetina"}),(0,r.jsx)(n.td,{children:"1536 x 2008"}),(0,r.jsx)(n.td,{children:"1536 x 2048"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPhone"}),(0,r.jsx)(n.td,{children:"320 x 460"}),(0,r.jsx)(n.td,{children:"320 x 480"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPhoneRetina"}),(0,r.jsx)(n.td,{children:"640 x 920"}),(0,r.jsx)(n.td,{children:"640 x 960"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPhone5Retina"}),(0,r.jsx)(n.td,{children:"640 x 1096"}),(0,r.jsx)(n.td,{children:"640 x 1136"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPhone6"}),(0,r.jsx)(n.td,{children:"750 x 1294"}),(0,r.jsx)(n.td,{children:"750 x 1334"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPhone6Plus"}),(0,r.jsx)(n.td,{children:"1242 x 2148"}),(0,r.jsx)(n.td,{children:"1242 x 2208"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPod"}),(0,r.jsx)(n.td,{children:"320 x 460"}),(0,r.jsx)(n.td,{children:"320 x 480"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPodRetina"}),(0,r.jsx)(n.td,{children:"640 x 920"}),(0,r.jsx)(n.td,{children:"640 x 960"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iPod5Retina"}),(0,r.jsx)(n.td,{children:"640 x 1096"}),(0,r.jsx)(n.td,{children:"640 x 1136"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NexusOne"}),(0,r.jsx)(n.td,{children:"480 x 762"}),(0,r.jsx)(n.td,{children:"480 x 800"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"QVGA"}),(0,r.jsx)(n.td,{children:"240 x 320"}),(0,r.jsx)(n.td,{children:"240 x 320"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SamsungGalaxyS"}),(0,r.jsx)(n.td,{children:"480 x 762"}),(0,r.jsx)(n.td,{children:"480 x 800"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SamsungGalaxyTab"}),(0,r.jsx)(n.td,{children:"600 x 986"}),(0,r.jsx)(n.td,{children:"600 x 1024"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"WQVGA"}),(0,r.jsx)(n.td,{children:"240 x 400"}),(0,r.jsx)(n.td,{children:"240 x 400"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"WVGA"}),(0,r.jsx)(n.td,{children:"480 x 800"}),(0,r.jsx)(n.td,{children:"480 x 800"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"To specify the screen pixel dimensions directly, use the following format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"widthXheight:fullscreenWidthXfullscreenHeight\n"})}),"\n",(0,r.jsx)(n.p,{children:"Always specify the pixel dimensions for portrait layout, meaning specify the width as a value smaller than the value for height. For example, the NexusOne screen can be specified with:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"-screensize 480x762:480x800\n"})}),"\n",(0,r.jsx)(n.h3,{id:"-extdir-extension-directory",children:(0,r.jsx)(n.code,{children:"-extdir extension-directory"})}),"\n",(0,r.jsx)(n.p,{children:"The directory in which the runtime should search for native extensions. The directory contains a subdirectory for each native extension that the application uses. Each of these subdirectories contain the unpackaged ANE file of an extension. For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"C:\\extensionDirs\\\n    extension1.ane\\\n        META-INF\\\n            ANE\\\n                Android-ARM\\\n                    library.swf\n                    extension1.jar\n                extension.xml\n            signatures.xml\n        catalog.xml\n        library.swf\n        mimetype\n    extension2.ane\\\n        META-INF\\\n            ANE\\\n                Android-ARM\\\n                    library.swf\n                    extension2.jar\n                extension.xml\n            signatures.xml\n        catalog.xml\n        library.swf\n        mimetype\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsxs)(n.p,{children:["When using the ",(0,r.jsx)(n.code,{children:"-extdir"})," parameter, consider the following:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ADL command requires that each of the specified directories have the ",(0,r.jsx)(n.code,{children:".ane"})," filename extension. However, the part of the filename before the ",(0,r.jsx)(n.code,{children:".ane"})," suffix can be any valid filename. It does not have to match the value of the extensionID element of the application descriptor file."]}),"\n",(0,r.jsxs)(n.li,{children:["You can specify the ",(0,r.jsx)(n.code,{children:"-extdir"})," parameter more than once."]}),"\n",(0,r.jsxs)(n.li,{children:["The use of the ",(0,r.jsx)(n.code,{children:"-extdir"})," parameter is different for the ADT tool and the ADL tool. In ADT, the parameter specifies a directory that contains ANE files."]}),"\n",(0,r.jsxs)(n.li,{children:["You can also use the environment variable ",(0,r.jsx)(n.code,{children:"AIR_EXTENSION_PATH"})," to specify the extension directories. See ADT environment variables."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"applicationxml",children:(0,r.jsx)(n.code,{children:"application.xml"})}),"\n",(0,r.jsxs)(n.p,{children:["The application descriptor file. See ",(0,r.jsx)(n.a,{href:"/docs/building/application-descriptor-files/introduction",children:"AIR application descriptor files"}),". The application descriptor is the only parameter required by ADL and, in most cases, the only parameter needed."]}),"\n",(0,r.jsx)(n.h3,{id:"root-directory",children:(0,r.jsx)(n.code,{children:"root-directory"})}),"\n",(0,r.jsx)(n.p,{children:"Specifies the root directory of the application to run. If not specified, the directory containing the application descriptor file is used."}),"\n",(0,r.jsx)(n.h3,{id:"---arguments",children:(0,r.jsx)(n.code,{children:"-- arguments"})}),"\n",(0,r.jsx)(n.p,{children:'Any character strings appearing after "--" are passed to the application as command line arguments.'}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"When you launch an AIR application that is already running, a new instance of that application is not started. Instead, an invoke event is dispatched to the running instance."})}),"\n",(0,r.jsx)(n.h2,{id:"adl-examples",children:"ADL Examples"}),"\n",(0,r.jsx)(n.p,{children:"Run an application in the current directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl myApp-app.xml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run an application in a subdirectory of the current directory:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl source/myApp-app.xml release\n"})}),"\n",(0,r.jsx)(n.p,{children:'Run an application and pass in two command-line arguments, "tick" and "tock":'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl myApp-app.xml -- tick tock\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run an application using a specific runtime:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl -runtime /AIRSDK/runtime myApp-app.xml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run an application without debugging support:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl -nodebug myApp-app.xml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run an application in the mobile device profile and simulate the Nexus One screen size:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"adl -profile mobileDevice -screensize NexusOne myMobileApp-app.xml\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run an application using Apache Ant to run the application (the paths shown in the example are for Windows):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<property name="SDK_HOME" value="C:/AIRSDK"/>\n<property name="ADL" value="${SDK_HOME}/bin/adl.exe"/>\n<property name="APP_ROOT" value="c:/dev/MyApp/bin-debug"/>\n<property name="APP_DESCRIPTOR" value="${APP_ROOT}/myApp-app.xml"/>\n\n<target name="test">\n    <exec executable="${ADL}">\n        <arg value="${APP_DESCRIPTOR}"/>\n        <arg value="${APP_ROOT}"/>\n    </exec>\n</target>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"adl-exit-and-error-codes",children:"ADL exit and error codes"}),"\n",(0,r.jsx)(n.p,{children:"The following table describes the exit codes printed by ADL:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Exit code"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"Successful launch. ADL exits after the AIR application exits."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"Successful invocation of an already running AIR application. ADL exits immediately."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"2"}),(0,r.jsx)(n.td,{children:"Usage error. The arguments supplied to ADL are incorrect."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"The runtime cannot be found."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"4"}),(0,r.jsx)(n.td,{children:"The runtime cannot be started. Often, this occurs because the version specified in the application does not match the version of the runtime."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"5"}),(0,r.jsx)(n.td,{children:"An error of unknown cause occurred."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"6"}),(0,r.jsx)(n.td,{children:"The application descriptor file cannot be found."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"7"}),(0,r.jsx)(n.td,{children:"The contents of the application descriptor are not valid. This error usually indicates that the XML is not well formed."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"8"}),(0,r.jsxs)(n.td,{children:["The main application content file (specified in the ",(0,r.jsx)(n.code,{children:"<content>"})," element of the application descriptor file) cannot be found."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"9"}),(0,r.jsx)(n.td,{children:"The main application content file is not a valid SWF or HTML file."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"10"}),(0,r.jsxs)(n.td,{children:["The application doesn\u2019t support the profile specified with the ",(0,r.jsx)(n.code,{children:"-profile"})," option."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"11"}),(0,r.jsxs)(n.td,{children:["The ",(0,r.jsx)(n.code,{children:"-screensize"})," argument is not supported in the current profile."]})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);