"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[58022],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(96540);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},28649:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"development/user-interaction/mouse-input/mouse-input-example-word-search","title":"Mouse input example: WordSearch","description":"This example demonstrates user interaction by handling mouse events. Users build","source":"@site/docs/development/user-interaction/mouse-input/mouse-input-example-word-search.md","sourceDirName":"development/user-interaction/mouse-input","slug":"/development/user-interaction/mouse-input/mouse-input-example-word-search","permalink":"/docs/development/user-interaction/mouse-input/mouse-input-example-word-search","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/mouse-input/mouse-input-example-word-search.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"mainSidebar","previous":{"title":"Capturing mouse input","permalink":"/docs/development/user-interaction/mouse-input/capturing-mouse-input"},"next":{"title":"Touch, multitouch and gesture input","permalink":"/docs/development/user-interaction/touch-multitouch-and-gesture-input/"}}');var o=t(74848),i=t(28453);const s={sidebar_position:2},a="Mouse input example: WordSearch",d={},c=[{value:"Loading a dictionary",id:"loading-a-dictionary",level:2},{value:"Creating the user interface",id:"creating-the-user-interface",level:2},{value:"Generating a game board",id:"generating-a-game-board",level:2},{value:"Building words from user input",id:"building-words-from-user-input",level:2},{value:"Checking word submissions",id:"checking-word-submissions",level:2},{value:"Customization",id:"customization",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mouse-input-example-wordsearch",children:"Mouse input example: WordSearch"})}),"\n",(0,o.jsx)(n.p,{children:"This example demonstrates user interaction by handling mouse events. Users build\nas many words as possible from a random grid of letters, spelling by moving\nhorizontally or vertically in the grid, but never using the same letter\ntwice.This example demonstrates the following features of ActionScript 3.0:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Building a grid of components dynamically"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Responding to mouse events"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Maintaining a score based on user interaction"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["To get the application files for this sample, see\n",(0,o.jsx)(n.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,o.jsx)(n.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe WordSearch application files can be found in the folder Samples/WordSearch.\nThe application consists of the following files:"]}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{children:(0,o.jsx)("p",{children:"File"})}),(0,o.jsx)("th",{children:(0,o.jsx)("p",{children:"Description"})})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"WordSearch.as"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"The class that provides the main functionality of the application."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsxs)("td",{children:[(0,o.jsx)("p",{children:"WordSearch.fla"}),(0,o.jsx)("p",{children:"or"}),(0,o.jsx)("p",{children:"WordSearch.mxml"})]}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"The main application file for Flex (MXML) or Flash\n(FLA)."})})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"dictionary.txt"})}),(0,o.jsx)("td",{children:(0,o.jsx)("p",{children:"A file used to determine if spelled words are scorable and\nspelled correctly."})})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"loading-a-dictionary",children:"Loading a dictionary"}),"\n",(0,o.jsxs)(n.p,{children:["To create a game that involves finding words, a dictionary is needed. The\nexample includes a text file called dictionary.txt that contains a list of words\nseparated by carriage returns. After creating an array named ",(0,o.jsx)(n.code,{children:"words"}),", the\n",(0,o.jsx)(n.code,{children:"loadDictionary()"})," function requests this file, and when it loads successfully,\nthe file becomes a long string. You can parse this string into an array of words\nby using the ",(0,o.jsx)(n.code,{children:"split()"})," method, breaking at each instance of a carriage return\n(character code 10) or new line (character code 13). This parsing occurs in the\n",(0,o.jsx)(n.code,{children:"dictionaryLoaded()"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"words = dictionaryText.split(String.fromCharCode(13, 10));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"creating-the-user-interface",children:"Creating the user interface"}),"\n",(0,o.jsxs)(n.p,{children:["After the words have been stored, you can set up the user interface. Create two\nButton instances: one for submitting a word, and another for clearing a word\nthat is currently being spelled. In each case, you must respond to user input by\nlistening to the ",(0,o.jsx)(n.code,{children:"MouseEvent.CLICK"})," event that the button broadcasts and then\ncalling a function. In the ",(0,o.jsx)(n.code,{children:"setupUI()"})," function, this code creates the listeners\non the two buttons:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"submitWordButton.addEventListener(MouseEvent.CLICK,submitWord);\nclearWordButton.addEventListener(MouseEvent.CLICK,clearWord);\n"})}),"\n",(0,o.jsx)(n.h2,{id:"generating-a-game-board",children:"Generating a game board"}),"\n",(0,o.jsxs)(n.p,{children:["The game board is a grid of random letters. In the ",(0,o.jsx)(n.code,{children:"generateBoard()"})," function, a\ntwo-dimensional grid is created by nesting one loop inside another. The first\nloop increments rows and the second increments the total number of columns per\nrow. Each of the cells created by these rows and columns contains a button that\nrepresents a letter on the board."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'private function generateBoard(startX:Number, startY:Number, totalRows:Number, totalCols:Number, buttonSize:Number):void\n{\n\tbuttons = new Array();\n\tvar colCounter:uint;\n\tvar rowCounter:uint;\n\tfor (rowCounter = 0; rowCounter < totalRows; rowCounter++)\n\t{\n\t\tfor (colCounter = 0; colCounter < totalCols; colCounter++)\n\t\t{\n\t\t\tvar b:Button = new Button();\n\t\t\tb.x = startX + (colCounter*buttonSize);\n\t\t\tb.y = startY + (rowCounter*buttonSize);\n\t\t\tb.addEventListener(MouseEvent.CLICK, letterClicked);\n\t\t\tb.label = getRandomLetter().toUpperCase();\n\t\t\tb.setSize(buttonSize,buttonSize);\n\t\t\tb.name = "buttonRow"+rowCounter+"Col"+colCounter;\n\t\t\taddChild(b);\n\n\t\t\tbuttons.push(b);\n\t\t}\n\t}\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Although a listener is added for a ",(0,o.jsx)(n.code,{children:"MouseEvent.CLICK"})," event on only one line,\nbecause it is in a ",(0,o.jsx)(n.code,{children:"for"})," loop, it is assigned to each Button instance. Also,\neach button is assigned a name derived from its row and column position, which\nprovides an easy way to reference the row and column of each button later in the\ncode."]}),"\n",(0,o.jsx)(n.h2,{id:"building-words-from-user-input",children:"Building words from user input"}),"\n",(0,o.jsxs)(n.p,{children:["Words can be spelled by selecting letters that are vertically or horizontally\nadjacent, but never using the same letter twice. Each click generates a mouse\nevent, at which point the word the user is spelling must be checked to ensure it\nproperly continues from letters that have previously been clicked. If it is not,\nthe previous word is removed and a new one is started. This check occurs in the\n",(0,o.jsx)(n.code,{children:"isLegalContinuation()"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'private function isLegalContinuation(prevButton:Button, currButton:Button):Boolean\n{\n\tvar currButtonRow:Number = Number(currButton.name.charAt(currButton.name. indexOf("Row") + 3));\n\tvar currButtonCol:Number = Number(currButton.name.charAt(currButton.name.indexOf("Col") + 3));\n\tvar prevButtonRow:Number = Number(prevButton.name.charAt(prevButton.name.indexOf("Row") + 3));\n\tvar prevButtonCol:Number = Number(prevButton.name.charAt(prevButton.name.indexOf("Col") + 3));\n\n\treturn ((prevButtonCol == currButtonCol && Math.abs(prevButtonRow - currButtonRow) <= 1) ||\n\t\t\t(prevButtonRow == currButtonRow && Math.abs(prevButtonCol - currButtonCol) <= 1));\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"charAt()"})," and ",(0,o.jsx)(n.code,{children:"indexOf()"})," methods of the String class retrieve the\nappropriate rows and columns from both the currently clicked button and the\npreviously clicked button. The ",(0,o.jsx)(n.code,{children:"isLegalContinuation()"})," method returns ",(0,o.jsx)(n.code,{children:"true"})," if\nthe row or column is unchanged and if the row or column that has been changed is\nwithin a single increment from the previous one. If you want to change the rules\nof the game and allow diagonal spelling, you can remove the checks for an\nunchanged row or column and the final line would look like this:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"return (Math.abs(prevButtonRow - currButtonRow) <= 1) && Math.abs(prevButtonCol - currButtonCol) <= 1));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"checking-word-submissions",children:"Checking word submissions"}),"\n",(0,o.jsxs)(n.p,{children:["To complete the code for the game, mechanisms for checking word submissions and\ntallying the score are needed. The ",(0,o.jsx)(n.code,{children:"searchForWord()"})," method contains both:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'private function searchForWord(str:String):Number\n{\n\tif (words && str)\n\t{\n\t\tvar i:uint = 0\n\t\tfor (i = 0; i < words.length; i++)\n\t\t{\n\t\t\tvar thisWord:String = words[i];\n\t\t\tif (str == words[i])\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\telse\n\t{\n\t\ttrace("WARNING: cannot find words, or string supplied is null");\n\t}\n\treturn -1;\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This function loops through all of the words in the dictionary. If the user's\nword matches a word in the dictionary, its position in the dictionary is\nreturned. The ",(0,o.jsx)(n.code,{children:"submitWord()"})," method then checks the response and updates the\nscore if the position is valid."]}),"\n",(0,o.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,o.jsxs)(n.p,{children:["At the beginning of the class are several constants. You can modify this game by\nmodifying these variables. For example, you can change the amount of time\navailable to play by increasing the ",(0,o.jsx)(n.code,{children:"TOTAL_TIME"})," variable. You can also increase\nthe ",(0,o.jsx)(n.code,{children:"PERCENT_VOWELS"})," variable slightly to increase the likelihood of finding\nwords."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);