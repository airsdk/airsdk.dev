"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4576],{28453:(e,a,n)=>{n.d(a,{R:()=>d,x:()=>i});var t=n(96540);const r={},s=t.createContext(r);function d(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),t.createElement(s.Provider,{value:a},e.children)}},57363:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"development/display/working-with-pixel-bender-shaders/accessing-shader-metadata","title":"Accessing shader metadata","description":"While creating a Pixel Bender shader kernel, the author can specify metadata","source":"@site/docs/development/display/working-with-pixel-bender-shaders/accessing-shader-metadata.md","sourceDirName":"development/display/working-with-pixel-bender-shaders","slug":"/development/display/working-with-pixel-bender-shaders/accessing-shader-metadata","permalink":"/docs/development/display/working-with-pixel-bender-shaders/accessing-shader-metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-pixel-bender-shaders/accessing-shader-metadata.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Working with Pixel Bender shaders","permalink":"/docs/development/display/working-with-pixel-bender-shaders/"},"next":{"title":"Basics of Pixel Bender shaders","permalink":"/docs/development/display/working-with-pixel-bender-shaders/basics-of-pixel-bender-shaders"}}');var r=n(74848),s=n(28453);const d={},i="Accessing shader metadata",o={},h=[];function c(e){const a={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"accessing-shader-metadata",children:"Accessing shader metadata"})}),"\n",(0,r.jsx)(a.p,{children:"While creating a Pixel Bender shader kernel, the author can specify metadata\nabout the shader in the Pixel Bender source code. While using a shader in\nActionScript, you can examine the shader and extract its metadata."}),"\n",(0,r.jsxs)(a.p,{children:["When you create a Shader instance and link it to a Pixel Bender shader, a\nShaderData object containing data about the shader is created and stored in the\nShader object's ",(0,r.jsx)(a.code,{children:"data"})," property. The ShaderData class doesn't define any\nproperties of its own. However, at run time a property is dynamically added to\nthe ShaderData object for each metadata value defined in the shader source code.\nThe name given to each property is the same as the name specified in the\nmetadata. For example, suppose the source code of a Pixel Bender shader includes\nthe following metadata definition:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:'namespace : "Adobe::Example";\nvendor : "Bob Jones";\nversion : 1;\ndescription : "Creates a version of the specified image with the specified brightness.";\n'})}),"\n",(0,r.jsx)(a.p,{children:"The ShaderData object created for that shader is created with the following\nproperties and values:"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"namespace"})," (String): ",(0,r.jsx)(a.code,{children:'"Adobe::Example"'})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"vendor"})," (String): ",(0,r.jsx)(a.code,{children:'"Bob Jones"'})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"version"})," (String): ",(0,r.jsx)(a.code,{children:'"1"'})]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsxs)(a.p,{children:[(0,r.jsx)(a.code,{children:"description"})," (String):\n",(0,r.jsx)(a.code,{children:'"Creates a version of the specified image with the specified brightness"'})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.p,{children:["Because metadata properties are dynamically added to the ShaderData object, you\ncan use a ",(0,r.jsx)(a.code,{children:"for..in"})," loop to examine the ShaderData object. Using this technique\nyou can find out whether the shader has any metadata and what the metadata\nvalues are. In addition to metadata properties, a ShaderData object can have\nproperties representing inputs and parameters that are defined in the shader.\nWhen you use a ",(0,r.jsx)(a.code,{children:"for..in"})," loop to examine a ShaderData object, check the data\ntype of each property to determine whether the property is an input (a\nShaderInput instance), a parameter (a ShaderParameter instance), or a metadata\nvalue (a String instance). The following example shows how to use a ",(0,r.jsx)(a.code,{children:"for..in"}),"\nloop to examine the dynamic properties of a shader's ",(0,r.jsx)(a.code,{children:"data"})," property. Each\nmetadata value is added to a Vector instance named ",(0,r.jsx)(a.code,{children:"metadata"}),". Note that this\nexample assumes a Shader instance named ",(0,r.jsx)(a.code,{children:"myShader"})," is already created:"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{children:"var shaderData:ShaderData = myShader.data;\nvar metadata:Vector.<String> = new Vector.<String>();\n\nfor (var prop:String in shaderData)\n{\n    if (!(shaderData[prop] is ShaderInput) && !(shaderData[prop] is ShaderParameter))\n    {\n        metadata[metadata.length] = shaderData[prop];\n    }\n}\n\n// do something with the metadata\n"})}),"\n",(0,r.jsxs)(a.p,{children:["For a version of this example that also extracts shader inputs and parameters,\nsee\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values#identifying-shader-inputs-and-parameters",children:"Identifying shader inputs and parameters"}),".\nFor more information about input and parameter properties, see\n",(0,r.jsx)(a.a,{href:"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values",children:"Specifying shader input and parameter values"}),"."]})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);