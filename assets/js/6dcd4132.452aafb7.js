"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[10678],{19948:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"development/text/basics-of-working-with-text","title":"Basics of Working with text","description":"To display text on the screen in Adobe\xae Flash\xae Player or Adobe\xae AIR\u2122, use an","source":"@site/docs/development/text/basics-of-working-with-text.md","sourceDirName":"development/text","slug":"/development/text/basics-of-working-with-text","permalink":"/docs/development/text/basics-of-working-with-text","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/text/basics-of-working-with-text.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Text","permalink":"/docs/development/text/"},"next":{"title":"Using the TextField class","permalink":"/docs/development/text/using-the-textfield-class/"}}');var i=n(74848),a=n(28453);const o={sidebar_position:1},r="Basics of Working with text",c={},l=[{value:"Important concepts and terms",id:"important-concepts-and-terms",level:4}];function d(e){const t={a:"a",br:"br",h1:"h1",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"basics-of-working-with-text",children:"Basics of Working with text"})}),"\n",(0,i.jsx)(t.p,{children:"To display text on the screen in Adobe\xae Flash\xae Player or Adobe\xae AIR\u2122, use an\ninstance of the TextField class or use the Flash Text Engine classes. These\nclasses allow you to create, display, and format text. Alternatively, you can\nuse the Text Layout Framework (TLF) \u2014 a component library based on the Flash\nText Engine classes, but designed for ease of use. On mobile devices, you can\nuse the StageText class for text input."}),"\n",(0,i.jsx)(t.p,{children:"You can establish specific content for text fields, or designate the source for\nthe text, and then set the appearance of that text. You can also respond to user\nevents as the user inputs text or clicks a hypertext link."}),"\n",(0,i.jsx)(t.p,{children:"Both the TextField class and the Flash Text Engine classes allow you to display\nand manage text in Flash Player and AIR.You can use the TextField class to\ncreate text objects for display and input. The TextField class provides the\nbasis for other text-based components, such as TextArea and TextInput. You can\nuse the TextFormat class to set character and paragraph formatting for TextField\nobjects and you can apply Cascading Style Sheets (CSS) using the\nTextfield.styleSheet property and the StyleSheet class. You can assign\nHTML-formatted text, which can contain embedded media (movie clips, SWF files,\nGIF files, PNG files, and JPEG files), directly to a text field."}),"\n",(0,i.jsx)(t.p,{children:"The Flash Text Engine, available starting with Flash Player 10 and Adobe AIR\n1.5, provides low-level support for sophisticated control of text metrics,\nformatting, and bi-directional text. It also offers improved text flow and\nenhanced language support. While you can use the Flash Text Engine to create and\nmanage text elements, it is primarily designed as the foundation for creating\ntext-handling components and requires greater programming expertise.The Text\nLayout Framework, which includes a text-handling component based on the Flash\nText Engine, provides an easier way to use the advanced features of the new text\nengine. The Text Layout Framework is an extensible library built entirely in\nActionScript 3.0. You can use the existing TLF component, or use the framework\nto build your own text component."}),"\n",(0,i.jsx)(t.p,{children:"The StageText class, available starting in AIR 3, provides a native text input\nfield. Because this field is provided by the device operating system, it\nprovides the experience with which users of a device are most familiar. A\nStageText instance is not a display object. Instead of adding it to the display\nlist, you assign an instance a stage and a display area on that stage called a\nviewport. The StageText instance displays in front of any display objects."}),"\n",(0,i.jsx)(t.p,{children:"For more information on these topics, see:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/docs/development/text/using-the-textfield-class/",children:"Using the TextField class"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/docs/development/text/using-the-flash-text-engine/",children:"Using the Flash Text Engine"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"/docs/development/text/using-the-text-layout-framework",children:"Using the Text Layout Framework"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://web.archive.org/web/20170629011903/http://blogs.adobe.com/cantrell/archives/2011/09/native-text-input-with-stagetext.html",children:"Native text input with StageText"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"important-concepts-and-terms",children:"Important concepts and terms"}),"\n",(0,i.jsx)(t.p,{children:"The following reference list contains important terms involved with text\nhandling:"}),"\n",(0,i.jsxs)(t.p,{children:["Cascading style sheets",(0,i.jsx)(t.br,{}),"\n","A standard syntax for specifying styles and formatting for content that's\nstructured in XML (or HTML) format."]}),"\n",(0,i.jsxs)(t.p,{children:["Device font",(0,i.jsx)(t.br,{}),"\n","A font that is installed on the user's machine."]}),"\n",(0,i.jsxs)(t.p,{children:["Dynamic text field",(0,i.jsx)(t.br,{}),"\n","A text field whose contents can be changed by ActionScript but not by user\ninput."]}),"\n",(0,i.jsxs)(t.p,{children:["Embedded font",(0,i.jsx)(t.br,{}),"\n","A font that has its character outline data stored in the application SWF file."]}),"\n",(0,i.jsxs)(t.p,{children:["HTML text",(0,i.jsx)(t.br,{}),"\n","Text content entered into a text field using ActionScript that includes HTML\nformatting tags along with actual text content."]}),"\n",(0,i.jsxs)(t.p,{children:["Input text field",(0,i.jsx)(t.br,{}),"\n","A text field whose contents can be changed either by user input or by\nActionScript."]}),"\n",(0,i.jsxs)(t.p,{children:["Kerning",(0,i.jsx)(t.br,{}),"\n","An adjustment of the spacing between pairs of characters to make the spacing in\nwords more proportional and the text easier to read."]}),"\n",(0,i.jsxs)(t.p,{children:["Static text field",(0,i.jsx)(t.br,{}),"\n","A text field created in the authoring tool, whose content cannot change when the\nSWF file is running."]}),"\n",(0,i.jsxs)(t.p,{children:["Text line metrics",(0,i.jsx)(t.br,{}),"\n","Measurements of the size of various parts of the text content in a text field,\nsuch as the baseline of the text, the height of the top of the characters, size\nof descenders (the part of some lowercase letters that extends below the\nbaseline), and so on."]}),"\n",(0,i.jsxs)(t.p,{children:["Tracking",(0,i.jsx)(t.br,{}),"\n","An adjustment of spacing between groups of letters or blocks of text to increase\nor decrease the density and make the text more readable."]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(96540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);