"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[89427],{8969:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"development/user-interaction/copy-and-paste/html-copy-and-paste-in-air","title":"HTML copy and paste in AIR","description":"The HTML environment in Adobe AIR provides its own set of events and default","source":"@site/docs/development/user-interaction/copy-and-paste/html-copy-and-paste-in-air.md","sourceDirName":"development/user-interaction/copy-and-paste","slug":"/development/user-interaction/copy-and-paste/html-copy-and-paste-in-air","permalink":"/docs/development/user-interaction/copy-and-paste/html-copy-and-paste-in-air","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/copy-and-paste/html-copy-and-paste-in-air.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Reading from and writing to the system clipboard","permalink":"/docs/development/user-interaction/copy-and-paste/reading-from-and-writing-to-the-system-clipboard"},"next":{"title":"Clipboard data formats","permalink":"/docs/development/user-interaction/copy-and-paste/clipboard-data-formats"}}');var o=n(74848),i=n(28453);const s={sidebar_position:3},r="HTML copy and paste in AIR",c={},d=[{value:"Default behavior",id:"default-behavior",level:2},{value:"Using the clipboardData property of the event object",id:"using-the-clipboarddata-property-of-the-event-object",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"html-copy-and-paste-in-air",children:"HTML copy and paste in AIR"})}),"\n",(0,o.jsxs)(t.p,{children:["The HTML environment in Adobe AIR provides its own set of events and default\nbehavior for copy and paste. Only code running in the application sandbox can\naccess the system clipboard directly through the AIR\n",(0,o.jsx)(t.code,{children:"Clipboard.generalClipboard"})," object. JavaScript code in a non-application\nsandbox can access the clipboard through the event object dispatched in response\nto one of the copy or paste events dispatched by an element in an HTML document."]}),"\n",(0,o.jsxs)(t.p,{children:["Copy and paste events include: ",(0,o.jsx)(t.code,{children:"copy"}),", ",(0,o.jsx)(t.code,{children:"cut"}),", and ",(0,o.jsx)(t.code,{children:"paste"}),". The object dispatched\nfor these events provides access to the clipboard through the ",(0,o.jsx)(t.code,{children:"clipboardData"}),"\nproperty."]}),"\n",(0,o.jsx)(t.h2,{id:"default-behavior",children:"Default behavior"}),"\n",(0,o.jsx)(t.p,{children:"By default, AIR copies selected items in response to the copy command, which can\nbe generated either by a keyboard shortcut or a context menu. Within editable\nregions, AIR cuts text in response to the cut command or pastes text to the\ncursor or selection in response to the paste command."}),"\n",(0,o.jsxs)(t.p,{children:["To prevent the default behavior, your event handler can call the\n",(0,o.jsx)(t.code,{children:"preventDefault()"})," method of the dispatched event object."]}),"\n",(0,o.jsx)(t.h2,{id:"using-the-clipboarddata-property-of-the-event-object",children:"Using the clipboardData property of the event object"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"clipboardData"})," property of the event object dispatched as a result of one\nof the copy or paste events allows you to read and write clipboard data."]}),"\n",(0,o.jsxs)(t.p,{children:["To write to the clipboard when handling a copy or cut event, use the ",(0,o.jsx)(t.code,{children:"setData()"}),"\nmethod of the ",(0,o.jsx)(t.code,{children:"clipboardData"})," object, passing in the data to copy and the MIME\ntype:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'function customCopy(event){\n\tevent.clipboardData.setData("text/plain", "A copied string.");\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["To access the data that is being pasted, you can use the ",(0,o.jsx)(t.code,{children:"getData()"})," method of\nthe ",(0,o.jsx)(t.code,{children:"clipboardData"})," object, passing in the MIME type of the data format. The\navailable formats are reported by the ",(0,o.jsx)(t.code,{children:"types"})," property."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'function customPaste(event){\n\tvar pastedData = event.clipboardData("text/plain");\n}\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.code,{children:"getData()"})," method and the ",(0,o.jsx)(t.code,{children:"types"})," property can only be accessed in the\nevent object dispatched by the ",(0,o.jsx)(t.code,{children:"paste"})," event."]}),"\n",(0,o.jsxs)(t.p,{children:["The following example illustrates how to override the default copy and paste\nbehavior in an HTML page. The ",(0,o.jsx)(t.code,{children:"copy"})," event handler italicizes the copied text\nand copies it to the clipboard as HTML text. The ",(0,o.jsx)(t.code,{children:"cut"})," event handler copies the\nselected data to the clipboard and removes it from the document. The ",(0,o.jsx)(t.code,{children:"paste"}),"\nhandler inserts the clipboard contents as HTML and styles the insertion as bold\ntext."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'<html>\n<head>\n<title>Copy and Paste</title>\n<script language="javascript" type="text/javascript">\n    function onCopy(event){\n        var selection = window.getSelection();\n        event.clipboardData.setData("text/html","<i>" + selection + "</i>");\n        event.preventDefault();\n    }\n\n    function onCut(event){\n            var selection = window.getSelection();\n            event.clipboardData.setData("text/html","<i>" + selection + "</i>");\n            var range = selection.getRangeAt(0);\n            range.extractContents();\n\n        event.preventDefault();\n    }\n\n    function onPaste(event){\n        var insertion = document.createElement("b");\n        insertion.innerHTML = event.clipboardData.getData("text/html");\n            var selection = window.getSelection();\n            var range = selection.getRangeAt(0);\n            range.insertNode(insertion);\n        event.preventDefault();\n    }\n<\/script>\n</head>\n<body onCopy="onCopy(event)"\n     onPaste="onPaste(event)"\n     onCut="onCut(event)">\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium\ndoloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore\nveritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\nvoluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur\nmagni dolores eos qui ratione voluptatem sequi nesciunt.</p>\n</body>\n</html>\n'})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);