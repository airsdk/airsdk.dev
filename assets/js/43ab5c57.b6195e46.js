"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[5581],{12258:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock","title":"Date and time example: Simple analog clock","description":"A simple analog clock example illustrates these two date and time concepts:","source":"@site/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock.md","sourceDirName":"development/core-actionscript-classes/working-with-dates-and-times","slug":"/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock","permalink":"/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-dates-and-times/date-and-time-example-simple-analog-clock.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Controlling time intervals","permalink":"/docs/development/core-actionscript-classes/working-with-dates-and-times/controlling-time-intervals"},"next":{"title":"Working with strings","permalink":"/docs/development/core-actionscript-classes/working-with-strings/"}}');var s=i(74848),c=i(28453);const a={sidebar_position:3},l="Date and time example: Simple analog clock",o={},r=[{value:"Defining the SimpleClock class",id:"defining-the-simpleclock-class",level:2},{value:"Creating the clock face",id:"creating-the-clock-face",level:2},{value:"Starting the timer",id:"starting-the-timer",level:2},{value:"Displaying the current time",id:"displaying-the-current-time",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"date-and-time-example-simple-analog-clock",children:"Date and time example: Simple analog clock"})}),"\n",(0,s.jsx)(n.p,{children:"A simple analog clock example illustrates these two date and time concepts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Getting the current date and time and extracting values for the hours,\nminutes, and seconds"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Using a Timer to set the pace of an application"}),"\n",(0,s.jsxs)(n.p,{children:["To get the application files for this sample, see\n",(0,s.jsx)(n.a,{href:"https://github.com/joshtynjala/flash-platform-as3-dev-guide-examples/releases/tag/original",children:(0,s.jsx)(n.em,{children:"FlashPlatformAS3DevGuideExamples.zip"})}),".\nThe SimpleClock application files can be found in the folder\nSamples/SimpleClock. The application consists of the following files:"]}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"File"})}),(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Description"})})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"SimpleClockApp.mxml"}),(0,s.jsx)("p",{children:"or"}),(0,s.jsx)("p",{children:"SimpleClockApp.fla"})]}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"The main application file in Flash (FLA) or Flex (MXML)."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/simpleclock/SimpleClock.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"The main application file."})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"com/example/programmingas3/simpleclock/AnalogClockFace.as"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"Draws a round clock face and hour, minute, and seconds hands based on the time."})})]})]})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"defining-the-simpleclock-class",children:"Defining the SimpleClock class"}),"\n",(0,s.jsxs)(n.p,{children:["The clock example is simple, but it's a good idea to organize even simple\napplications well so you could easily expand them in the future. To that end,\nthe SimpleClock application uses the ",(0,s.jsx)(n.code,{children:"SimpleClock"})," class to handle the startup and\ntime-keeping tasks, and then uses another class named AnalogClockFace to\nactually display the time."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is the code that defines and initializes the ",(0,s.jsx)(n.code,{children:"SimpleClock"})," class (note that\nin the Flash version, ",(0,s.jsx)(n.code,{children:"SimpleClock"})," extends the Sprite class instead):"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"public class SimpleClock extends UIComponent \n{ \n"})}),"\n",(0,s.jsx)(n.p,{children:"/**"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n     * The time display component. \n     */ \n"})}),"\n",(0,s.jsxs)(n.p,{children:["private var face",":AnalogClockFace",";"]}),"\n",(0,s.jsx)(n.p,{children:"/**"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n     * The Timer that acts like a heartbeat for the application. \n     */ \n"})}),"\n",(0,s.jsxs)(n.p,{children:["private var ticker",":Timer",";"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})}),"\n",(0,s.jsx)(n.p,{children:"The class has two important properties:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"face"})," property, which is an instance of the ",(0,s.jsx)(n.code,{children:"AnalogClockFace"})," class"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ticker"})," property, which is an instance of the ",(0,s.jsx)(n.code,{children:"Timer"})," class"]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SimpleClock"})," class uses a default constructor. The ",(0,s.jsx)(n.code,{children:"initClock()"})," method\ntakes care of the real setup work, creating the clock face and starting the\nTimer instance ticking."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"creating-the-clock-face",children:"Creating the clock face"}),"\n",(0,s.jsx)(n.p,{children:"The next lines in the SimpleClock code create the clock face that is used to\ndisplay the time:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"/** \n * Sets up a SimpleClock instance. \n */ \npublic function initClock(faceSize:Number = 200)  \n{ \n"})}),"\n",(0,s.jsx)(n.p,{children:"// creates the clock face and adds it to the display list\nface = new AnalogClockFace(Math.max(20, faceSize));\nface.init();\naddChild(face);"}),"\n",(0,s.jsx)(n.p,{children:"// draws the initial clock display\nface.draw();"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})}),"\n",(0,s.jsxs)(n.p,{children:["The size of the face can be passed in to the ",(0,s.jsx)(n.code,{children:"initClock()"})," method. If no\n",(0,s.jsx)(n.code,{children:"faceSize"})," value is passed, a default size of 200 pixels is used."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, the application initializes the face and then adds it to the display list\nusing\ntheaddChild()",(0,s.jsx)(n.code,{children:"method inherited from the DisplayObjectContainer class. Then it calls the"}),"AnalogClockFace.draw()`\nmethod to display the clock face once, showing the current time."]}),"\n",(0,s.jsx)(n.h2,{id:"starting-the-timer",children:"Starting the timer"}),"\n",(0,s.jsxs)(n.p,{children:["After creating the clock face, the ",(0,s.jsx)(n.code,{children:"initClock()"})," method sets up a timer:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"// creates a Timer that fires an event once per second \nticker = new Timer(1000);  \n\n// designates the onTick() method to handle Timer events \nticker.addEventListener(TimerEvent.TIMER, onTick); \n\n// starts the clock ticking \nticker.start();\n"})}),"\n",(0,s.jsxs)(n.p,{children:["First this method instantiates a Timer instance that will dispatch an event once\nper second (every 1000 milliseconds). Since no second ",(0,s.jsx)(n.code,{children:"repeatCount"})," parameter is\npassed to the ",(0,s.jsx)(n.code,{children:"Timer()"})," constructor, the Timer will keep repeating indefinitely."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"SimpleClock.onTick()"})," method will execute once per second when the ",(0,s.jsx)(n.code,{children:"timer"}),"\nevent is received:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"public function onTick(event:TimerEvent):void  \n{ \n"})}),"\n",(0,s.jsx)(n.p,{children:"// updates the clock display\nface.draw();"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"AnalogClockFace.draw()"})," method simply draws the clock face and hands."]}),"\n",(0,s.jsx)(n.h2,{id:"displaying-the-current-time",children:"Displaying the current time"}),"\n",(0,s.jsx)(n.p,{children:"Most of the code in the AnalogClockFace class involves setting up the clock\nface's display elements. When the AnalogClockFace is initialized, it draws a\ncircular outline, places a numeric text label at each hour mark, and then\ncreates three Shape objects, one each for the hour hand, the minute hand, and\nthe second hand on the clock."}),"\n",(0,s.jsxs)(n.p,{children:["Once the SimpleClock application is running, it calls the\n",(0,s.jsx)(n.code,{children:"AnalogClockFace.draw()"})," method each second, as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"/** \n * Called by the parent container when the display is being drawn. \n */ \npublic override function draw():void \n{ \n"})}),"\n",(0,s.jsx)(n.p,{children:"// stores the current date and time in an instance variable\ncurrentTime = new Date();\nshowTime(currentTime);"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This method saves the current time in a variable, so the time can't change in\nthe middle of drawing the clock hands. Then it calls the ",(0,s.jsx)(n.code,{children:"showTime()"})," method to\ndisplay the hands, as the following shows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-actionscript",children:"/** \n    * Displays the given Date/Time in that good old analog clock style. \n    */ \npublic function showTime(time:Date):void  \n{ \n"})}),"\n",(0,s.jsxs)(n.p,{children:["// gets the time values\nvar seconds",":uint"," = time.getSeconds();\nvar minutes",":uint"," = time.getMinutes();\nvar hours",":uint"," = time.getHours();"]}),"\n",(0,s.jsx)(n.p,{children:"// multiplies by 6 to get degrees\nthis.secondHand.rotation = 180 + (seconds * 6);\nthis.minuteHand.rotation = 180 + (minutes * 6);"}),"\n",(0,s.jsx)(n.p,{children:"// Multiply by 30 to get basic degrees, then\n// add up to 29.5 degrees (59 * 0.5)\n// to account for the minutes.\nthis.hourHand.rotation = 180 + (hours * 30) + (minutes * 0.5);"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"First, this method extracts the values for the hours, minutes, and seconds of\nthe current time. Then it uses these values to calculate the angle for each\nhand. Since the second hand makes a full rotation in 60 seconds, it rotates 6\ndegrees each second (360/60). The minute hand rotates the same amount each\nminute."}),"\n",(0,s.jsx)(n.p,{children:"The hour hand updates every minute, too, so it can show some progress as the\nminutes tick by. It rotates 30 degrees each hour (360/12), but it also rotates\nhalf a degree each minute (30 degrees divided by 60 minutes)."})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var t=i(96540);const s={},c=t.createContext(s);function a(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);