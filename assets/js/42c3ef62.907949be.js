"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[97314],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},67094:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously","title":"Asynchronous programming and the events generated by a FileStream object opened asynchronously","description":"When a file is opened asynchronously (using the openAsync() method), reading","source":"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously.md","sourceDirName":"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects","slug":"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"The read buffer and the bytesAvailable property of a FileStream object","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/the-read-buffer-and-the-bytesavailable-property-of-a-filestream-object"},"next":{"title":"Data formats, and choosing the read and write methods to use","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use"}}');var r=n(74848),s=n(28453);const a={sidebar_position:5},o="Asynchronous programming and the events generated by a FileStream object opened asynchronously",d={},l=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"asynchronous-programming-and-the-events-generated-by-a-filestream-object-opened-asynchronously",children:"Asynchronous programming and the events generated by a FileStream object opened asynchronously"})}),"\n",(0,r.jsxs)(t.p,{children:["When a file is opened asynchronously (using the ",(0,r.jsx)(t.code,{children:"openAsync()"})," method), reading\nand writing files are done asynchronously. As data is read into the read buffer\nand as output data is being written, other ActionScript code can execute."]}),"\n",(0,r.jsx)(t.p,{children:"This means that you need to register for events generated by the FileStream\nobject opened asynchronously."}),"\n",(0,r.jsxs)(t.p,{children:["By registering for the ",(0,r.jsx)(t.code,{children:"progress"})," event, you can be notified as new data becomes\navailable for reading, as in the following code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(ProgressEvent.PROGRESS, progressHandler);\nmyFileStream.openAsync(myFile, FileMode.READ);\nvar str:String = "";\n\nfunction progressHandler(event:ProgressEvent):void\n{\n\tstr += myFileStream.readMultiByte(myFileStream.bytesAvailable, "iso-8859-1");\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["You can read the entire data by registering for the ",(0,r.jsx)(t.code,{children:"complete"})," event, as in the\nfollowing code:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(Event.COMPLETE, completed);\nmyFileStream.openAsync(myFile, FileMode.READ);\nvar str:String = "";\nfunction completeHandler(event:Event):void\n{\n\tstr = myFileStream.readMultiByte(myFileStream.bytesAvailable, "iso-8859-1");\n}\n'})}),"\n",(0,r.jsxs)(t.p,{children:["In much the same way that input data is buffered to enable asynchronous reading,\ndata that you write on an asynchronous stream is buffered and written to the\nfile asynchronously. As data is written to a file, the FileStream object\nperiodically dispatches an ",(0,r.jsx)(t.code,{children:"OutputProgressEvent"})," object. An\n",(0,r.jsx)(t.code,{children:"OutputProgressEvent"})," object includes a ",(0,r.jsx)(t.code,{children:"bytesPending"})," property that is set to\nthe number of bytes remaining to be written. You can register for the\n",(0,r.jsx)(t.code,{children:"outputProgress"})," event to be notified as this buffer is actually written to the\nfile, perhaps in order to display a progress dialog. However, in general, it is\nnot necessary to do so. In particular, you may call the ",(0,r.jsx)(t.code,{children:"close()"})," method without\nconcern for the unwritten bytes. The FileStream object will continue writing\ndata and the ",(0,r.jsx)(t.code,{children:"close"})," event will be delivered after the final byte is written to\nthe file and the underlying file is closed."]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);