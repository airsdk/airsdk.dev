"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[24858],{28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(96540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}},43320:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"development/display/using-the-drawing-api/animating-with-the-drawing-api","title":"Animating with the drawing API","description":"One advantage of creating content with the drawing API is that you are not limited to positioning your content once. What you draw can be modified by maintaining and modifying the variables you use to draw. You can convey animation by changing variables and redrawing, either over a period of frames or with a timer.","source":"@site/docs/development/display/using-the-drawing-api/animating-with-the-drawing-api.md","sourceDirName":"development/display/using-the-drawing-api","slug":"/development/display/using-the-drawing-api/animating-with-the-drawing-api","permalink":"/docs/development/display/using-the-drawing-api/animating-with-the-drawing-api","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/using-the-drawing-api/animating-with-the-drawing-api.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Animating with the drawing API","sidebar_position":8},"sidebar":"mainSidebar","previous":{"title":"Using the Math class with drawing methods","permalink":"/docs/development/display/using-the-drawing-api/using-the-math-class-with-drawing-methods"},"next":{"title":"Advanced use of the drawing API","permalink":"/docs/development/display/using-the-drawing-api/advanced-use-of-the-drawing-api"}}');var a=i(74848),r=i(28453);const s={title:"Animating with the drawing API",sidebar_position:8},d=void 0,o={},c=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"One advantage of creating content with the drawing API is that you are not limited to positioning your content once. What you draw can be modified by maintaining and modifying the variables you use to draw. You can convey animation by changing variables and redrawing, either over a period of frames or with a timer."}),"\n",(0,a.jsxs)(n.p,{children:["For example, the following code changes the display with each passing frame (by listening to the ",(0,a.jsx)(n.code,{children:"Event.ENTER_FRAME"})," event), incrementing the current degree count, and directs the graphics object to clear and redraw with the updated position."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-actionscript",children:"stage.frameRate = 31;\n\nvar currentDegrees:Number = 0;\nvar radius:Number = 40;\nvar satelliteRadius:Number = 6;\n\nvar container:Sprite = new Sprite();\ncontainer.x = stage.stageWidth / 2;\ncontainer.y = stage.stageHeight / 2;\naddChild(container);\nvar satellite:Shape = new Shape();\ncontainer.addChild(satellite);\n\naddEventListener(Event.ENTER_FRAME, doEveryFrame);\n\nfunction doEveryFrame(event:Event):void\n{\n"})}),"\n",(0,a.jsxs)(n.p,{children:["currentDegrees += 4;\nvar radians",":Number"," = getRadians(currentDegrees);\nvar posX",":Number"," = Math.sin(radians) * radius;\nvar posY",":Number"," = Math.cos(radians) * radius;\nsatellite.graphics.clear();\nsatellite.graphics.beginFill(0);\nsatellite.graphics.drawCircle(posX, posY, satelliteRadius);"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\n}\n\nfunction getRadians(degrees:Number):Number\n{\n"})}),"\n",(0,a.jsx)(n.p,{children:"return degrees * Math.PI / 180;"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To produce a significantly different result, you can experiment by modifying the initial seed variables at the beginning of the code, ",(0,a.jsx)(n.code,{children:"currentDegrees"})," , ",(0,a.jsx)(n.code,{children:"radius"})," , and ",(0,a.jsx)(n.code,{children:"satelliteRadius"})," . For example, try shrinking the radius variable and/or increasing the totalSatellites variable. This is only one example of how the drawing API can create a visual display whose complexity conceals the simplicity of its creation."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);