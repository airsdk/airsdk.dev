"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[6502],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>d});var a=t(96540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}},42441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"development/user-interaction/drag-and-drop-in-air/basics-of-drag-and-drop-in-air","title":"Basics of drag and drop in AIR","description":"For a quick explanation and code examples of using drag and drop in an AIR","source":"@site/docs/development/user-interaction/drag-and-drop-in-air/basics-of-drag-and-drop-in-air.md","sourceDirName":"development/user-interaction/drag-and-drop-in-air","slug":"/development/user-interaction/drag-and-drop-in-air/basics-of-drag-and-drop-in-air","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/basics-of-drag-and-drop-in-air","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/basics-of-drag-and-drop-in-air.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Drag and drop in AIR","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/"},"next":{"title":"Supporting the drag-out gesture","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/supporting-the-drag-out-gesture"}}');var r=t(74848),i=t(28453);const s={sidebar_position:1},d="Basics of drag and drop in AIR",o={},c=[{value:"Drag-and-drop gesture stages",id:"drag-and-drop-gesture-stages",level:4},{value:"The Clipboard object",id:"the-clipboard-object",level:4},{value:"Working with the Flex framework",id:"working-with-the-flex-framework",level:4}];function l(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h4:"h4",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basics-of-drag-and-drop-in-air",children:"Basics of drag and drop in AIR"})}),"\n",(0,r.jsx)(n.p,{children:"For a quick explanation and code examples of using drag and drop in an AIR\napplication, see the following quick start articles on the Adobe Developer\nConnection:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://web.archive.org/web/20150221112531/http://www.adobe.com/devnet/air/flex/quickstart/articles/scrappy_copy_paste.html",children:"Supporting drag-and-drop and copy-and-paste"}),"\n(Flex)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://web.archive.org/web/20150221035757/http://www.adobe.com/devnet/air/flash/quickstart/articles/scrappy_copy_paste.html",children:"Supporting drag-and-drop and copy-and-paste"}),"\n(Flash)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The drag-and-drop API contains the following classes."}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:(0,r.jsx)("p",{children:"Package"})}),(0,r.jsx)("th",{children:(0,r.jsx)("p",{children:"Classes"})})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"flash.desktop"})}),(0,r.jsxs)("td",{children:[(0,r.jsx)("div",{children:(0,r.jsxs)("ul",{class:"incremental",children:[(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/NativeDragManager.html",children:"NativeDragManager"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/NativeDragOptions.html",children:"NativeDragOptions"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/Clipboard.html",children:"Clipboard"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/air/desktop/URLFilePromise.html",children:"URLFilePromise"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/IFilePromise.html",children:"IFilePromise"})})})]})}),(0,r.jsx)("p",{children:"Constants used with the drag-and-drop API are defined in the\nfollowing classes:"}),(0,r.jsx)("div",{children:(0,r.jsxs)("ul",{class:"incremental",children:[(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/NativeDragActions.html",children:"NativeDragActions"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/ClipboardFormats.html",children:"ClipboardFormat"})})}),(0,r.jsx)("li",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/desktop/ClipboardTransferMode.html",children:"ClipboardTransferModes"})})})]})})]})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:"flash.events"})}),(0,r.jsx)("td",{children:(0,r.jsx)("p",{children:(0,r.jsx)("a",{href:"https://airsdk.dev/reference/actionscript/3.0/flash/events/NativeDragEvent.html",children:"NativeDragEvent"})})})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"drag-and-drop-gesture-stages",children:"Drag-and-drop gesture stages"}),"\n",(0,r.jsx)(n.p,{children:"The drag-and-drop gesture has three stages:"}),"\n",(0,r.jsxs)(n.p,{children:["Initiation",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"A user initiates a drag-and-drop operation by dragging from a component, or an\nitem in a component, while holding down the mouse button."})," The component that is\nthe source of the dragged item is typically designated as the drag initiator and\ndispatches ",(0,r.jsx)(n.code,{children:"nativeDragStart"})," and ",(0,r.jsx)(n.code,{children:"nativeDragComplete"})," events. An Adobe AIR\napplication starts a drag operation by calling the ",(0,r.jsx)(n.code,{children:"NativeDragManager.doDrag()"}),"\nmethod in response to a ",(0,r.jsx)(n.code,{children:"mouseDown"})," or ",(0,r.jsx)(n.code,{children:"mouseMove"})," event."]}),"\n",(0,r.jsxs)(n.p,{children:["If the drag operation is initiated from outside an AIR application, there is no\ninitiator object to dispatch ",(0,r.jsx)(n.code,{children:"nativeDragStart"})," or ",(0,r.jsx)(n.code,{children:"nativeDragComplete"})," events."]}),"\n",(0,r.jsxs)(n.p,{children:["Dragging",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"While holding down the mouse button, the user moves the mouse cursor to another\ncomponent, application, or to the desktop."})," As long as the drag is underway, the\ninitiator object dispatches ",(0,r.jsx)(n.code,{children:"nativeDragUpdate"})," events. (However, this event is\nnot dispatched in AIR for Linux.) When the user moves the mouse over a possible\ndrop target in an AIR application, the drop target dispatches a\n",(0,r.jsx)(n.code,{children:"nativeDragEnter"})," event. The event handler can inspect the event object to\ndetermine whether the dragged data is available in a format that the target\naccepts and, if so, let the user drop the data onto it by calling the\n",(0,r.jsx)(n.code,{children:"NativeDragManager.acceptDragDrop()"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["As long as the drag gesture remains over an interactive object, that object\ndispatches ",(0,r.jsx)(n.code,{children:"nativeDragOver"})," events. When the drag gesture leaves the interactive\nobject, it dispatches a ",(0,r.jsx)(n.code,{children:"nativeDragExit"})," event."]}),"\n",(0,r.jsxs)(n.p,{children:["Drop",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.em,{children:"The user releases the mouse over an eligible drop target."})," If the target is an\nAIR application or component, then the target object dispatches a\n",(0,r.jsx)(n.code,{children:"nativeDragDrop"})," event. The event handler can access the transferred data from\nthe event object. If the target is outside AIR, the operating system or another\napplication handles the drop. In both cases, the initiating object dispatches a\n",(0,r.jsx)(n.code,{children:"nativeDragComplete"})," event (if the drag started from within AIR)."]}),"\n",(0,r.jsx)(n.p,{children:"The NativeDragManager class controls both drag-in and drag-out gestures. All the\nmembers of the NativeDragManager class are static, do not create an instance of\nthis class."}),"\n",(0,r.jsx)(n.h4,{id:"the-clipboard-object",children:"The Clipboard object"}),"\n",(0,r.jsx)(n.p,{children:"Data that is dragged into or out of an application or component is contained in\na Clipboard object. A single Clipboard object can make available different\nrepresentations of the same information to increase the likelihood that another\napplication can understand and use the data. For example, an image could be\nincluded as image data, a serialized Bitmap object, and as a file. Rendering of\nthe data in a format can be deferred to a rendering function that is not called\nuntil the data is read."}),"\n",(0,r.jsxs)(n.p,{children:["Once a drag gesture has started, the Clipboard object can only be accessed from\nwithin an event handler for the ",(0,r.jsx)(n.code,{children:"nativeDragEnter"}),", ",(0,r.jsx)(n.code,{children:"nativeDragOver"}),", and\n",(0,r.jsx)(n.code,{children:"nativeDragDrop"})," events. After the drag gesture has ended, the Clipboard object\ncannot be read or reused."]}),"\n",(0,r.jsx)(n.p,{children:"An application object can be transferred as a reference and as a serialized\nobject. References are only valid within the originating application. Serialized\nobject transfers are valid between AIR applications, but can only be used with\nobjects that remain valid when serialized and deserialized. Objects that are\nserialized are converted into the Action Message Format for ActionScript 3\n(AMF3), a string-based data-transfer format."}),"\n",(0,r.jsx)(n.h4,{id:"working-with-the-flex-framework",children:"Working with the Flex framework"}),"\n",(0,r.jsx)(n.p,{children:"In most cases, it is better to use the Adobe\xae Flex\u2122 drag-and-drop API when\nbuilding Flex applications. The Flex framework provides an equivalent feature\nset when a Flex application is run in AIR (it uses the AIR NativeDragManager\ninternally). Flex also maintains a more limited feature set when an application\nor component is running within the more restrictive browser environment. AIR\nclasses cannot be used in components or applications that run outside the AIR\nrun-time environment."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);