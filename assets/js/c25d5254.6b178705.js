"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[82721],{17557:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"development/rich-media-content/working-with-sound/working-with-sound-metadata","title":"Working with sound metadata","description":"Sound files that use the mp3 format can contain additional data about the sound","source":"@site/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata.md","sourceDirName":"development/rich-media-content/working-with-sound","slug":"/development/rich-media-content/working-with-sound/working-with-sound-metadata","permalink":"/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/rich-media-content/working-with-sound/working-with-sound-metadata.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"mainSidebar","previous":{"title":"Controlling sound volume and panning","permalink":"/docs/development/rich-media-content/working-with-sound/controlling-sound-volume-and-panning"},"next":{"title":"Accessing raw sound data","permalink":"/docs/development/rich-media-content/working-with-sound/accessing-raw-sound-data"}}');var i=t(74848),d=t(28453);const a={sidebar_position:10},s="Working with sound metadata",r={},c=[];function h(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"working-with-sound-metadata",children:"Working with sound metadata"})}),"\n",(0,i.jsx)(n.p,{children:"Sound files that use the mp3 format can contain additional data about the sound\nin the form of ID3 tags."}),"\n",(0,i.jsxs)(n.p,{children:["Not every mp3 file contains ID3 metadata. When a Sound object loads an mp3 sound\nfile, it dispatches an ",(0,i.jsx)(n.code,{children:"Event.ID3"})," event if the sound file contains ID3\nmetadata. To prevent run-time errors, your application should wait to receive\nthe ",(0,i.jsx)(n.code,{children:"Event.ID3"})," event before accessing the ",(0,i.jsx)(n.code,{children:"Sound.id3"})," property for a loaded\nsound."]}),"\n",(0,i.jsx)(n.p,{children:"The following code shows how to recognize when the ID3 metadata for a sound file\nhas been loaded:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'import flash.events.Event;\nimport flash.media.ID3Info;\nimport flash.media.Sound;\n\nvar s:Sound = new Sound();\ns.addEventListener(Event.ID3, onID3InfoReceived);\ns.load("mySound.mp3");\n\nfunction onID3InfoReceived(event:Event)\n{\n\tvar id3:ID3Info = event.target.id3;\n\n\ttrace("Received ID3 Info:");\n\tfor (var propName:String in id3)\n\t{\n\t\ttrace(propName + " = " + id3[propName]);\n\t}\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This code starts by creating a Sound object and telling it to listen for the\n",(0,i.jsx)(n.code,{children:"Event.ID3"})," event. When the sound file's ID3 metadata is loaded, the\n",(0,i.jsx)(n.code,{children:"onID3InfoReceived()"})," method is called. The target of the Event object that is\npassed to the ",(0,i.jsx)(n.code,{children:"onID3InfoReceived()"})," method is the original Sound object, so the\nmethod then gets the Sound object's ",(0,i.jsx)(n.code,{children:"id3"})," property and then iterates through all\nof its named properties to trace their values."]})]})}function l(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const i={},d=o.createContext(i);function a(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);