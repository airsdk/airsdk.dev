"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[43527],{28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(96540);const i={},s=a.createContext(i);function r(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:t},e.children)}},38654:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use","title":"Data formats, and choosing the read and write methods to use","description":"Every file is a set of bytes on a disk. In ActionScript, the data from a file","source":"@site/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use.md","sourceDirName":"development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects","slug":"/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/data-formats-and-choosing-the-read-and-write-methods-to-use.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"Asynchronous programming and the events generated by a FileStream object opened asynchronously","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/working-with-filestream-objects/asynchronous-programming-and-the events-generated-by-a-filestream-object-opened-asynchronously"},"next":{"title":"Using the load() and save() methods","permalink":"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/using-the-load-and-save-methods"}}');var i=n(74848),s=n(28453);const r={sidebar_position:6},o="Data formats, and choosing the read and write methods to use",d={},l=[];function h(e){const t={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"data-formats-and-choosing-the-read-and-write-methods-to-use",children:"Data formats, and choosing the read and write methods to use"})}),"\n",(0,i.jsxs)(t.p,{children:["Every file is a set of bytes on a disk. In ActionScript, the data from a file\ncan always be represented as a ByteArray. For example, the following code reads\nthe data from a file into a ByteArray object named ",(0,i.jsx)(t.code,{children:"bytes"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(Event.COMPLETE, completeHandler);\nmyFileStream.openAsync(myFile, FileMode.READ);\nvar bytes:ByteArray = new ByteArray();\n\nfunction completeHandler(event:Event):void\n{\n\tmyFileStream.readBytes(bytes, 0, myFileStream.bytesAvailable);\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["Similarly, the following code writes data from a ByteArray named ",(0,i.jsx)(t.code,{children:"bytes"})," to a\nfile:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.open(myFile, FileMode.WRITE);\nmyFileStream.writeBytes(bytes, 0, bytes.length);\n'})}),"\n",(0,i.jsx)(t.p,{children:"However, often you do not want to store the data in an ActionScript ByteArray\nobject. And often the data file is in a specified file format."}),"\n",(0,i.jsx)(t.p,{children:"For example, the data in the file may be in a text file format, and you may want\nto represent such data in a String object."}),"\n",(0,i.jsxs)(t.p,{children:["For this reason, the FileStream class includes read and write methods for\nreading and writing data to and from types other than ByteArray objects. For\nexample, the ",(0,i.jsx)(t.code,{children:"readMultiByte()"})," method lets you read data from a file and store\nit to a string, as in the following code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'var myFile:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");\nvar myFileStream:FileStream = new FileStream();\nmyFileStream.addEventListener(Event.COMPLETE, completed);\nmyFileStream.openAsync(myFile, FileMode.READ);\nvar str:String = "";\n\nfunction completeHandler(event:Event):void\n{\n\tstr = myFileStream.readMultiByte(myFileStream.bytesAvailable, "iso-8859-1");\n}\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The second parameter of the ",(0,i.jsx)(t.code,{children:"readMultiByte()"}),' method specifies the text format\nthat ActionScript uses to interpret the data ("iso-8859-1" in the example).\nAdobe AIR supports common character set encodings (see\n',(0,i.jsx)(t.a,{href:"https://airsdk.dev/reference/actionscript/3.0/charset-codes.html",children:"Supported character sets"}),")."]}),"\n",(0,i.jsxs)(t.p,{children:["The FileStream class also includes the ",(0,i.jsx)(t.code,{children:"readUTFBytes()"})," method, which reads data\nfrom the read buffer into a string using the UTF-8 character set. Since\ncharacters in the UTF-8 character set are of variable length, do not use\n",(0,i.jsx)(t.code,{children:"readUTFBytes()"})," in a method that responds to the ",(0,i.jsx)(t.code,{children:"progress"})," event, since the\ndata at the end of the read buffer may represent an incomplete character. (This\nis also true when using the ",(0,i.jsx)(t.code,{children:"readMultiByte()"})," method with a variable-length\ncharacter encoding.) For this reason, read the entire set of data when the\nFileStream object dispatches the ",(0,i.jsx)(t.code,{children:"complete"})," event."]}),"\n",(0,i.jsxs)(t.p,{children:["There are also similar write methods, ",(0,i.jsx)(t.code,{children:"writeMultiByte()"})," and ",(0,i.jsx)(t.code,{children:"writeUTFBytes()"}),",\nfor working with String objects and text files."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"readUTF()"})," and the ",(0,i.jsx)(t.code,{children:"writeUTF()"})," methods (not to be confused with\n",(0,i.jsx)(t.code,{children:"readUTFBytes()"})," and ",(0,i.jsx)(t.code,{children:"writeUTFBytes()"}),") also read and write the text data to a\nfile, but they assume that the text data is preceded by data specifying the\nlength of the text data, which is not a common practice in standard text files."]}),"\n",(0,i.jsx)(t.p,{children:'Some UTF-encoded text files begin with a "UTF-BOM" (byte order mark) character\nthat defines the endianness as well as the encoding format (such as UTF-16 or\nUTF-32).'}),"\n",(0,i.jsxs)(t.p,{children:["For an example of reading and writing to a text file, see\n",(0,i.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-an-xml-file-into-an-xml-object",children:"Example: Reading an XML file into an XML object"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"readObject()"})," and ",(0,i.jsx)(t.code,{children:"writeObject()"})," are convenient ways to store and retrieve\ndata for complex ActionScript objects. The data is encoded in AMF (ActionScript\nMessage Format). Adobe AIR, Flash Player, Flash Media Server, and Flex Data\nServices include APIs for working with data in this format."]}),"\n",(0,i.jsxs)(t.p,{children:["There are some other read and write methods (such as ",(0,i.jsx)(t.code,{children:"readDouble()"})," and\n",(0,i.jsx)(t.code,{children:"writeDouble()"}),"). However, if you use these, make sure that the file format\nmatches the formats of the data defined by these methods."]}),"\n",(0,i.jsxs)(t.p,{children:["File formats are often more complex than simple text formats. For example, an\nMP3 file includes compressed data that can only be interpreted with the\ndecompression and decoding algorithms specific to MP3 files. MP3 files also may\ninclude ID3 tags that contain meta tag information about the file (such as the\ntitle and artist for a song). There are multiple versions of the ID3 format, but\nthe simplest (ID3 version 1) is discussed in the\n",(0,i.jsx)(t.a,{href:"/docs/development/files-and-data/working-with-the-file-system/using-the-air-file-system-api/reading-and-writing-files/example-reading-and-writing-data-with-random-access",children:"Example: Reading and writing data with random access"}),"\nsection."]}),"\n",(0,i.jsx)(t.p,{children:"Other files formats (for images, databases, application documents, and so on)\nhave different structures, and to work with their data in ActionScript, you must\nunderstand how the data is structured."})]})}function c(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);