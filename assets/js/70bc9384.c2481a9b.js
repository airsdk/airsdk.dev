"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[54991],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(96540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}},83516:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/user-interaction/working-with-menus/handling-menu-events","title":"Handling menu events","description":"A menu dispatches events when the user selects the menu or when the user selects","source":"@site/docs/development/user-interaction/working-with-menus/handling-menu-events.md","sourceDirName":"development/user-interaction/working-with-menus","slug":"/development/user-interaction/working-with-menus/handling-menu-events","permalink":"/docs/development/user-interaction/working-with-menus/handling-menu-events","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/working-with-menus/handling-menu-events.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"mainSidebar","previous":{"title":"Displaying pop-up native menus (AIR)","permalink":"/docs/development/user-interaction/working-with-menus/displaying-pop-up-native-menus-air"},"next":{"title":"Native menu example: Window and application menu (AIR)","permalink":"/docs/development/user-interaction/working-with-menus/native-menu-example-window-and-application-menu-air"}}');var s=t(74848),r=t(28453);const o={sidebar_position:5},d="Handling menu events",a={},l=[{value:"Events summary for menu classes",id:"events-summary-for-menu-classes",level:2},{value:"Select menu events",id:"select-menu-events",level:2},{value:"Displaying menu events",id:"displaying-menu-events",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"handling-menu-events",children:"Handling menu events"})}),"\n",(0,s.jsx)(n.p,{children:"A menu dispatches events when the user selects the menu or when the user selects\na menu item."}),"\n",(0,s.jsx)(n.h2,{id:"events-summary-for-menu-classes",children:"Events summary for menu classes"}),"\n",(0,s.jsx)(n.p,{children:"Add event listeners to menus or individual items to handle menu events."}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Object"})}),(0,s.jsx)("th",{children:(0,s.jsx)("p",{children:"Events dispatched"})})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"NativeMenu (AIR)"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"Event.PREPARING (Adobe AIR 2.6 and later)"}),(0,s.jsx)("p",{children:"Event.DISPLAYING"}),(0,s.jsx)("p",{children:"Event.SELECT (propagated from child items and submenus)"})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"NativeMenuItem (AIR)"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"Event.PREPARING (Adobe AIR 2.6 and later)"}),(0,s.jsx)("p",{children:"Event.SELECT"}),(0,s.jsx)("p",{children:"Event.DISPLAYING (propagated from parent menu)"})]})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"ContextMenu"})}),(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"ContextMenuEvent.MENU_SELECT"})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("p",{children:"ContextMenuItem"})}),(0,s.jsxs)("td",{children:[(0,s.jsx)("p",{children:"ContextMenuEvent.MENU_ITEM_SELECT"}),(0,s.jsx)("p",{children:"Event.SELECT (AIR)"})]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"select-menu-events",children:"Select menu events"}),"\n",(0,s.jsxs)(n.p,{children:["To handle a click on a menu item, add an event listener for the ",(0,s.jsx)(n.code,{children:"select"})," event\nto the NativeMenuItem object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'var menuCommandX:NativeMenuItem = new NativeMenuItem("Command X");\nmenuCommandX.addEventListener(Event.SELECT, doCommandX)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Because ",(0,s.jsx)(n.code,{children:"select"})," events bubble up to the containing menus, you can also listen\nfor select events on a parent menu. When listening at the menu level, you can\nuse the event object ",(0,s.jsx)(n.code,{children:"target"})," property to determine which menu command was\nselected. The following example traces the label of the selected command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'var colorMenuItem:NativeMenuItem = new NativeMenuItem("Choose a color");\nvar colorMenu:NativeMenu = new NativeMenu();\ncolorMenuItem.submenu = colorMenu;\n\nvar red:NativeMenuItem = new NativeMenuItem("Red");\nvar green:NativeMenuItem = new NativeMenuItem("Green");\nvar blue:NativeMenuItem = new NativeMenuItem("Blue");\ncolorMenu.addItem(red);\ncolorMenu.addItem(green);\ncolorMenu.addItem(blue);\n\nif(NativeApplication.supportsMenu) {\n\tNativeApplication.nativeApplication.menu.addItem(colorMenuItem);\n\tNativeApplication.nativeApplication.menu.addEventListener(Event.SELECT, colorChoice);\n} else if (NativeWindow.supportsMenu) {\n\tvar windowMenu:NativeMenu = new NativeMenu();\n\tthis.stage.nativeWindow.menu = windowMenu;\n\twindowMenu.addItem(colorMenuItem);\n\twindowMenu.addEventListener(Event.SELECT, colorChoice);\n}\n\nfunction colorChoice(event:Event):void {\n\tvar menuItem:NativeMenuItem = event.target as NativeMenuItem;\n\ttrace(menuItem.label + " has been selected");\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you are using the ContextMenuItem class, you can listen for either the\n",(0,s.jsx)(n.code,{children:"select"})," event or the ",(0,s.jsx)(n.code,{children:"menuItemSelect"})," event. The ",(0,s.jsx)(n.code,{children:"menuItemSelect"})," event gives\nyou additional information about the object owning the context menu, but does\nnot bubble up to the containing menus."]}),"\n",(0,s.jsx)(n.h2,{id:"displaying-menu-events",children:"Displaying menu events"}),"\n",(0,s.jsxs)(n.p,{children:["To handle the opening of a menu, you can add a listener for the ",(0,s.jsx)(n.code,{children:"displaying"}),"\nevent, which is dispatched before a menu is displayed. You can use the\ndisplaying event to update the menu, for example by adding or removing items, or\nby updating the enabled or checked states of individual items. You can also\nlisten for the ",(0,s.jsx)(n.code,{children:"menuSelect"})," event from a ContextMenu object."]}),"\n",(0,s.jsxs)(n.p,{children:["In AIR 2.6 and later, you can use the ",(0,s.jsx)(n.code,{children:"preparing"})," event to update a menu in\nresponse to either displaying a menu or selecting an item with a keyboard\nshortcut."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);