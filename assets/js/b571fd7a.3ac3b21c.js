"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[45418],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var o=t(96540);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}},50337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations","title":"Using synchronous database operations","description":"There is little difference in the actual code that you use to execute and","source":"@site/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations.md","sourceDirName":"development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations","slug":"/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/using-synchronous-database-operations.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Using synchronous and asynchronous database operations","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/"},"next":{"title":"Understanding the asynchronous execution model","permalink":"/docs/development/files-and-data/working-with-local-sql-databases-in-air/using-synchronous-and-asynchronous-database-operations/understanding-the-asynchronous-execution-model"}}');var s=t(74848),r=t(28453);const a={sidebar_position:1},i="Using synchronous database operations",c={},d=[{value:"Writing code for synchronous operations",id:"writing-code-for-synchronous-operations",level:2},{value:"Executing an operation that depends on another operation",id:"executing-an-operation-that-depends-on-another-operation",level:2},{value:"Handling errors with synchronous execution",id:"handling-errors-with-synchronous-execution",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"using-synchronous-database-operations",children:"Using synchronous database operations"})}),"\n",(0,s.jsxs)(n.p,{children:["There is little difference in the actual code that you use to execute and\nrespond to operations when using synchronous execution, compared to the code for\nasynchronous execution mode. The key differences between the two approaches fall\ninto two areas. The first is executing an operation that depends on another\noperation (such as ",(0,s.jsx)(n.code,{children:"SELECT"})," result rows or the primary key of the row added by\nan ",(0,s.jsx)(n.code,{children:"INSERT"})," statement). The second area of difference is in handling errors."]}),"\n",(0,s.jsx)(n.h2,{id:"writing-code-for-synchronous-operations",children:"Writing code for synchronous operations"}),"\n",(0,s.jsxs)(n.p,{children:["The key difference between synchronous and asynchronous execution is that in\nsynchronous mode you write the code as a single series of steps. In contrast, in\nasynchronous code you register event listeners and often divide operations among\nlistener methods. When a database is\n",(0,s.jsx)(n.a,{href:"https://airsdk.dev/reference/actionscript/3.0/flash/data/SQLConnection.html#open()",children:"connected in synchronous execution mode"}),",\nyou can execute a series of database operations in succession within a single\ncode block. The following example demonstrates this technique:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'var conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\n// open the database\nconn.open(dbFile, OpenMode.UPDATE);\n\n// start a transaction\nconn.begin();\n\n// add the customer record to the database\nvar insertCustomer:SQLStatement = new SQLStatement();\ninsertCustomer.sqlConnection = conn;\ninsertCustomer.text =\n"INSERT INTO customers (firstName, lastName) " +\n"VALUES (\'Bob\', \'Jones\')";\ninsertCustomer.execute();\n\nvar customerId:Number = insertCustomer.getResult().lastInsertRowID;\n\n// add a related phone number record for the customer\nvar insertPhoneNumber:SQLStatement = new SQLStatement();\ninsertPhoneNumber.sqlConnection = conn;\ninsertPhoneNumber.text =\n"INSERT INTO customerPhoneNumbers (customerId, number) " +\n"VALUES (:customerId, \'800-555-1234\')";\ninsertPhoneNumber.parameters[":customerId"] = customerId;\ninsertPhoneNumber.execute();\n\n// commit the transaction\nconn.commit();\n'})}),"\n",(0,s.jsx)(n.p,{children:"As you can see, you call the same methods to perform database operations whether\nyou're using synchronous or asynchronous execution. The key differences between\nthe two approaches are executing an operation that depends on another operation\nand handling errors."}),"\n",(0,s.jsx)(n.h2,{id:"executing-an-operation-that-depends-on-another-operation",children:"Executing an operation that depends on another operation"}),"\n",(0,s.jsxs)(n.p,{children:["When you're using synchronous execution mode, you don't need to write code that\nlistens for an event to determine when an operation completes. Instead, you can\nassume that if an operation in one line of code completes successfully,\nexecution continues with the next line of code. Consequently, to perform an\noperation that depends on the success of another operation, simply write the\ndependent code immediately following the operation on which it depends. For\ninstance, to code an application to begin a transaction, execute an ",(0,s.jsx)(n.code,{children:"INSERT"}),"\nstatement, retrieve the primary key of the inserted row, insert that primary key\ninto another row of a different table, and finally commit the transaction, the\ncode can all be written as a series of statements. The following example\ndemonstrates these operations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'var conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\n// open the database\nconn.open(dbFile, SQLMode.UPDATE);\n\n// start a transaction\nconn.begin();\n\n// add the customer record to the database\nvar insertCustomer:SQLStatement = new SQLStatement();\ninsertCustomer.sqlConnection = conn;\ninsertCustomer.text =\n"INSERT INTO customers (firstName, lastName) " +\n"VALUES (\'Bob\', \'Jones\')";\ninsertCustomer.execute();\n\nvar customerId:Number = insertCustomer.getResult().lastInsertRowID;\n\n// add a related phone number record for the customer\nvar insertPhoneNumber:SQLStatement = new SQLStatement();\ninsertPhoneNumber.sqlConnection = conn;\ninsertPhoneNumber.text =\n"INSERT INTO customerPhoneNumbers (customerId, number) " +\n"VALUES (:customerId, \'800-555-1234\')";\ninsertPhoneNumber.parameters[":customerId"] = customerId;\ninsertPhoneNumber.execute();\n\n// commit the transaction\nconn.commit();\n'})}),"\n",(0,s.jsx)(n.h2,{id:"handling-errors-with-synchronous-execution",children:"Handling errors with synchronous execution"}),"\n",(0,s.jsxs)(n.p,{children:["In synchronous execution mode, you don't listen for an error event to determine\nthat an operation has failed. Instead, you surround any code that could trigger\nerrors in a set of ",(0,s.jsx)(n.code,{children:"try..catch..finally"})," code blocks. You wrap the\nerror-throwing code in the ",(0,s.jsx)(n.code,{children:"try"})," block. Write the actions to perform in response\nto each type of error in separate ",(0,s.jsx)(n.code,{children:"catch"})," blocks. Place any code that you want\nto always execute regardless of success or failure (for example, closing a\ndatabase connection that's no longer needed) in a ",(0,s.jsx)(n.code,{children:"finally"})," block. The following\nexample demonstrates using ",(0,s.jsx)(n.code,{children:"try..catch..finally"})," blocks for error handling. It\nbuilds on the previous example by adding error handling code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'var conn:SQLConnection = new SQLConnection();\n\n// The database file is in the application storage directory\nvar folder:File = File.applicationStorageDirectory;\nvar dbFile:File = folder.resolvePath("DBSample.db");\n\n// open the database\nconn.open(dbFile, SQLMode.UPDATE);\n\n// start a transaction\nconn.begin();\n\ntry\n{\n\t// add the customer record to the database\n\tvar insertCustomer:SQLStatement = new SQLStatement();\n\tinsertCustomer.sqlConnection = conn;\n\tinsertCustomer.text =\n\t\t"INSERT INTO customers (firstName, lastName)" +\n\t\t"VALUES (\'Bob\', \'Jones\')";\n\n\tinsertCustomer.execute();\n\n\tvar customerId:Number = insertCustomer.getResult().lastInsertRowID;\n\n\t// add a related phone number record for the customer\n\tvar insertPhoneNumber:SQLStatement = new SQLStatement();\n\tinsertPhoneNumber.sqlConnection = conn;\n\tinsertPhoneNumber.text =\n\t\t"INSERT INTO customerPhoneNumbers (customerId, number)" +\n\t\t"VALUES (:customerId, \'800-555-1234\')";\n\tinsertPhoneNumber.parameters[":customerId"] = customerId;\n\n\tinsertPhoneNumber.execute();\n\n\t// if we\'ve gotten to this point without errors, commit the transaction\n\tconn.commit();\n}\ncatch (error:SQLError)\n{\n\t// rollback the transaction\n\tconn.rollback();\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);