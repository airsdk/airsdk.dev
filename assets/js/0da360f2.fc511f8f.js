"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[21961],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(96540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}},51212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/display/working-with-geometry/using-point-objects","title":"Using Point objects","description":"A Point object defines a Cartesian pair of coordinates. It represents location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis.","source":"@site/docs/development/display/working-with-geometry/using-point-objects.md","sourceDirName":"development/display/working-with-geometry","slug":"/development/display/working-with-geometry/using-point-objects","permalink":"/docs/development/display/working-with-geometry/using-point-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-geometry/using-point-objects.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Using Point objects","sidebar_position":3},"sidebar":"mainSidebar","previous":{"title":"Basics of geometry","permalink":"/docs/development/display/working-with-geometry/basics-of-geometry"},"next":{"title":"Using Rectangle objects","permalink":"/docs/development/display/working-with-geometry/using-rectangle-objects"}}');var s=n(74848),o=n(28453);const a={title:"Using Point objects",sidebar_position:3},r=void 0,c={},d=[{value:"Finding the distance between two points",id:"finding-the-distance-between-two-points",level:2},{value:"Translating coordinate spaces",id:"translating-coordinate-spaces",level:2},{value:"Moving a display object by a specified angle and distance",id:"moving-a-display-object-by-a-specified-angle-and-distance",level:2},{value:"Other uses of the Point class",id:"other-uses-of-the-point-class",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"Point"})," object defines a Cartesian pair of coordinates. It represents location in a two-dimensional coordinate system, where x represents the horizontal axis and y represents the vertical axis."]}),"\n",(0,s.jsx)(t.p,{children:"To define a Point object, you set its x and y properties, as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\nvar pt1:Point = new Point(10, 20); // x == 10; y == 20\nvar pt2:Point = new Point();\npt2.x = 10;\npt2.y = 20;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"finding-the-distance-between-two-points",children:"Finding the distance between two points"}),"\n",(0,s.jsxs)(t.p,{children:["You can use the distance() method of the Point class to find the distance between two points in a coordinate space. For example, the following code finds the distance between the registration points of two display objects, ",(0,s.jsx)(t.code,{children:"circle1"})," and ",(0,s.jsx)(t.code,{children:"circle2"})," , in the same display object container:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\nvar pt1:Point = new Point(circle1.x, circle1.y);\nvar pt2:Point = new Point(circle2.x, circle2.y);\nvar distance:Number = Point.distance(pt1, pt2);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"translating-coordinate-spaces",children:"Translating coordinate spaces"}),"\n",(0,s.jsxs)(t.p,{children:["If two display objects are in different display object containers, they can be in different coordinate spaces. You can use the ",(0,s.jsx)(t.code,{children:"localToGlobal()"})," method of the ",(0,s.jsx)(t.code,{children:"DisplayObject"})," class to translate the coordinates to the same (global) coordinate space, that of the Stage. For example, the following code finds the distance between the registration points of two display objects, ",(0,s.jsx)(t.code,{children:"circle1"})," and ",(0,s.jsx)(t.code,{children:"circle2"})," , in the different display object containers:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\nvar pt1:Point = new Point(circle1.x, circle1.y);\npt1 = circle1.localToGlobal(pt1);\nvar pt2:Point = new Point(circle2.x, circle2.y);\npt2 = circle2.localToGlobal(pt2);\nvar distance:Number = Point.distance(pt1, pt2);\n"})}),"\n",(0,s.jsx)(t.p,{children:"Similarly, to find the distance of the registration point of a display object named target from a specific point on the Stage, use the localToGlobal() method of the DisplayObject class:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\nvar stageCenter:Point = new Point();\nstageCenter.x = this.stage.stageWidth / 2;\nstageCenter.y = this.stage.stageHeight / 2;\nvar targetCenter:Point = new Point(target.x, target.y);\ntargetCenter = target.localToGlobal(targetCenter);\nvar distance:Number = Point.distance(stageCenter, targetCenter);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"moving-a-display-object-by-a-specified-angle-and-distance",children:"Moving a display object by a specified angle and distance"}),"\n",(0,s.jsxs)(t.p,{children:["You can use the ",(0,s.jsx)(t.code,{children:"polar()"})," method of the Point class to move a display object a specific distance by a specific angle. For example, the following code moves the myDisplayObject object 100 pixels by 60\xb0:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:"import flash.geom.*;\nvar distance:Number = 100;\nvar angle:Number = 2 _ Math.PI \\* (90 / 360);\nvar translatePoint:Point = Point.polar(distance, angle);\nmyDisplayObject.x += translatePoint.x;\nmyDisplayObject.y += translatePoint.y;\n"})}),"\n",(0,s.jsx)(t.h2,{id:"other-uses-of-the-point-class",children:"Other uses of the Point class"}),"\n",(0,s.jsx)(t.p,{children:"You can use Point objects with the following methods and properties:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Class"}),(0,s.jsx)(t.th,{children:"Methods or properties"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DisplayObjectContainer"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"areInaccessibleObjectsUnderPoint()"})," ",(0,s.jsx)(t.code,{children:"getObjectsUnderPoint()"})]}),(0,s.jsx)(t.td,{children:"Used to return a list of objects under a point in a display object container."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"BitmapData"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"hitTest()"})}),(0,s.jsx)(t.td,{children:"Used to define the pixel in the BitmapData object as well as the point that you are checking for a hit."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"BitmapData"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"applyFilter()"})," ",(0,s.jsx)(t.code,{children:"copyChannel()"})," ",(0,s.jsx)(t.code,{children:"merge()"})," ",(0,s.jsx)(t.code,{children:"paletteMap()"})," ",(0,s.jsx)(t.code,{children:"pixelDissolve()"})," ",(0,s.jsx)(t.code,{children:"threshold()"})]}),(0,s.jsx)(t.td,{children:"Used to define the positions of rectangles that define the operations."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Matrix"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"deltaTransformPoint()"})," ",(0,s.jsx)(t.code,{children:"transformPoint()"})]}),(0,s.jsx)(t.td,{children:"Used to define points for which you want to apply a transformation."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Rectangle"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"bottomRight"})," ",(0,s.jsx)(t.code,{children:"size"})," ",(0,s.jsx)(t.code,{children:"topLeft"})]}),(0,s.jsx)(t.td,{children:"Used to define these properties."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);