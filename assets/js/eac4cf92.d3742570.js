"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[4954],{28453:(e,i,r)=>{r.d(i,{R:()=>a,x:()=>s});var t=r(96540);const o={},n=t.createContext(o);function a(e){const i=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(n.Provider,{value:i},e.children)}},38416:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files","title":"Dropping remote files","description":"Use the URLFilePromise class to create file promise objects representing files","source":"@site/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files.md","sourceDirName":"development/user-interaction/drag-and-drop-in-air/dropping-file-promises","slug":"/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/dropping-remote-files.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"mainSidebar","previous":{"title":"Dropping file promises","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/"},"next":{"title":"Implementing the IFilePromise interface","permalink":"/docs/development/user-interaction/drag-and-drop-in-air/dropping-file-promises/implementing-the-ifilepromise-interface"}}');var o=r(74848),n=r(28453);const a={sidebar_position:1},s="Dropping remote files",l={},p=[];function d(e){const i={a:"a",code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"dropping-remote-files",children:"Dropping remote files"})}),"\n",(0,o.jsxs)(i.p,{children:["Use the URLFilePromise class to create file promise objects representing files\nor data available at a URL. Add one or more file promise objects to the\nclipboard using the ",(0,o.jsx)(i.code,{children:"FILE_PROMISE_LIST"})," clipboard format. In the following\nexample, a single file, available at ",(0,o.jsx)(i.a,{href:"http://www.example.com/foo.txt",children:"http://www.example.com/foo.txt"}),", is\ndownloaded and saved to the drop location as bar.txt. (The remote and the local\nfile names do not have to match.)"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'if( Clipboard.supportsFilePromise )\n{\n\tvar filePromise:URLFilePromise = new URLFilePromise();\n\tfilePromise.request = new URLRequest("http://example.com/foo.txt");\n\tfilePromise.relativePath = "bar.txt";\n\n\tvar fileList:Array = new Array( filePromise );\n\tvar clipboard:Clipboard = new Clipboard();\n\tclipboard.setData( ClipboardFormats.FILE_PROMISE_LIST_FORMAT, fileList );\n\tNativeDragManager.doDrag( dragSource, clipboard );\n}\n'})}),"\n",(0,o.jsxs)(i.p,{children:["You can allow the user to drag more than one file at a time by adding more file\npromise objects to the array assigned to the clipboard. You can also specify\nsubdirectories in the ",(0,o.jsx)(i.code,{children:"relativePath"})," property so that some or all of the files\nincluded in the operation are placed in a subfolder relative to the drop\nlocation."]}),"\n",(0,o.jsxs)(i.p,{children:["The following example illustrates how to initiate a drag operation that includes\nmultiple file promises. In this example, an html page, ",(0,o.jsx)(i.em,{children:"article.html"})," , is put\non the clipboard as a file promise, along with its two linked image files. The\nimages are copied into an ",(0,o.jsx)(i.em,{children:"images"})," subfolder so that the relative links are\nmaintained."]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:'if( Clipboard.supportsFilePromise )\n{\n\t//Create the promise objects\n\tvar filePromise:URLFilePromise = new URLFilePromise();\n\tfilePromise.request = new URLRequest("http://example.com/article.html");\n\tfilePromise.relativePath = "article.html";\n\n\tvar image1Promise:URLFilePromise = new URLFilePromise();\n\timage1Promise.request = new URLRequest("http://example.com/images/img_1.jpg");\n\timage1Promise.relativePath = "images/img_1.html";\n\tvar image2Promise:URLFilePromise = new URLFilePromise();\n\timage2Promise.request = new URLRequest("http://example.com/images/img_2.jpg");\n\timage2Promise.relativePath = "images/img_2.jpg";\n\n\t//Put the promise objects onto the clipboard inside an array\n\tvar fileList:Array = new Array( filePromise, image1Promise, image2Promise );\n\tvar clipboard:Clipboard = new Clipboard();\n\tclipboard.setData( ClipboardFormats.FILE_PROMISE_LIST_FORMAT, fileList );\n\t//Start the drag operation\n\tNativeDragManager.doDrag( dragSource, clipboard );\n}\n'})})]})}function m(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);