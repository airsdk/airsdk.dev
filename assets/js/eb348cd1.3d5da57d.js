"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[29165],{339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects","title":"Obtaining string representations of other objects","description":"You can obtain a String representation for any kind of object. All objects have","source":"@site/docs/development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects.md","sourceDirName":"development/core-actionscript-classes/working-with-strings","slug":"/development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects","permalink":"/docs/development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/core-actionscript-classes/working-with-strings/obtaining-string-representations-of-other-objects.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"mainSidebar","previous":{"title":"Comparing strings","permalink":"/docs/development/core-actionscript-classes/working-with-strings/comparing-strings"},"next":{"title":"Concatenating strings","permalink":"/docs/development/core-actionscript-classes/working-with-strings/concatenating-strings"}}');var s=n(74848),r=n(28453);const i={sidebar_position:6},c="Obtaining string representations of other objects",a={},d=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"obtaining-string-representations-of-other-objects",children:"Obtaining string representations of other objects"})}),"\n",(0,s.jsxs)(t.p,{children:["You can obtain a String representation for any kind of object. All objects have\na ",(0,s.jsx)(t.code,{children:"toString()"})," method for this purpose:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-actionscript",children:'var n:Number = 99.47;\nvar str:String = n.toString();\n// str == "99.47"\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When using the ",(0,s.jsx)(t.code,{children:"+"})," concatenation operator with a combination of String objects\nand objects that are not strings, you do not need to use the ",(0,s.jsx)(t.code,{children:"toString()"}),"\nmethod. For details on concatenation, see the next section."]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"String()"})," global function returns the same value for a given object as the\nvalue returned by the object calling the ",(0,s.jsx)(t.code,{children:"toString()"})," method."]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var o=n(96540);const s={},r=o.createContext(s);function i(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);