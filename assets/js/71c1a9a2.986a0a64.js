"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[15108],{28453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(96540);const o={},c=t.createContext(o);function s(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(c.Provider,{value:n},e.children)}},63265:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"development/client-system-interaction/using-workers-for-concurrency/index","title":"Using workers for concurrency","description":"ActionScript workers make it possible to execute code concurrently, or in other","source":"@site/docs/development/client-system-interaction/using-workers-for-concurrency/index.md","sourceDirName":"development/client-system-interaction/using-workers-for-concurrency","slug":"/development/client-system-interaction/using-workers-for-concurrency/","permalink":"/docs/development/client-system-interaction/using-workers-for-concurrency/","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/client-system-interaction/using-workers-for-concurrency/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Display screens in AIR","permalink":"/docs/development/client-system-interaction/display-screens-in-air"},"next":{"title":"Understanding workers and concurrency","permalink":"/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency"}}');var o=r(74848),c=r(28453);const s={},i="Using workers for concurrency",a={},d=[];function l(e){const n={a:"a",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"using-workers-for-concurrency",children:"Using workers for concurrency"})}),"\n",(0,o.jsx)(n.p,{children:"ActionScript workers make it possible to execute code concurrently, or in other\nwords, to execute code in the background without interrupting the main code's\nexecution."}),"\n",(0,o.jsx)(n.p,{children:"The ActionScript concurrency apis are available on desktop platforms only in\nFlash Player 11.4 and later, and AIR 3.4 and later. Concurrency is not supported\nin AIR for mobile platforms."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/using-workers-for-concurrency/understanding-workers-and-concurrency",children:"Understanding workers and concurrency"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/using-workers-for-concurrency/creating-and-managing-workers",children:"Creating and managing workers"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/development/client-system-interaction/using-workers-for-concurrency/communicating-between-workers",children:"Communicating between workers"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);