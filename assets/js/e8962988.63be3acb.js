"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[55294],{28453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>i});var t=n(96540);const d={},s=t.createContext(d);function r(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),t.createElement(s.Provider,{value:a},e.children)}},47104:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader","title":"Loading or embedding a shader","description":"The first step in using a Pixel Bender shader in ActionScript is to get access","source":"@site/docs/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader.md","sourceDirName":"development/display/working-with-pixel-bender-shaders","slug":"/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader","permalink":"/docs/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/display/working-with-pixel-bender-shaders/loading-or-embedding-a-shader.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Basics of Pixel Bender shaders","permalink":"/docs/development/display/working-with-pixel-bender-shaders/basics-of-pixel-bender-shaders"},"next":{"title":"Specifying shader input and parameter values","permalink":"/docs/development/display/working-with-pixel-bender-shaders/specifying-shader-input-and-parameter-values"}}');var d=n(74848),s=n(28453);const r={},i="Loading or embedding a shader",o={},h=[];function c(e){const a={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(a.header,{children:(0,d.jsx)(a.h1,{id:"loading-or-embedding-a-shader",children:"Loading or embedding a shader"})}),"\n",(0,d.jsxs)(a.p,{children:["The first step in using a Pixel Bender shader in ActionScript is to get access\nto the shader in your ActionScript code. Because a shader is created using the\nAdobe Pixel Bender Toolkit, and written in the Pixel Bender language, it cannot\nbe directly accessed in ActionScript. Instead, you create an instance of the\nShader class that represents the Pixel Bender shader to ActionScript. The Shader\nobject allows you to find out information about the shader, such as whether it\nexpects parameters or input image values. You pass the Shader object to other\nobjects to actually use the shader. For example, to use the shader as a filter\nyou assign the Shader object to a ShaderFilter object's ",(0,d.jsx)(a.code,{children:"shader"})," property.\nAlternatively, to use the shader as a drawing fill, you pass the Shader object\nas an argument to the ",(0,d.jsx)(a.code,{children:"Graphics.beginShaderFill()"})," method."]}),"\n",(0,d.jsx)(a.p,{children:"Your ActionScript code can access a shader created by Adobe Pixel Bender Toolkit\n(a .pbj file) in two ways:"}),"\n",(0,d.jsxs)(a.ul,{children:["\n",(0,d.jsx)(a.li,{children:"Loaded at run time: the shader file can be loaded as an external asset using a\nURLLoader object. This technique is like loading an external asset such as a\ntext file. The following example demonstrates loading a shader bytecode file\nat run time and linking it to a Shader instance:"}),"\n"]}),"\n",(0,d.jsx)(a.pre,{children:(0,d.jsx)(a.code,{children:'var loader:URLLoader = new URLLoader();\nloader.dataFormat = URLLoaderDataFormat.BINARY;\nloader.addEventListener(Event.COMPLETE, onLoadComplete);\nloader.load(new URLRequest("myShader.pbj"));\n\nvar shader:Shader;\n\nfunction onLoadComplete(event:Event):void {\n  // Create a new shader and set the loaded data as its bytecode\n  shader = new Shader();\n  shader.byteCode = loader.data;\n\n  // You can also pass the bytecode to the Shader() constructor like this:\n  // shader = new Shader(loader.data);\n\n  // do something with the shader\n}\n'})}),"\n",(0,d.jsxs)(a.ul,{children:["\n",(0,d.jsxs)(a.li,{children:["Embedded in the SWF file: the shader file can be embedded in the SWF file at\ncompile time using the ",(0,d.jsx)(a.code,{children:"[Embed]"})," metadata tag. The ",(0,d.jsx)(a.code,{children:"[Embed]"})," metadata tag is\nonly available if you use the Flex SDK to compile the SWF file. The ",(0,d.jsx)(a.code,{children:"[Embed]"}),"\ntag's ",(0,d.jsx)(a.code,{children:"source"})," parameter points to the shader file, and its ",(0,d.jsx)(a.code,{children:"mimeType"}),"\nparameter is ",(0,d.jsx)(a.code,{children:'"application/octet-stream"'}),", as in this example:"]}),"\n"]}),"\n",(0,d.jsx)(a.pre,{children:(0,d.jsx)(a.code,{children:'[Embed(source="myShader.pbj", mimeType="application/octet-stream")]\nvar MyShaderClass:Class;\n\n// ...\n\n// create a shader and set the embedded shader as its bytecode\nvar shader:Shader = new Shader();\nshader.byteCode = new MyShaderClass();\n\n// You can also pass the bytecode to the Shader() constructor like this:\n// var shader:Shader = new Shader(new MyShaderClass());\n\n// do something with the shader\n'})}),"\n",(0,d.jsxs)(a.p,{children:["In either case, you link the raw shader bytecode (the ",(0,d.jsx)(a.code,{children:"URLLoader.data"})," property\nor an instance of the ",(0,d.jsx)(a.code,{children:"[Embed]"})," data class) to the Shader instance. As the\nprevious examples demonstrate, you can assign the bytecode to the Shader\ninstance in two ways. You can pass the shader bytecode as an argument to the\n",(0,d.jsx)(a.code,{children:"Shader()"})," constructor. Alternatively, you can set it as the Shader instance's\n",(0,d.jsx)(a.code,{children:"byteCode"})," property."]}),"\n",(0,d.jsxs)(a.p,{children:["Once a Pixel Bender shader has been created and linked to a Shader object, you\ncan use the shader to create effects in several ways. You can use it as a\nfilter, a blend mode, a bitmap fill, or for stand-alone processing of bitmap or\nother data. You can also use the Shader object's ",(0,d.jsx)(a.code,{children:"data"})," property to access the\nshader's metadata, specify input images, and set parameter values."]})]})}function l(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,d.jsx)(a,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}}}]);