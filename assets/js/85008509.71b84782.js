"use strict";(self.webpackChunkairsdk_dev=self.webpackChunkairsdk_dev||[]).push([[28462],{28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(96540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}},94394:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"development/text/using-the-textfield-class/formatting-text","title":"Formatting text","description":"You have several options for programmatically formatting the display of text.","source":"@site/docs/development/text/using-the-textfield-class/formatting-text.md","sourceDirName":"development/text/using-the-textfield-class","slug":"/development/text/using-the-textfield-class/formatting-text","permalink":"/docs/development/text/using-the-textfield-class/formatting-text","draft":false,"unlisted":false,"editUrl":"https://github.com/airsdk/airsdk.dev/edit/main/docs/development/text/using-the-textfield-class/formatting-text.md","tags":[],"version":"current","frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"Displaying text","permalink":"/docs/development/text/using-the-textfield-class/displaying-text"},"next":{"title":"Restricting text input","permalink":"/docs/development/text/using-the-textfield-class/restricting-text-input"}}');var s=n(74848),o=n(28453);const a={},l="Formatting text",r={},d=[{value:"Assigning text formats",id:"assigning-text-formats",level:2},{value:"Applying cascading style sheets",id:"applying-cascading-style-sheets",level:2},{value:"Loading an external CSS file",id:"loading-an-external-css-file",level:2},{value:"Formatting ranges of text within a text field",id:"formatting-ranges-of-text-within-a-text-field",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"formatting-text",children:"Formatting text"})}),"\n",(0,s.jsxs)(t.p,{children:["You have several options for programmatically formatting the display of text.\nYou can set properties directly on the TextField instance\u2014for example, the\n",(0,s.jsx)(t.code,{children:"TextFIeld.thickness"}),", ",(0,s.jsx)(t.code,{children:"TextField.textColor"}),", and ",(0,s.jsx)(t.code,{children:"TextField.textHeight"}),"\nproperties.Or you can designate the content of the text field using the\n",(0,s.jsx)(t.code,{children:"htmlText"})," property and use the supported HTML tags, such as ",(0,s.jsx)(t.code,{children:"b"}),", ",(0,s.jsx)(t.code,{children:"i"}),", and ",(0,s.jsx)(t.code,{children:"u"}),".\nBut you can also apply TextFormat objects to text fields containing plain text,\nor StyleSheet objects to text fields containing the ",(0,s.jsx)(t.code,{children:"htmlText"})," property. Using\nTextFormat and StyleSheet objects provides the most control and consistency over\nthe appearance of text throughout your application. You can define a TextFormat\nor StyleSheet object and apply it to many or all text fields in your\napplication."]}),"\n",(0,s.jsx)(t.h2,{id:"assigning-text-formats",children:"Assigning text formats"}),"\n",(0,s.jsx)(t.p,{children:"You can use the TextFormat class to set a number of different text display\nproperties and to apply them to the entire contents of a TextField object, or to\na range of text."}),"\n",(0,s.jsx)(t.p,{children:"The following example applies one TextFormat object to an entire TextField\nobject and applies a second TextFormat object to a range of text within that\nTextField object:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var tf:TextField = new TextField();\ntf.text = "Hello Hello";\n\nvar format1:TextFormat = new TextFormat();\nformat1.color = 0xFF0000;\n\nvar format2:TextFormat = new TextFormat();\nformat2.font = "Courier";\n\ntf.setTextFormat(format1);\nvar startRange:uint = 6;\ntf.setTextFormat(format2, startRange);\n\naddChild(tf);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TextField.setTextFormat()"})," method only affects text that is already\ndisplayed in the text field. If the content in the TextField changes, your\napplication might need to call the ",(0,s.jsx)(t.code,{children:"TextField.setTextFormat()"})," method again to\nreapply the formatting. You can also set the TextField ",(0,s.jsx)(t.code,{children:"defaultTextFormat"}),"\nproperty to specify the format to be used for user-entered text."]}),"\n",(0,s.jsx)(t.h2,{id:"applying-cascading-style-sheets",children:"Applying cascading style sheets"}),"\n",(0,s.jsxs)(t.p,{children:["Text fields can contain either plain text or HTML-formatted text. Plain text is\nstored in the ",(0,s.jsx)(t.code,{children:"text"})," property of the instance, and HTML text is stored in the\n",(0,s.jsx)(t.code,{children:"htmlText"})," property."]}),"\n",(0,s.jsx)(t.p,{children:"You can use CSS style declarations to define text styles that you can apply to\nmany different text fields. CSS style declarations can be created in your\napplication code or loaded in at run time from an external CSS file."}),"\n",(0,s.jsx)(t.p,{children:"The flash.text.StyleSheet class handles CSS styles. The StyleSheet class\nrecognizes a limited set of CSS properties. For a detailed list of the style\nproperties that the StyleSheet class supports, see the flash.textStylesheet\nentry in the ActionScript 3.0 Reference."}),"\n",(0,s.jsx)(t.p,{children:"As the following example shows, you can create CSS in your code and apply those\nstyles to HTML text by using a StyleSheet object:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var style:StyleSheet = new StyleSheet();\n\nvar styleObj:Object = new Object();\nstyleObj.fontSize = "bold";\nstyleObj.color = "#FF0000";\nstyle.setStyle(".darkRed", styleObj);\n\nvar tf:TextField = new TextField();\ntf.styleSheet = style;\ntf.htmlText = "<span class = \'darkRed\'>Red</span> apple";\n\naddChild(tf);\n'})}),"\n",(0,s.jsxs)(t.p,{children:["After creating a StyleSheet object, the example code creates a simple object to\nhold a set of style declaration properties. Then it calls the\n",(0,s.jsx)(t.code,{children:"StyleSheet.setStyle()"}),' method, which adds the new style to the style sheet with\nthe name ".darkred". Next, it applies the style sheet formatting by assigning\nthe StyleSheet object to the TextField ',(0,s.jsx)(t.code,{children:"styleSheet"})," property."]}),"\n",(0,s.jsxs)(t.p,{children:["For CSS styles to take effect, the style sheet should be applied to the\nTextField object before the ",(0,s.jsx)(t.code,{children:"htmlText"})," property is set."]}),"\n",(0,s.jsx)(t.p,{children:"By design, a text field with a style sheet is not editable. If you have an input\ntext field and assign a style sheet to it, the text field shows the properties\nof the style sheet, but the text field does not allow users to enter new text\ninto it. Also, you cannot use the following ActionScript APIs on a text field\nwith an assigned style sheet:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TextField.replaceText()"})," method"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TextField.replaceSelectedText()"})," method"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TextField.defaultTextFormat"})," property"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"TextField.setTextFormat()"})," method"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["If a text field has a style sheet assigned to it, but later the\n",(0,s.jsx)(t.code,{children:"TextField.styleSheet"})," property is set to ",(0,s.jsx)(t.code,{children:"null"}),", the contents of both\n",(0,s.jsx)(t.code,{children:"TextField.text"})," and ",(0,s.jsx)(t.code,{children:"TextField.htmlText"})," properties add tags and attributes to\ntheir content to incorporate the formatting from the previously assigned style\nsheet. To preserve the original ",(0,s.jsx)(t.code,{children:"htmlText"})," property, save it in a variable\nbefore setting the style sheet to ",(0,s.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"loading-an-external-css-file",children:"Loading an external CSS file"}),"\n",(0,s.jsx)(t.p,{children:"The CSS approach to formatting is more powerful when you can load CSS\ninformation from an external file at run time. When the CSS data is external to\nthe application itself, you can change the visual style of text in your\napplication without having to change your ActionScript 3.0 source code. After\nyour application has been deployed, you can change an external CSS file to\nchange the look of the application, without having to redeploy the application\nSWF file."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"StyleSheet.parseCSS()"})," method converts a string that contains CSS data into\nstyle declarations in the StyleSheet object. The following example shows how to\nread an external CSS file and apply its style declarations to a TextField\nobject."]}),"\n",(0,s.jsx)(t.p,{children:"First, here is the content of the CSS file to be loaded, which is named\nexample.css:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"p {\n\tfont-family: Times New Roman, Times, _serif;\n\tfont-size: 14;\n}\n\nh1 {\n\tfont-family: Arial, Helvetica, _sans;\n\tfont-size: 20;\n\tfont-weight: bold;\n}\n\n.bluetext {\n"})}),"\n",(0,s.jsx)(t.p,{children:"color: #0000CC; }"}),"\n",(0,s.jsx)(t.p,{children:"Next is the ActionScript code for a class that loads the example.css file and\napplies the styles to TextField content:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'package\n{\n\timport flash.display.Sprite;\n\timport flash.events.Event;\n\timport flash.net.URLLoader;\n\timport flash.net.URLRequest;\n\timport flash.text.StyleSheet;\n\timport flash.text.TextField;\n\timport flash.text.TextFieldAutoSize;\n\n\tpublic class CSSFormattingExample extends Sprite\n\t{\n\t\tvar loader:URLLoader;\n\t\tvar field:TextField;\n\t\tvar exampleText:String = "<h1>This is a headline</h1>" +\n\t\t\t"<p>This is a line of text. <span class=\'bluetext\'>" +\n\t\t\t"This line of text is colored blue.</span></p>";\n\n\t\tpublic function CSSFormattingExample():void\n\t\t{\n\t\t\tfield = new TextField();\n\t\t\tfield.width = 300;\n\t\t\tfield.autoSize = TextFieldAutoSize.LEFT;\n\t\t\tfield.wordWrap = true;\n\t\t\taddChild(field);\n\n\t\t\tvar req:URLRequest = new URLRequest("example.css");\n\n\t\t\tloader = new URLLoader();\n\t\t\tloader.addEventListener(Event.COMPLETE, onCSSFileLoaded);\n\t\t\tloader.load(req);\n\t\t}\n\n\t\tpublic function onCSSFileLoaded(event:Event):void\n\t\t{\n\t\t\tvar sheet:StyleSheet = new StyleSheet();\n\t\t\tsheet.parseCSS(loader.data);\n\t\t\tfield.styleSheet = sheet;\n\t\t\tfield.htmlText = exampleText;\n\t\t}\n\t}\n}\n'})}),"\n",(0,s.jsxs)(t.p,{children:["When the CSS data is loaded, the ",(0,s.jsx)(t.code,{children:"onCSSFileLoaded()"})," method executes and calls\nthe ",(0,s.jsx)(t.code,{children:"StyleSheet.parseCSS()"})," method to transfer the style declarations to the\nStyleSheet object."]}),"\n",(0,s.jsx)(t.h2,{id:"formatting-ranges-of-text-within-a-text-field",children:"Formatting ranges of text within a text field"}),"\n",(0,s.jsxs)(t.p,{children:["A useful method of the flash.text.TextField class is the ",(0,s.jsx)(t.code,{children:"setTextFormat()"}),"\nmethod. Using ",(0,s.jsx)(t.code,{children:"setTextFormat()"}),", you can assign specific properties to the\ncontents of a part of a text field to respond to user input, such as forms that\nneed to remind users that certain entries are required or to change the emphasis\nof a subsection of a passage of text within a text field as a user selects parts\nof the text."]}),"\n",(0,s.jsxs)(t.p,{children:["The following example uses ",(0,s.jsx)(t.code,{children:"TextField.setTextFormat()"})," on a range of characters\nto change the appearance of part of the content of ",(0,s.jsx)(t.code,{children:"myTextField"})," when the user\nclicks the text field:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'var myTextField:TextField = new TextField();\nmyTextField.text = "No matter where you click on this text field the TEXT IN ALL CAPS changes format.";\nmyTextField.autoSize = TextFieldAutoSize.LEFT;\naddChild(myTextField);\naddEventListener(MouseEvent.CLICK, changeText);\n\nvar myformat:TextFormat = new TextFormat();\nmyformat.color = 0xFF0000;\nmyformat.size = 18;\nmyformat.underline = true;\n\nfunction changeText(event:MouseEvent):void\n{\n\tmyTextField.setTextFormat(myformat, 49, 65);\n}\n'})})]})}function c(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);